{"version":3,"sources":["maxDepthRule.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,6BAA+B;AAE/B;IAA0B,wBAAuB;IAAjD;;IAMA,CAAC;IAJU,oBAAK,GAAZ,UAAa,UAAwB;QAEjC,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,cAAc,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;IACnF,CAAC;IACL,WAAC;AAAD,CANA,AAMC,CANyB,IAAI,CAAC,KAAK,CAAC,YAAY,GAMhD;AANY,oBAAI;AAQjB,yCAAyC;AACzC;IAA6B,kCAAe;IAKxC,wBAAY,UAAwB,EAAE,OAAqB;QAA3D,YAEI,kBAAM,UAAU,EAAE,OAAO,CAAC,SAY7B;QAhBO,kBAAY,GAAU,CAAC,CAAC;QAM5B,IAAI,MAAM,GAAO,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QAE1C,IAAG,OAAO,MAAM,KAAK,QAAQ,EAC7B;YACI,KAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;SAC1B;aAED;YACI,KAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;SACrB;;IACL,CAAC;IAEM,mCAAU,GAAjB,UAAkB,IAAa;QAE3B,IAAI,CAAC,YAAY,EAAE,CAAC;QAEpB,IAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,EACpC;YACI,IAAI,CAAC,wBAAwB,CACzB,IAAI,CAAC,QAAQ,EAAE,EACf,IAAI,CAAC,QAAQ,EAAE,EACf,kCAAkC,GAAG,IAAI,CAAC,YAAY,GAAG,uCAAuC,GAAG,IAAI,CAAC,QAAQ,CACnH,CAAC;SACL;QAED,iBAAM,UAAU,YAAC,IAAI,CAAC,CAAC;QAEvB,IAAI,CAAC,YAAY,EAAE,CAAC;IACxB,CAAC;IACL,qBAAC;AAAD,CAtCA,AAsCC,CAtC4B,IAAI,CAAC,UAAU,GAsC3C;AACD,wCAAwC","file":"maxDepthRule.js","sourcesContent":["/* tslint:disabble:max-classes-per-file */\nimport * as ts from 'typescript';\nimport * as Lint from 'tslint';\n\nexport class Rule extends Lint.Rules.AbstractRule\n{\n    public apply(sourceFile:ts.SourceFile):Lint.RuleFailure[]\n    {\n        return this.applyWithWalker(new MaxDepthWalker(sourceFile, this.getOptions()));\n    }\n}\n\n// The walker takes care of all the work.\nclass MaxDepthWalker extends Lint.RuleWalker\n{\n    private maxDepth:number;\n    private currentDepth:number = 0;\n\n    constructor(sourceFile:ts.SourceFile, options:Lint.IOptions)\n    {\n        super(sourceFile, options);\n\n        let option:any = options.ruleArguments[0];\n\n        if(typeof option === 'number')\n        {\n            this.maxDepth = option;\n        }\n        else\n        {\n            this.maxDepth = 4;\n        }\n    }\n\n    public visitBlock(node:ts.Block):void\n    {\n        this.currentDepth++;\n\n        if(this.currentDepth > this.maxDepth)\n        {\n            this.addFailureFromStartToEnd(\n                node.getStart(),\n                node.getWidth(),\n                'Nesting-level of current block: ' + this.currentDepth + '. Maximum nesting level of blocks is ' + this.maxDepth\n            );\n        }\n\n        super.visitBlock(node);\n\n        this.currentDepth--;\n    }\n}\n/* tslint:enable:max-classes-per-file */\n"]}