import { Headers, Http, Response, URLSearchParams } from '@angular/http';
import 'rxjs/add/operator/map';
import { Observable } from 'rxjs';
import { TerraLoadingSpinnerService } from '../components/loading-spinner/service/terra-loading-spinner.service';
import { TerraBaseParameterInterface } from '../components/data/terra-base-parameter.interface';
/**
 * @author mfrank
 */
export declare class TerraBaseService {
    private terraLoadingSpinnerService;
    private _baseHttp;
    private baseUrl;
    private isPlugin;
    headers: Headers;
    url: string;
    protected dataModel: {
        [dataId: number]: any;
    };
    private _alert;
    constructor(terraLoadingSpinnerService: TerraLoadingSpinnerService, _baseHttp: Http, baseUrl: string, isPlugin?: boolean);
    readonly http: Http;
    readonly isLoading: boolean;
    protected setToHeader(key: string, value: string): void;
    protected deleteFromHeader(key: string): void;
    protected setAuthorization(): void;
    protected mapRequest(request: Observable<any>, err?: (error: any) => void, isRaw?: boolean): Observable<any>;
    private dispatchEvent(eventToDispatch);
    private getErrorMessage(error);
    private getErrorClass(error);
    /**
     * Workaround to prevent the injection of the TranslationService in every Service, that extends TerraBaseService
     * @returns {string}
     */
    protected getErrorString(): string;
    /**
     * Handles exceptions that are returned from the server on a failed rest call
     * @param exception
     */
    private handleException(exception);
    /**
     * @param {TerraBaseParameterInterface} params
     * @param {boolean} arrayAsArray - Defines if an array search param should interpret and parsed as an array or not. Default is false.
     * @returns {URLSearchParams}
     */
    protected createUrlSearchParams(params: TerraBaseParameterInterface, arrayAsArray?: boolean): URLSearchParams;
    private createArraySearchParams(key, params);
    private getMissingUserPermissionAlertMessage(error);
    protected handleLocalDataModelGetList(getRequest$: Observable<Response>, params?: TerraBaseParameterInterface): Observable<Array<any>>;
    private hasAllParamsLoaded(params);
    protected handleLocalDataModelGet(getRequest$: Observable<Response>, dataId: number): Observable<any>;
    protected handleLocalDataModelPost(postRequest$: Observable<Response>, dataId: number): Observable<any>;
    protected handleLocalDataModelPut(putRequest$: Observable<Response>, dataId: number): Observable<any>;
    protected handleLocalDataModelDelete(deleteRequest$: Observable<Response>, dataId: number): Observable<void>;
}
