"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/http");
/**
 * @author pweyrich
 * @description Custom implementation of the native QueryEncoder.. It uses javascript's encodeURIComponent-Method to encode query params.
 * Should be useless when using angular's new HttpClient along with HttpParams.
 */
var TerraQueryEncoder = /** @class */ (function (_super) {
    __extends(TerraQueryEncoder, _super);
    function TerraQueryEncoder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TerraQueryEncoder.prototype.encodeKey = function (k) {
        return encodeURIComponent(k);
    };
    TerraQueryEncoder.prototype.encodeValue = function (v) {
        return encodeURIComponent(v);
    };
    return TerraQueryEncoder;
}(http_1.QueryEncoder));
exports.TerraQueryEncoder = TerraQueryEncoder;

//# sourceMappingURL=terra-query-encoder.js.map
