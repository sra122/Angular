"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:restrict-leading-underscore */
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
require("rxjs/add/operator/map");
var rxjs_1 = require("rxjs");
var util_1 = require("util");
var terra_alert_component_1 = require("../components/alert/terra-alert.component");
var terra_loading_spinner_service_1 = require("../components/loading-spinner/service/terra-loading-spinner.service");
var operators_1 = require("rxjs/operators");
var of_1 = require("rxjs/observable/of");
var terra_query_encoder_1 = require("./data/terra-query-encoder");
/**
 * @author mfrank
 */
var TerraBaseService = /** @class */ (function () {
    function TerraBaseService(terraLoadingSpinnerService, _baseHttp, baseUrl, isPlugin) {
        this.terraLoadingSpinnerService = terraLoadingSpinnerService;
        this._baseHttp = _baseHttp;
        this.baseUrl = baseUrl;
        this.isPlugin = isPlugin;
        // TODO use D instead of any
        this.dataModel = {};
        this._alert = terra_alert_component_1.TerraAlertComponent.getInstance();
        this.headers = new http_1.Headers({ 'Content-Type': 'application/json' });
        this.setAuthorization();
        this.url = baseUrl;
        if (util_1.isNullOrUndefined(this.isPlugin)) {
            this.isPlugin = false;
        }
    }
    Object.defineProperty(TerraBaseService.prototype, "http", {
        get: function () {
            return this._baseHttp;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraBaseService.prototype, "isLoading", {
        get: function () {
            return this.terraLoadingSpinnerService.isLoading;
        },
        enumerable: true,
        configurable: true
    });
    TerraBaseService.prototype.setToHeader = function (key, value) {
        this.headers.set(key, value);
    };
    TerraBaseService.prototype.deleteFromHeader = function (key) {
        this.headers.delete(key);
    };
    TerraBaseService.prototype.setAuthorization = function () {
        if (localStorage.getItem('accessToken')) {
            this.setToHeader('Authorization', 'Bearer ' + localStorage.getItem('accessToken'));
        }
    };
    // TODO use D instead of any, use a meaningful error type
    TerraBaseService.prototype.mapRequest = function (request, err, isRaw) {
        var _this = this;
        this.terraLoadingSpinnerService.start();
        return request.map(function (response) {
            if (response.status === 204) {
                return response.text();
            }
            else if (isRaw) {
                return response;
            }
            else {
                return response.text() === '' ? {} : response.json();
            }
        }).catch(function (error) {
            if (err) {
                err(error);
            }
            else {
                _this.handleException(error);
            }
            if (error.status === 403 && _this.getErrorClass(error) === 'UIHashExpiredException') {
                var routeToLoginEvent = new CustomEvent('CustomEvent');
                routeToLoginEvent.initCustomEvent('routeToLogin', true, true, {});
                _this.dispatchEvent(routeToLoginEvent);
            }
            else if (error.status === 403) // unauthorized
             {
                var missingUserPermissionAlertMessage = _this.getMissingUserPermissionAlertMessage(error);
                if (_this.isPlugin) {
                    _this._alert.addAlertForPlugin({
                        msg: missingUserPermissionAlertMessage,
                        type: 'danger',
                        dismissOnTimeout: 0
                    });
                }
                else {
                    _this._alert.addAlert({
                        msg: missingUserPermissionAlertMessage,
                        type: 'danger',
                        dismissOnTimeout: 0
                    });
                }
            }
            // END Very unclean workaround!
            else if (error.status === 401) // unauthenticated
             {
                var loginEvent = new CustomEvent('login');
                // Workaround for plugins in Angular (loaded via iFrame)
                _this.dispatchEvent(loginEvent);
            }
            return rxjs_1.Observable.throw(error);
        }).finally(function () { return _this.terraLoadingSpinnerService.stop(); });
    };
    TerraBaseService.prototype.dispatchEvent = function (eventToDispatch) {
        if (!util_1.isNullOrUndefined(window.parent)) {
            // workaround for plugins in GWT (loaded via iFrame)
            if (!util_1.isNullOrUndefined(window.parent.window.parent)) {
                window.parent.window.parent.window.dispatchEvent(eventToDispatch);
            }
            else {
                window.parent.window.dispatchEvent(eventToDispatch);
            }
        }
        else {
            window.dispatchEvent(eventToDispatch);
        }
    };
    // TODO use a meaningful error type
    TerraBaseService.prototype.getErrorMessage = function (error) {
        try {
            var errorMessage = void 0;
            if (!util_1.isNullOrUndefined(error.json().error)) {
                errorMessage = error.json().error.message;
            }
            return errorMessage;
        }
        catch (e) {
            return null;
        }
    };
    // TODO use a meaningful error type
    TerraBaseService.prototype.getErrorClass = function (error) {
        try {
            var errorClass = error.json().class;
            return errorClass;
        }
        catch (e) {
            return null;
        }
    };
    /**
     * Workaround to prevent the injection of the TranslationService in every Service, that extends TerraBaseService
     * @returns {string}
     */
    TerraBaseService.prototype.getErrorString = function () {
        // get language from localStorage
        var langInLocalStorage = localStorage.getItem('plentymarkets_lang_');
        // translate error string
        switch (langInLocalStorage) {
            case 'de':
                return 'Fehler';
            case 'en':
                return 'Error';
            default:
                return 'Error';
        }
    };
    /**
     * Handles exceptions that are returned from the server on a failed rest call
     * @param exception
     */
    // TODO rename exception to error and use a meaningful type
    TerraBaseService.prototype.handleException = function (exception) {
        // parse response object
        var response = JSON.parse(exception._body);
        // check which exception type has been received
        if (!util_1.isNullOrUndefined(response.error) && !util_1.isNullOrUndefined(response.message)) {
            if (this.isPlugin) {
                this._alert.addAlertForPlugin({
                    msg: this.getErrorString() + ': ' + response.message,
                    type: 'danger',
                    dismissOnTimeout: 0
                });
            }
            else {
                this._alert.addAlert({
                    msg: this.getErrorString() + ': ' + response.message,
                    type: 'danger',
                    dismissOnTimeout: 0
                });
            }
        }
        // return if error code is null
        else if (util_1.isNullOrUndefined(response.error) || util_1.isNull(response.error.code)) {
            return;
        }
        // default exception type
        else {
            // parse exception string
            var error = response.error;
            // get error code
            var errorCode = error.code ? ' ' + error.code : '';
            if (this.isPlugin) {
                this._alert.addAlertForPlugin({
                    msg: this.getErrorString() + errorCode + ': ' + error.message,
                    type: 'danger',
                    dismissOnTimeout: 0
                });
            }
            else {
                this._alert.addAlert({
                    msg: this.getErrorString() + errorCode + ': ' + error.message,
                    type: 'danger',
                    dismissOnTimeout: 0
                });
            }
        }
    };
    /**
     * @param {TerraBaseParameterInterface} params
     * @param {boolean} arrayAsArray - Defines if an array search param should interpret and parsed as an array or not. Default is false.
     * @returns {URLSearchParams}
     */
    TerraBaseService.prototype.createUrlSearchParams = function (params, arrayAsArray) {
        var _this = this;
        if (arrayAsArray === void 0) { arrayAsArray = false; }
        var searchParams = new http_1.URLSearchParams('', new terra_query_encoder_1.TerraQueryEncoder());
        if (!util_1.isNullOrUndefined(params)) {
            Object.keys(params).forEach(function (key) {
                if (!util_1.isNullOrUndefined(params[key]) && params[key] !== '') {
                    if (arrayAsArray && util_1.isArray(params[key])) {
                        searchParams.appendAll(_this.createArraySearchParams(key, params[key]));
                    }
                    else {
                        searchParams.set(key, params[key]);
                    }
                }
            });
        }
        return searchParams;
    };
    TerraBaseService.prototype.createArraySearchParams = function (key, params) {
        var arraySearchParams = new http_1.URLSearchParams();
        params.forEach(function (param) {
            arraySearchParams.append(key + '[]', param);
        });
        return arraySearchParams;
    };
    TerraBaseService.prototype.getMissingUserPermissionAlertMessage = function (error) {
        var missingRights = '';
        var langInLocalStorage = localStorage.getItem('plentymarkets_lang_');
        var isGerman = langInLocalStorage === 'de';
        if (isGerman) {
            missingRights = 'Fehlende Berechtigungen für: <br/> • ';
        }
        else {
            missingRights = 'Missing permissions for: <br/> • ';
        }
        var body = JSON.parse(error['_body']);
        if (!util_1.isNullOrUndefined(body)) {
            var errorFromBody = body['error'];
            if (!util_1.isNullOrUndefined(errorFromBody)) {
                var missingPermissions_1 = errorFromBody['missing_permissions'];
                var permissionTranslations_1 = [];
                Object.keys(missingPermissions_1).forEach(function (key) {
                    if (missingPermissions_1.hasOwnProperty(key)) {
                        permissionTranslations_1.push(missingPermissions_1[key]);
                    }
                });
                var english_1 = [];
                var german_1 = [];
                permissionTranslations_1.forEach(function (translations) {
                    Object.keys(translations).forEach(function (key) {
                        switch (key) {
                            case 'de':
                                german_1.push(translations[key]);
                                break;
                            case 'en':
                                english_1.push(translations[key]);
                                break;
                        }
                    });
                });
                var concatedPermissions = void 0;
                if (isGerman) {
                    concatedPermissions = german_1.reverse().join('<br/> • ');
                }
                else {
                    concatedPermissions = english_1.reverse().join('<br/> • ');
                }
                missingRights += concatedPermissions;
            }
        }
        return missingRights;
    };
    // TODO remove generic if the BaseService get a generic itself
    TerraBaseService.prototype.handleLocalDataModelGetList = function (getRequest$, params) {
        var _this = this;
        if (Object.keys(this.dataModel).length > 0 && this.hasAllParamsLoaded(params)) {
            return of_1.of(Object.values(this.dataModel));
        }
        this.setAuthorization();
        return this.mapRequest(getRequest$).pipe(operators_1.tap(function (dataList) {
            return dataList.forEach(function (data) {
                _this.dataModel[data.id] = Object.assign(data, _this.dataModel[data.id]);
            });
        }));
    };
    TerraBaseService.prototype.hasAllParamsLoaded = function (params) {
        if (!util_1.isNullOrUndefined(params) && !util_1.isNullOrUndefined(params['with'])) {
            return Object.values(this.dataModel).every(function (value) {
                return params['with'].every(function (param) { return value.hasOwnProperty(param); });
            });
        }
        else {
            return true;
        }
    };
    // TODO remove generic if the BaseService get a generic itself
    TerraBaseService.prototype.handleLocalDataModelGet = function (getRequest$, dataId) {
        var _this = this;
        if (!util_1.isNullOrUndefined(this.dataModel[dataId])) {
            return rxjs_1.Observable.of(this.dataModel[dataId]);
        }
        this.setAuthorization();
        return this.mapRequest(getRequest$).pipe(operators_1.tap(function (data) { return _this.dataModel[dataId] = data; }));
    };
    // TODO remove generic if the BaseService get a generic itself
    TerraBaseService.prototype.handleLocalDataModelPost = function (postRequest$, dataId) {
        var _this = this;
        this.setAuthorization();
        return this.mapRequest(postRequest$).pipe(operators_1.tap(function (data) {
            if (util_1.isNullOrUndefined(_this.dataModel[dataId])) {
                _this.dataModel[dataId] = [];
            }
            _this.dataModel[dataId].push(data);
        }));
    };
    // TODO remove generic if the BaseService get a generic itself
    TerraBaseService.prototype.handleLocalDataModelPut = function (putRequest$, dataId) {
        var _this = this;
        this.setAuthorization();
        return this.mapRequest(putRequest$).pipe(operators_1.tap(function (data) {
            var dataToUpdate;
            if (!util_1.isNullOrUndefined(_this.dataModel[dataId])) {
                dataToUpdate = _this.dataModel[dataId].find(function (dataItem) { return dataItem.id === data.id; });
            }
            if (!util_1.isNullOrUndefined(dataToUpdate)) {
                dataToUpdate = data;
            }
            else {
                if (util_1.isNullOrUndefined(_this.dataModel[dataId])) {
                    _this.dataModel[dataId] = [];
                }
                _this.dataModel[dataId].push(data);
            }
        }));
    };
    // TODO remove generic if the BaseService get a generic itself
    TerraBaseService.prototype.handleLocalDataModelDelete = function (deleteRequest$, dataId) {
        var _this = this;
        this.setAuthorization();
        return this.mapRequest(deleteRequest$).pipe(operators_1.tap(function () {
            Object.keys(_this.dataModel).forEach(function (comparisonId) {
                var dataIndex = _this.dataModel[comparisonId].findIndex(function (data) { return data.id === dataId; });
                if (dataIndex >= 0) {
                    _this.dataModel[comparisonId].splice(dataIndex, 1);
                }
            });
        }));
    };
    TerraBaseService = __decorate([
        core_1.Injectable()
        // Please keep the todo comments until TerraBaseService refactoring
        // TODO TerraBaseService<D> or maybe TerraBaseService<D extends BaseData>
        ,
        __metadata("design:paramtypes", [terra_loading_spinner_service_1.TerraLoadingSpinnerService,
            http_1.Http, String, Boolean])
    ], TerraBaseService);
    return TerraBaseService;
}());
exports.TerraBaseService = TerraBaseService;

//# sourceMappingURL=terra-base.service.js.map
