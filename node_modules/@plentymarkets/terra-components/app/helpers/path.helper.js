"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var PathHelper = /** @class */ (function () {
    function PathHelper() {
    }
    PathHelper.getPaths = function (path) {
        var paths = path.split(this.DELIMITER);
        while (paths.length > 0 && paths[0].length <= 0) {
            paths.shift();
        }
        var lastIdx = paths.length - 1;
        while (lastIdx > 0 && paths[lastIdx].length <= 0) {
            paths.pop();
            lastIdx--;
        }
        return paths;
    };
    PathHelper.isAbsolute = function (path) {
        return path.charAt(0) === this.DELIMITER;
    };
    PathHelper.isDirectory = function (path) {
        return path.charAt(path.length - 1) === this.DELIMITER;
    };
    PathHelper.isFile = function (path) {
        return path.charAt(path.length - 1) !== this.DELIMITER;
    };
    PathHelper.basename = function (path) {
        var paths = this.getPaths(path);
        var i = paths.length - 1;
        return paths[i];
    };
    PathHelper.dirname = function (path) {
        var prefix = this.isAbsolute(path) ? '/' : '';
        var paths = this.getPaths(path);
        paths.pop();
        return prefix + paths.join(this.DELIMITER);
    };
    PathHelper.extName = function (path) {
        if (this.isDirectory(path)) {
            return '';
        }
        var filename = this.basename(path);
        if (util_1.isNullOrUndefined(filename)) {
            filename = '';
        }
        var splittedFilename = filename.split('.');
        return splittedFilename.pop();
    };
    PathHelper.join = function () {
        var _this = this;
        var paths = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            paths[_i] = arguments[_i];
        }
        return paths.map(function (path) {
            if (path.charAt(0) === _this.DELIMITER) {
                path = path.substr(1);
            }
            if (path.charAt(path.length - 1) === _this.DELIMITER) {
                path = path.substr(0, path.length - 1);
            }
            return path;
        }).join(this.DELIMITER);
    };
    PathHelper.sizeString = function (size) {
        var units = ['B',
            'kB',
            'MB',
            'GB',
            'TB'];
        var unitIdx = 0;
        while (size > 1000) {
            size = size / 1000;
            unitIdx++;
        }
        while (unitIdx >= units.length) {
            unitIdx--;
            size = size * 1000;
        }
        return size.toFixed(2) + units[unitIdx];
    };
    PathHelper.DELIMITER = '/';
    return PathHelper;
}());
exports.PathHelper = PathHelper;

//# sourceMappingURL=path.helper.js.map
