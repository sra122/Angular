{"version":3,"sources":["app/helpers/terra-converter.helper.ts"],"names":[],"mappings":";;AAAA,6CAA8D;AAG9D;IAAA;IA0CA,CAAC;IAxCG;;;;;OAKG;IACW,yCAAoB,GAAlC,UAAmC,QAAe,EAAE,aAAoB;QAEpE,IAAI,oBAAoB,GAAU,UAAU,CAAC;QAC7C,IAAI,oBAAoB,GAAU,OAAO,CAAC;QAC1C,IAAI,oBAAoB,GAAU,IAAI,CAAC;QAEvC,IAAG,QAAQ,IAAI,oBAAoB,EACnC;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,GAAG,oBAAoB,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC;SAC7F;aACI,IAAG,QAAQ,IAAI,oBAAoB,EACxC;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,GAAG,oBAAoB,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC;SAC7F;aACI,IAAG,QAAQ,IAAI,oBAAoB,EACxC;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,GAAG,oBAAoB,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC;SAC7F;aAED;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,aAAa,CAAC,GAAG,IAAI,CAAC;SACrE;IACL,CAAC;IAED;;;;OAIG;IACW,0CAAqB,GAAnC,UAAoC,KAAY,EAAE,aAAoB;QAElE,IAAI,IAAI,GAAmB,IAAI,8BAAe,EAAE,CAAC;QACjD,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC,CAAC,+BAA+B;IACzF,CAAC;IACL,2BAAC;AAAD,CA1CA,AA0CC,IAAA;AA1CY,oDAAoB","file":"terra-converter.helper.js","sourcesContent":["import { L10nDecimalPipe, LocaleService } from 'angular-l10n';\nimport { Injectable } from '@angular/core';\n\nexport class TerraConverterHelper\n{\n    /**\n     * Automatically change the byte size to the corresponding range with the appropriate unit\n     * @param {number} byteSize\n     * @param {string} defaultLocale\n     * @returns {string}\n     */\n    public static convertAndFormatSize(byteSize:number, defaultLocale:string):string\n    {\n        let GB_CONVERSION_FACTOR:number = 1073741824;\n        let MB_CONVERSION_FACTOR:number = 1048576;\n        let KB_CONVERSION_FACTOR:number = 1024;\n\n        if(byteSize >= GB_CONVERSION_FACTOR)\n        {\n            return this.getLocaleDecimalValue(byteSize / GB_CONVERSION_FACTOR, defaultLocale) + ' GB';\n        }\n        else if(byteSize >= MB_CONVERSION_FACTOR)\n        {\n            return this.getLocaleDecimalValue(byteSize / MB_CONVERSION_FACTOR, defaultLocale) + ' MB';\n        }\n        else if(byteSize >= KB_CONVERSION_FACTOR)\n        {\n            return this.getLocaleDecimalValue(byteSize / KB_CONVERSION_FACTOR, defaultLocale) + ' KB';\n        }\n        else\n        {\n            return this.getLocaleDecimalValue(byteSize, defaultLocale) + ' B';\n        }\n    }\n\n    /**\n     * @param {number} value\n     * @param {string} defaultLocale\n     * @returns {string}\n     */\n    public static getLocaleDecimalValue(value:number, defaultLocale:string):string\n    {\n        let pipe:L10nDecimalPipe = new L10nDecimalPipe();\n        return pipe.transform(value, defaultLocale, '1.0-2'); // max 2 digits after the comma\n    }\n}\n"]}