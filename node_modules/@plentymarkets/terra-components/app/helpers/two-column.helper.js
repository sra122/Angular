"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var TwoColumnHelper = /** @class */ (function () {
    function TwoColumnHelper() {
    }
    TwoColumnHelper.leftRightColXS = function () {
        return this.colXS + this.spacer;
    };
    TwoColumnHelper.leftColMD = function (leftColumnWidth) {
        return this.colMD + this.calculatedLeftColumnMDWidth(leftColumnWidth) + this.spacer;
    };
    TwoColumnHelper.leftColLG = function (leftColumnWidth) {
        return this.colLG + leftColumnWidth;
    };
    TwoColumnHelper.rightColMD = function (leftColumnWidth) {
        return this.colMD + this.calculatedRightColumnMDWidth(leftColumnWidth) + this.spacer;
    };
    TwoColumnHelper.rightColLG = function (leftColumnWidth) {
        return this.colLG + this.calculatedRightColumnLGWidth(leftColumnWidth);
    };
    TwoColumnHelper.leftRightHiddenXS = function () {
        return this.hiddenXS + this.spacer;
    };
    TwoColumnHelper.calculatedLeftColumnMDWidth = function (leftColumnWidth) {
        return (leftColumnWidth === this.maxColumnWidth) ? leftColumnWidth : leftColumnWidth + 1;
    };
    TwoColumnHelper.calculatedRightColumnMDWidth = function (leftColumnWidth) {
        return this.maxColumnWidth - this.calculatedLeftColumnMDWidth(leftColumnWidth);
    };
    TwoColumnHelper.calculatedRightColumnLGWidth = function (leftColumnWidth) {
        return this.maxColumnWidth - leftColumnWidth;
    };
    TwoColumnHelper.colXS = 'col-xs-12';
    TwoColumnHelper.colMD = 'col-md-';
    TwoColumnHelper.colLG = 'col-lg-';
    TwoColumnHelper.spacer = ' ';
    TwoColumnHelper.hiddenXS = 'hidden-xs';
    TwoColumnHelper.maxColumnWidth = 12;
    return TwoColumnHelper;
}());
exports.TwoColumnHelper = TwoColumnHelper;

//# sourceMappingURL=two-column.helper.js.map
