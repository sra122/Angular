{"version":3,"sources":["app/helpers/fileType.helper.ts"],"names":[],"mappings":";;AAAA,6CAA2C;AAE3C;IAAA;IA6DA,CAAC;IA3DiB,yBAAU,GAAxB,UAAyB,IAAW;QAEhC,IAAG,wBAAU,CAAC,WAAW,CAAC,IAAI,CAAC,EAC/B;YACI,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,SAAS,GAAU,wBAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAEhD,OAAO;YACI,KAAK;YACL,MAAM;YACN,KAAK;YACL,KAAK;YACL,KAAK;SACR,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAEa,2BAAY,GAA1B,UAA2B,IAAW;QAElC,IAAI,SAAS,GAAU,wBAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChD,IAAI,OAAO,GAA2B;YAClC,GAAG,EAAG,yBAAyB;YAC/B,IAAI,EAAE,yBAAyB;YAC/B,IAAI,EAAE,yBAAyB;YAC/B,GAAG,EAAG,yBAAyB;YAC/B,GAAG,EAAG,yBAAyB;YAC/B,IAAI,EAAE,0BAA0B;YAChC,GAAG,EAAG,yBAAyB;YAC/B,EAAE,EAAI,0BAA0B;YAChC,IAAI,EAAE,0BAA0B;YAChC,EAAE,EAAI,wBAAwB;YAC9B,IAAI,EAAE,0BAA0B;YAChC,GAAG,EAAG,yBAAyB;YAC/B,IAAI,EAAE,0BAA0B;YAChC,GAAG,EAAG,yBAAyB;YAC/B,EAAE,EAAI,wBAAwB;YAC9B,IAAI,EAAE,0BAA0B;YAChC,EAAE,EAAI,wBAAwB;YAC9B,GAAG,EAAG,gCAAgC;YACtC,GAAG,EAAG,yBAAyB;YAC/B,GAAG,EAAG,yBAAyB;YAC/B,GAAG,EAAG,yBAAyB;YAC/B,GAAG,EAAG,yBAAyB;YAC/B,GAAG,EAAG,yBAAyB;YAC/B,GAAG,EAAG,0BAA0B;YAChC,IAAI,EAAE,0BAA0B;YAChC,IAAI,EAAE,0BAA0B;YAChC,GAAG,EAAG,yBAAyB;YAC/B,GAAG,EAAG,yBAAyB;YAC/B,IAAI,EAAE,0BAA0B;YAChC,GAAG,EAAG,yBAAyB;YAC/B,GAAG,EAAG,yBAAyB;YAC/B,GAAG,EAAG,yBAAyB;YAC/B,IAAI,EAAE,yBAAyB;SAClC,CAAC;QAEF,OAAO,OAAO,CAAC,SAAS,CAAC,IAAI,2BAA2B,CAAC;IAC7D,CAAC;IACL,qBAAC;AAAD,CA7DA,AA6DC,IAAA;AA7DY,wCAAc","file":"fileType.helper.js","sourcesContent":["import { PathHelper } from './path.helper';\n\nexport class FileTypeHelper\n{\n    public static isWebImage(file:string):boolean\n    {\n        if(PathHelper.isDirectory(file))\n        {\n            return false;\n        }\n\n        let extension:string = PathHelper.extName(file);\n\n        return [\n                   'jpg',\n                   'jpeg',\n                   'png',\n                   'gif',\n                   'svg'\n               ].indexOf(extension) >= 0;\n    }\n\n    public static mapIconClass(file:string):string\n    {\n        let extension:string = PathHelper.extName(file);\n        let iconMap:{ [ext:string]:string } = {\n            css:  'icon-file_extension_css',\n            scss: 'icon-file_extension_css',\n            less: 'icon-file_extension_css',\n            csv:  'icon-file_extension_csv',\n            doc:  'icon-file_extension_doc',\n            docx: 'icon-file_extension_docx',\n            gif:  'icon-file_extension_gif',\n            gz:   'icon-file_extension_gzip',\n            gzip: 'icon-file_extension_gzip',\n            hh:   'icon-file_extension_hh',\n            html: 'icon-file_extension_html',\n            ico:  'icon-file_extension_ico',\n            jpeg: 'icon-file_extension_jpeg',\n            jpg:  'icon-file_extension_jpg',\n            js:   'icon-file_extension_js',\n            json: 'icon-file_extension_json',\n            md:   'icon-file_extension_md',\n            odt:  'icon-file_extension_openoffice',\n            pdf:  'icon-file_extension_pdf',\n            png:  'icon-file_extension_png',\n            rtf:  'icon-file_extension_rtf',\n            swf:  'icon-file_extension_swf',\n            tar:  'icon-file_extension_tar',\n            tif:  'icon-file_extension_tiff',\n            tiff: 'icon-file_extension_tiff',\n            twig: 'icon-file_extension_twig',\n            txt:  'icon-file_extension_txt',\n            xls:  'icon-file_extension_xls',\n            xlsx: 'icon-file_extension_xlsx',\n            xml:  'icon-file_extension_xml',\n            zip:  'icon-file_extension_zip',\n            rar:  'icon-file_extension_zip',\n            '7z': 'icon-file_extension_zip',\n        };\n\n        return iconMap[extension] || 'icon-file_extension_blank';\n    }\n}\n"]}