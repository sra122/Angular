{"version":3,"sources":["app/helpers/path.helper.ts"],"names":[],"mappings":"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","file":"path.helper.js","sourcesContent":["import { isNullOrUndefined } from 'util';\n\nexport class PathHelper\n{\n    public static readonly DELIMITER:string = '/';\n\n    private static getPaths(path:string):Array<string>\n    {\n        let paths:Array<string> = path.split(this.DELIMITER);\n        while(paths.length > 0 && paths[0].length <= 0)\n        {\n            paths.shift();\n        }\n\n        let lastIdx:number = paths.length - 1;\n        while(lastIdx > 0 && paths[lastIdx].length <= 0)\n        {\n            paths.pop();\n            lastIdx--;\n        }\n\n        return paths;\n    }\n\n    public static isAbsolute(path:string):boolean\n    {\n        return path.charAt(0) === this.DELIMITER;\n    }\n\n    public static isDirectory(path:string):boolean\n    {\n        return path.charAt(path.length - 1) === this.DELIMITER;\n    }\n\n    public static isFile(path:string):boolean\n    {\n        return path.charAt(path.length - 1) !== this.DELIMITER;\n    }\n\n    public static basename(path:string):string\n    {\n        let paths:Array<string> = this.getPaths(path);\n        let i:number = paths.length - 1;\n        return paths[i];\n    }\n\n    public static dirname(path:string):string\n    {\n        let prefix:string = this.isAbsolute(path) ? '/' : '';\n        let paths:Array<string> = this.getPaths(path);\n        paths.pop();\n\n        return prefix + paths.join(this.DELIMITER);\n    }\n\n    public static extName(path:string):string\n    {\n        if(this.isDirectory(path))\n        {\n            return '';\n        }\n\n        let filename:string = this.basename(path);\n        if(isNullOrUndefined(filename))\n        {\n            filename = '';\n        }\n        let splittedFilename:Array<string> = filename.split('.');\n        return splittedFilename.pop();\n    }\n\n    public static join(...paths:Array<string>):string\n    {\n        return paths.map((path:string) =>\n        {\n            if(path.charAt(0) === this.DELIMITER)\n            {\n                path = path.substr(1);\n            }\n            if(path.charAt(path.length - 1) === this.DELIMITER)\n            {\n                path = path.substr(0, path.length - 1);\n            }\n\n            return path;\n        }).join(this.DELIMITER);\n    }\n\n    public static sizeString(size:number):string\n    {\n        let units:Array<string> = ['B',\n                              'kB',\n                              'MB',\n                              'GB',\n                              'TB'];\n        let unitIdx:number = 0;\n        while(size > 1000)\n        {\n            size = size / 1000;\n            unitIdx++;\n        }\n\n        while(unitIdx >= units.length)\n        {\n            unitIdx--;\n            size = size * 1000;\n        }\n\n        return size.toFixed(2) + units[unitIdx];\n    }\n}\n"]}