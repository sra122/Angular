{"version":3,"sources":["app/components/tree/node-tree/terra-node-tree.component.ts"],"names":[],"mappings":"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","file":"terra-node-tree.component.js","sourcesContent":["import {\n    Component,\n    Input,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\nimport { TerraNodeTreeConfig } from './data/terra-node-tree.config';\nimport { isNullOrUndefined } from 'util';\nimport { TerraNodeInterface } from './data/terra-node.interface';\nimport { TranslationService } from 'angular-l10n';\nimport { FormControl } from '@angular/forms';\nimport {\n    debounceTime,\n    distinctUntilChanged\n} from 'rxjs/operators';\nimport { StringHelper } from '../../../helpers/string.helper';\n\n@Component({\n    selector: 'terra-node-tree',\n    styles:   [require('./terra-node-tree.component.scss')],\n    template: require('./terra-node-tree.component.html')\n})\nexport class TerraNodeTreeComponent<D> implements OnDestroy, OnInit\n{\n    /**\n     * @description The config to handle actions on tree or node.\n     */\n    @Input()\n    public inputConfig:TerraNodeTreeConfig<D>;\n\n    /**\n     * @description Shows the search box above the tree.\n     */\n    @Input()\n    public inputShowSearch:boolean;\n\n    /**\n     * @description Disables or enables the System Tree\n     */\n    @Input()\n    public isTreeDisabled:boolean;\n\n    protected formControl:FormControl = new FormControl();\n\n    constructor(private translation:TranslationService)\n    {\n    }\n\n    public ngOnInit():void\n    {\n        this.inputConfig.checkVisibilityAndAssignDefault(this.inputConfig.list);\n        this.formControl.valueChanges.pipe(\n            debounceTime(400),\n            distinctUntilChanged()\n        ).subscribe((searchValue:string) =>\n        {\n            if(StringHelper.isNullUndefinedOrEmpty(searchValue))\n            {\n                this.inputConfig.checkDefaultAndAssignVisibility(this.inputConfig.list);\n                this.inputConfig.toggleOpenChildren(this.inputConfig.list, false);\n\n                if(!isNullOrUndefined(this.inputConfig.currentSelectedNode))\n                {\n                    this.inputConfig.toggleOpenParent(this.inputConfig.currentSelectedNode, true);\n                }\n            }\n            else\n            {\n                this.doSearch(searchValue);\n            }\n        });\n    }\n\n    public ngOnDestroy():void\n    {\n        this.inputConfig.reset();\n    }\n\n    private doSearch(searchValue:string):void\n    {\n        this.inputConfig.list.forEach((node:TerraNodeInterface<D>) =>\n        {\n            this.search(node, false, searchValue);\n        });\n    }\n\n    private search(node:TerraNodeInterface<D>, isParentVisible:boolean, searchValue:string):boolean\n    {\n        // ignore non visible nodes\n        if(!node.defaultVisibility)\n        {\n            return;\n        }\n\n        let isVisible:boolean = isParentVisible || this.checkVisibility(node, searchValue);\n        let isEmptySearchString:boolean = isNullOrUndefined(searchValue) || searchValue.length === 0;\n\n        let hasVisibleChild:boolean = false;\n        let hasChildren:boolean = false;\n\n        if(!isNullOrUndefined(node.children))\n        {\n            node.children.forEach((childNode:TerraNodeInterface<D>) =>\n            {\n                hasChildren = true;\n                hasVisibleChild = this.search(childNode, isVisible, searchValue) || hasVisibleChild;\n            });\n        }\n\n        if(hasChildren)\n        {\n            if(!node.isOpen && !isEmptySearchString)\n            {\n                node.isOpen = true;\n                this.inputConfig.toggleOpenChildren(node.children, true);\n            }\n            else if(isEmptySearchString)\n            {\n                node.isOpen = false;\n            }\n        }\n\n        node.isVisible = isVisible || hasVisibleChild;\n\n        return isVisible || hasVisibleChild;\n    }\n\n    private checkVisibility(node:TerraNodeInterface<D>, searchValue:string):boolean\n    {\n        let hasValidCaptionOrTag:boolean = false;\n\n        let tags:Array<string> = node.tags;\n\n        // search for tags first\n        if(!isNullOrUndefined(tags))\n        {\n            tags.forEach((tag:string) =>\n            {\n                if(tag.toUpperCase().includes(searchValue.toUpperCase()))\n                {\n                    hasValidCaptionOrTag = true;\n                    return;\n                }\n            });\n        }\n\n        // search node names if no tags found\n        if(!hasValidCaptionOrTag)\n        {\n            let name:string = this.translation.translate(node.name);\n\n            let suggestion:string = name.toUpperCase();\n\n            // check if search string is included in the given suggestion\n            if(suggestion.includes(searchValue.toUpperCase()))\n            {\n                hasValidCaptionOrTag = true;\n            }\n        }\n\n        return hasValidCaptionOrTag;\n    }\n}\n"]}