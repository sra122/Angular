"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_node_tree_config_1 = require("./data/terra-node-tree.config");
var util_1 = require("util");
var angular_l10n_1 = require("angular-l10n");
var forms_1 = require("@angular/forms");
var operators_1 = require("rxjs/operators");
var string_helper_1 = require("../../../helpers/string.helper");
var TerraNodeTreeComponent = /** @class */ (function () {
    function TerraNodeTreeComponent(translation) {
        this.translation = translation;
        this.formControl = new forms_1.FormControl();
    }
    TerraNodeTreeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.inputConfig.checkVisibilityAndAssignDefault(this.inputConfig.list);
        this.formControl.valueChanges.pipe(operators_1.debounceTime(400), operators_1.distinctUntilChanged()).subscribe(function (searchValue) {
            if (string_helper_1.StringHelper.isNullUndefinedOrEmpty(searchValue)) {
                _this.inputConfig.checkDefaultAndAssignVisibility(_this.inputConfig.list);
                _this.inputConfig.toggleOpenChildren(_this.inputConfig.list, false);
                if (!util_1.isNullOrUndefined(_this.inputConfig.currentSelectedNode)) {
                    _this.inputConfig.toggleOpenParent(_this.inputConfig.currentSelectedNode, true);
                }
            }
            else {
                _this.doSearch(searchValue);
            }
        });
    };
    TerraNodeTreeComponent.prototype.ngOnDestroy = function () {
        this.inputConfig.reset();
    };
    TerraNodeTreeComponent.prototype.doSearch = function (searchValue) {
        var _this = this;
        this.inputConfig.list.forEach(function (node) {
            _this.search(node, false, searchValue);
        });
    };
    TerraNodeTreeComponent.prototype.search = function (node, isParentVisible, searchValue) {
        var _this = this;
        // ignore non visible nodes
        if (!node.defaultVisibility) {
            return;
        }
        var isVisible = isParentVisible || this.checkVisibility(node, searchValue);
        var isEmptySearchString = util_1.isNullOrUndefined(searchValue) || searchValue.length === 0;
        var hasVisibleChild = false;
        var hasChildren = false;
        if (!util_1.isNullOrUndefined(node.children)) {
            node.children.forEach(function (childNode) {
                hasChildren = true;
                hasVisibleChild = _this.search(childNode, isVisible, searchValue) || hasVisibleChild;
            });
        }
        if (hasChildren) {
            if (!node.isOpen && !isEmptySearchString) {
                node.isOpen = true;
                this.inputConfig.toggleOpenChildren(node.children, true);
            }
            else if (isEmptySearchString) {
                node.isOpen = false;
            }
        }
        node.isVisible = isVisible || hasVisibleChild;
        return isVisible || hasVisibleChild;
    };
    TerraNodeTreeComponent.prototype.checkVisibility = function (node, searchValue) {
        var hasValidCaptionOrTag = false;
        var tags = node.tags;
        // search for tags first
        if (!util_1.isNullOrUndefined(tags)) {
            tags.forEach(function (tag) {
                if (tag.toUpperCase().includes(searchValue.toUpperCase())) {
                    hasValidCaptionOrTag = true;
                    return;
                }
            });
        }
        // search node names if no tags found
        if (!hasValidCaptionOrTag) {
            var name_1 = this.translation.translate(node.name);
            var suggestion = name_1.toUpperCase();
            // check if search string is included in the given suggestion
            if (suggestion.includes(searchValue.toUpperCase())) {
                hasValidCaptionOrTag = true;
            }
        }
        return hasValidCaptionOrTag;
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", terra_node_tree_config_1.TerraNodeTreeConfig)
    ], TerraNodeTreeComponent.prototype, "inputConfig", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraNodeTreeComponent.prototype, "inputShowSearch", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraNodeTreeComponent.prototype, "isTreeDisabled", void 0);
    TerraNodeTreeComponent = __decorate([
        core_1.Component({
            selector: 'terra-node-tree',
            styles: [require('./terra-node-tree.component.scss')],
            template: require('./terra-node-tree.component.html')
        }),
        __metadata("design:paramtypes", [angular_l10n_1.TranslationService])
    ], TerraNodeTreeComponent);
    return TerraNodeTreeComponent;
}());
exports.TerraNodeTreeComponent = TerraNodeTreeComponent;

//# sourceMappingURL=terra-node-tree.component.js.map
