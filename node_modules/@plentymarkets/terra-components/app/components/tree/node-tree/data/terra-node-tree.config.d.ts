import { TerraNodeInterface } from './terra-node.interface';
import { TranslationService } from 'angular-l10n';
export declare class TerraNodeTreeConfig<D> {
    protected translation: TranslationService;
    protected _currentSelectedNode: TerraNodeInterface<D>;
    private _list;
    constructor(translation: TranslationService);
    /**
     * @description Adds a node.
     * @param nodeToAdd The provided node to add to the tree.
     * @param parent Optional. The provided parent where nodeToAdd should be added to.
     * @param openParents Optional. Open all parents.
     */
    addNode(nodeToAdd: TerraNodeInterface<D>, parent?: TerraNodeInterface<D>, openParents?: boolean): void;
    private setDefaultVisibility(node);
    private getRecursiveNodePath(node, name);
    /**
     * @description Adds a node to a given parentId.
     * @param parentId The identifier of the parent node.
     * @param node The node to be added.
     * @param openParents Optional. Open all parents.
     */
    addChildToNodeById(parentId: string | number, node: TerraNodeInterface<D>, openParents?: boolean): void;
    /**
     * @description Adds a list of nodes to a given parentId.
     * @param parentId The identifier of the parent node.
     * @param nodeList The node list to be added.
     * @param openParents Optional. Open all parents.
     */
    addChildrenToNodeById(parentId: string | number, nodeList: Array<TerraNodeInterface<D>>, openParents?: boolean): void;
    /**
     * @description Removes a given node.
     * @param node The node to be removed.
     */
    removeNode(node: TerraNodeInterface<D>): void;
    private internalRemoveNode(node);
    /**
     * @description Removes a node by ID.
     * @param id The ID of the node to be removed.
     */
    removeNodeById(id: string | number): void;
    /**
     * @description Updates a node by given ID.
     * @param id The ID of the node.
     * @param newNode The node with the new data.
     */
    updateNodeById(id: string | number, newNode: TerraNodeInterface<D>): void;
    /**
     * @description Find an existing node by ID.
     * @param id The ID to find the correct node.
     */
    findNodeById(id: string | number): TerraNodeInterface<D>;
    /**
     * @description Find an existing node.
     * @param node The node to be found.
     */
    findNode(node: TerraNodeInterface<D>): TerraNodeInterface<D>;
    private recursiveFindNode(nodeList, nodeToFind);
    private recursiveFindNodeById(nodeList, id);
    /**
     * @description The list with all the nodes.
     */
    /**
     * @description Set a list with all the nodes.
     * @param value The node list to be shown.
     */
    list: Array<TerraNodeInterface<D>>;
    private recursiveSetParentAndDefaultVisibility(list, parent?);
    /**
     * @description Open all parents of given node.
     * @param node The node to open its parents.
     * @param isOpen Toggle open or not.
     */
    toggleOpenParent(node: TerraNodeInterface<D>, isOpen: boolean): void;
    /**
     * @description Close all nodes.
     */
    closeAllNodes(): void;
    /**
     * @description Open all children of given node.
     * @param nodeList The node list to open its children.
     * @param isOpen Toggle open or not.
     */
    toggleOpenChildren(nodeList: Array<TerraNodeInterface<D>>, isOpen: boolean): void;
    /**
     * @description Call the lazy loading function of given node.
     * @param node The node where lazy loading is defined.
     */
    handleLazyLoading(node: TerraNodeInterface<D>): void;
    /**
     * @description Get the selected node.
     */
    /**
     * @description Set a node as selected.
     * @param node The node to be set as selected.
     */
    currentSelectedNode: TerraNodeInterface<D>;
    /**
     * @description Reset the entire tree.
     */
    reset(): void;
    /**
     * @description Set a node as selected by given ID.
     * @param id The ID to select a node.
     */
    setCurrentSelectedNodeById(id: string | number): void;
    private recursiveSetNodeInactive(nodeList);
    /**
     * @description Toggle the visibility for all children.
     * @param nodeList The node list to toggle visibility of its children.
     * @param isVisible Toggle visibility.
     */
    toggleVisiblityForAllChildren(nodeList: Array<TerraNodeInterface<D>>, isVisible: boolean): void;
    /**
     * @description Toggle the visibility for all parents.
     * @param parentNode The node to toggle visibility of its parent.
     * @param isVisible Toggle visibility.
     */
    toggleVisibilityForAllParents(parentNode: TerraNodeInterface<D>, isVisible: boolean): void;
    checkVisibilityAndAssignDefault(nodeList: Array<TerraNodeInterface<D>>): void;
    checkDefaultAndAssignVisibility(nodeList: Array<TerraNodeInterface<D>>): void;
}
