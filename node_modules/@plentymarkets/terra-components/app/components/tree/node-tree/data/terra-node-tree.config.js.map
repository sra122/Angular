{"version":3,"sources":["app/components/tree/node-tree/data/terra-node-tree.config.ts"],"names":[],"mappings":"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","file":"terra-node-tree.config.js","sourcesContent":["import { TerraNodeInterface } from './terra-node.interface';\nimport {\n    isNull,\n    isNullOrUndefined\n} from 'util';\nimport { TranslationService } from 'angular-l10n';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class TerraNodeTreeConfig<D>\n{\n    protected _currentSelectedNode:TerraNodeInterface<D>;\n    private _list:Array<TerraNodeInterface<D>> = [];\n\n    constructor(protected translation:TranslationService)\n    {\n\n    }\n\n    /**\n     * @description Adds a node.\n     * @param nodeToAdd The provided node to add to the tree.\n     * @param parent Optional. The provided parent where nodeToAdd should be added to.\n     * @param openParents Optional. Open all parents.\n     */\n    public addNode(nodeToAdd:TerraNodeInterface<D>, parent?:TerraNodeInterface<D>, openParents?:boolean):void\n    {\n        // check if the node to add is already added\n\n        let alreadyAddedNode:TerraNodeInterface<D> = this.findNodeById(nodeToAdd.id);\n\n        if(isNullOrUndefined(alreadyAddedNode))\n        {\n            this.setDefaultVisibility(nodeToAdd);\n            // check children to set the parent correctly\n            if(!isNullOrUndefined(nodeToAdd.children))\n            {\n                this.recursiveSetParentAndDefaultVisibility(nodeToAdd.children, nodeToAdd);\n            }\n\n            // add to first level if no parent nor current selected node is given\n            if(isNullOrUndefined(this.currentSelectedNode) && isNullOrUndefined(parent))\n            {\n\n                this._list.push(nodeToAdd);\n            }\n            else\n            {\n\n                // set parent\n                nodeToAdd.parent = !isNullOrUndefined(parent) ? parent : this.currentSelectedNode;\n\n                // check children of parent to decide where to add the node\n                if(isNullOrUndefined(nodeToAdd.parent.children))\n                {\n                    nodeToAdd.parent.children = [nodeToAdd];\n                }\n                else\n                {\n                    nodeToAdd.parent.children.push(nodeToAdd);\n                }\n\n                if(!isNullOrUndefined(openParents) && openParents)\n                {\n                    this.toggleOpenParent(nodeToAdd, openParents);\n                }\n            }\n        }\n        else\n        {\n            console.error('Node ' + nodeToAdd.name + ' with id ' + nodeToAdd.id + ' already added!');\n        }\n    }\n\n    private setDefaultVisibility(node:TerraNodeInterface<D>):void\n    {\n        if(node.isVisible)\n        {\n            node.defaultVisibility = true;\n        }\n        else\n        {\n            node.defaultVisibility = false;\n        }\n    }\n\n    private getRecursiveNodePath(node:TerraNodeInterface<D>, name:string):string\n    {\n        if(!isNullOrUndefined(node))\n        {\n            if(isNullOrUndefined(name))\n            {\n                name = this.translation.translate(node.name);\n            }\n            else\n            {\n                name = this.translation.translate(node.name) + ' » ' + name;\n            }\n\n            if(!isNullOrUndefined(node.parent))\n            {\n                return this.getRecursiveNodePath(node.parent, name);\n            }\n            else\n            {\n                return name;\n            }\n        }\n\n        return name;\n    }\n\n    /**\n     * @description Adds a node to a given parentId.\n     * @param parentId The identifier of the parent node.\n     * @param node The node to be added.\n     * @param openParents Optional. Open all parents.\n     */\n    public addChildToNodeById(parentId:string | number, node:TerraNodeInterface<D>, openParents?:boolean):void\n    {\n        let foundNode:TerraNodeInterface<D> = this.recursiveFindNodeById(this.list, parentId);\n\n        if(isNullOrUndefined(foundNode))\n        {\n            console.error('Node with id ' + parentId + ' not found!');\n        }\n        else\n        {\n            this.addNode(node, foundNode, openParents);\n        }\n    }\n\n    /**\n     * @description Adds a list of nodes to a given parentId.\n     * @param parentId The identifier of the parent node.\n     * @param nodeList The node list to be added.\n     * @param openParents Optional. Open all parents.\n     */\n    public addChildrenToNodeById(parentId:string | number, nodeList:Array<TerraNodeInterface<D>>, openParents?:boolean):void\n    {\n        let foundNode:TerraNodeInterface<D> = this.recursiveFindNodeById(this.list, parentId);\n\n        if(isNullOrUndefined(foundNode))\n        {\n            console.error('Node with id ' + parentId + ' not found!');\n        }\n        else\n        {\n            nodeList.forEach((node:TerraNodeInterface<D>) =>\n            {\n                this.addNode(node, foundNode, openParents);\n            });\n        }\n    }\n\n    /**\n     * @description Removes a given node.\n     * @param node The node to be removed.\n     */\n    public removeNode(node:TerraNodeInterface<D>):void\n    {\n        let foundNode:TerraNodeInterface<D> = this.recursiveFindNode(this.list, node);\n\n        if(isNullOrUndefined(foundNode))\n        {\n            console.error('Node ' + node.name + ' with id ' + node.id + ' not found!');\n        }\n        else\n        {\n            this.internalRemoveNode(node);\n        }\n    }\n\n    // removes a given node\n    private internalRemoveNode(node:TerraNodeInterface<D>):void\n    {\n        let parent:TerraNodeInterface<D> = node.parent;\n\n        if(!isNullOrUndefined(parent))\n        {\n            let index:number = parent.children.indexOf(node);\n\n            parent.children.splice(index, 1);\n        }\n\n        if(node === this.currentSelectedNode)\n        {\n            this._currentSelectedNode = null;\n        }\n    }\n\n    /**\n     * @description Removes a node by ID.\n     * @param id The ID of the node to be removed.\n     */\n    public removeNodeById(id:string | number):void\n    {\n        let foundNode:TerraNodeInterface<D> = this.recursiveFindNodeById(this.list, id);\n\n        if(isNullOrUndefined(foundNode))\n        {\n            console.error('Node with id ' + id + ' not found!');\n        }\n        else\n        {\n            this.internalRemoveNode(foundNode);\n        }\n    }\n\n    /**\n     * @description Updates a node by given ID.\n     * @param id The ID of the node.\n     * @param newNode The node with the new data.\n     */\n    public updateNodeById(id:string | number, newNode:TerraNodeInterface<D>):void\n    {\n        if(newNode.id.toString() !== id.toString())\n        {\n            console.warn('ID ' + id + ' is different from new node ID!');\n        }\n\n        // search for node\n        let foundNode:TerraNodeInterface<D> = this.recursiveFindNodeById(this.list, id);\n\n        if(isNullOrUndefined(foundNode))\n        {\n            console.error('Node with id ' + id + ' not found!');\n        }\n        else\n        {\n            // just copy stuff\n            foundNode.id = newNode.id;\n            foundNode.name = newNode.name;\n            foundNode.children = newNode.children;\n            foundNode.icon = newNode.icon;\n            foundNode.isActive = newNode.isActive;\n            foundNode.isOpen = newNode.isOpen;\n            foundNode.isVisible = newNode.isVisible;\n            foundNode.defaultVisibility = newNode.defaultVisibility;\n            foundNode.isLoading = newNode.isLoading;\n            foundNode.tags = newNode.tags;\n            foundNode.value = newNode.value;\n            foundNode.parent = newNode.parent;\n            foundNode.hasLoaded = newNode.hasLoaded;\n            foundNode.onClick = newNode.onClick;\n            foundNode.onLazyLoad = newNode.onLazyLoad;\n        }\n    }\n\n    /**\n     * @description Find an existing node by ID.\n     * @param id The ID to find the correct node.\n     */\n    public findNodeById(id:string | number):TerraNodeInterface<D>\n    {\n        return this.recursiveFindNodeById(this.list, id);\n    }\n\n    /**\n     * @description Find an existing node.\n     * @param node The node to be found.\n     */\n    public findNode(node:TerraNodeInterface<D>):TerraNodeInterface<D>\n    {\n        return this.recursiveFindNode(this.list, node);\n    }\n\n    // find node\n    private recursiveFindNode(nodeList:Array<TerraNodeInterface<D>>, nodeToFind:TerraNodeInterface<D>):TerraNodeInterface<D>\n    {\n        let foundNode:TerraNodeInterface<D> = null;\n\n        for(let node of nodeList)\n        {\n            if(node === nodeToFind)\n            {\n                foundNode = node;\n\n                return foundNode;\n            }\n            else if(node.children)\n            {\n                foundNode = this.recursiveFindNode(node.children, nodeToFind);\n\n                if(!isNull(foundNode))\n                {\n                    break;\n                }\n            }\n        }\n\n        return foundNode;\n    }\n\n    // find node by id\n    private recursiveFindNodeById(nodeList:Array<TerraNodeInterface<D>>, id:string | number):TerraNodeInterface<D>\n    {\n        let foundNode:TerraNodeInterface<D> = null;\n\n        for(let node of nodeList)\n        {\n            if(node.id.toString() === id.toString())\n            {\n                foundNode = node;\n\n                return foundNode;\n            }\n            else if(node.children)\n            {\n                foundNode = this.recursiveFindNodeById(node.children, id);\n\n                if(!isNull(foundNode))\n                {\n                    break;\n                }\n            }\n        }\n\n        return foundNode;\n    }\n\n    /**\n     * @description The list with all the nodes.\n     */\n    public get list():Array<TerraNodeInterface<D>>\n    {\n        return this._list;\n    }\n\n    /**\n     * @description Set a list with all the nodes.\n     * @param value The node list to be shown.\n     */\n    public set list(value:Array<TerraNodeInterface<D>>)\n    {\n        this.recursiveSetParentAndDefaultVisibility(value);\n        this._list = value;\n    }\n\n    // set parents to all nodes\n    private recursiveSetParentAndDefaultVisibility(list:Array<TerraNodeInterface<D>>, parent?:TerraNodeInterface<D>):void\n    {\n        for(let node of list)\n        {\n            this.setDefaultVisibility(node);\n            if(!isNullOrUndefined(parent))\n            {\n                node.parent = parent;\n            }\n\n            if(!isNullOrUndefined(node.children))\n            {\n                this.recursiveSetParentAndDefaultVisibility(node.children, node);\n            }\n        }\n    }\n\n    /**\n     * @description Open all parents of given node.\n     * @param node The node to open its parents.\n     * @param isOpen Toggle open or not.\n     */\n    public toggleOpenParent(node:TerraNodeInterface<D>, isOpen:boolean):void\n    {\n        if(!isNullOrUndefined(node) && !isNullOrUndefined(node.parent))\n        {\n            node.parent.isOpen = isOpen;\n\n            this.toggleOpenParent(node.parent, isOpen);\n        }\n    }\n\n    /**\n     * @description Close all nodes.\n     */\n    public closeAllNodes():void\n    {\n        this.toggleOpenChildren(this.list, false);\n    }\n\n    /**\n     * @description Open all children of given node.\n     * @param nodeList The node list to open its children.\n     * @param isOpen Toggle open or not.\n     */\n    public toggleOpenChildren(nodeList:Array<TerraNodeInterface<D>>, isOpen:boolean):void\n    {\n        nodeList.forEach((node:TerraNodeInterface<D>) =>\n        {\n            node.isOpen = isOpen;\n\n            if(!isNullOrUndefined(node.children))\n            {\n                this.toggleOpenChildren(node.children, isOpen);\n            }\n        });\n    }\n\n    /**\n     * @description Call the lazy loading function of given node.\n     * @param node The node where lazy loading is defined.\n     */\n    public handleLazyLoading(node:TerraNodeInterface<D>):void\n    {\n        // check if lazy loading is desired\n        if(!node.hasLoaded && !isNullOrUndefined(node.onLazyLoad))\n        {\n            node.hasLoaded = true;\n            node.isLoading = true;\n            // subscribe to Observable\n            node.onLazyLoad().subscribe(() =>\n                {\n                    node.hasLoaded = true;\n                    node.isLoading = false;\n                    node.isOpen = true;\n                    this.checkVisibilityAndAssignDefault(node.children);\n                },\n                () =>\n                {\n                    node.hasLoaded = false;\n                    node.isLoading = false;\n                });\n        }\n        else\n        {\n            node.isOpen = !node.isOpen;\n        }\n    }\n\n    /**\n     * @description Set a node as selected.\n     * @param node The node to be set as selected.\n     */\n    public set currentSelectedNode(node:TerraNodeInterface<D>)\n    {\n        if(!isNullOrUndefined(node))\n        {\n            this.toggleOpenParent(node, true);\n            this.recursiveSetNodeInactive(this.list);\n            node.isActive = true;\n            this._currentSelectedNode = node;\n        }\n        else\n        {\n            this._currentSelectedNode = null;\n        }\n    }\n\n    /**\n     * @description Get the selected node.\n     */\n    public get currentSelectedNode():TerraNodeInterface<D>\n    {\n        return this._currentSelectedNode;\n    }\n\n    /**\n     * @description Reset the entire tree.\n     */\n    public reset():void\n    {\n        this._list = [];\n        this._currentSelectedNode = null;\n    }\n\n    /**\n     * @description Set a node as selected by given ID.\n     * @param id The ID to select a node.\n     */\n    public setCurrentSelectedNodeById(id:string | number):void\n    {\n        let foundNode:TerraNodeInterface<D> = this.recursiveFindNodeById(this.list, id);\n\n        if(isNullOrUndefined(foundNode))\n        {\n            console.error('Node with id ' + id + ' not found!');\n        }\n        else\n        {\n            this.currentSelectedNode = foundNode;\n        }\n    }\n\n    // set all nodes inactive\n    private recursiveSetNodeInactive(nodeList:Array<TerraNodeInterface<D>>):void\n    {\n        nodeList.forEach((node:TerraNodeInterface<D>) =>\n        {\n            node.isActive = false;\n\n            if(!isNullOrUndefined(node.children) && node.children.length > 0)\n            {\n                this.recursiveSetNodeInactive(node.children);\n            }\n        });\n    }\n\n    /**\n     * @description Toggle the visibility for all children.\n     * @param nodeList The node list to toggle visibility of its children.\n     * @param isVisible Toggle visibility.\n     */\n    public toggleVisiblityForAllChildren(nodeList:Array<TerraNodeInterface<D>>, isVisible:boolean):void\n    {\n        nodeList.forEach((node:TerraNodeInterface<D>) =>\n        {\n            node.isVisible = isVisible;\n\n            if(!isNullOrUndefined(node.children))\n            {\n                this.toggleVisiblityForAllChildren(node.children, isVisible);\n            }\n        });\n    }\n\n    /**\n     * @description Toggle the visibility for all parents.\n     * @param parentNode The node to toggle visibility of its parent.\n     * @param isVisible Toggle visibility.\n     */\n    public toggleVisibilityForAllParents(parentNode:TerraNodeInterface<D>, isVisible:boolean):void\n    {\n        parentNode.isVisible = isVisible;\n\n        if(!isNullOrUndefined(parentNode.parent))\n        {\n            this.toggleVisibilityForAllParents(parentNode.parent, isVisible);\n        }\n    }\n\n    public checkVisibilityAndAssignDefault(nodeList:Array<TerraNodeInterface<D>>):void\n    {\n        if(!isNullOrUndefined(nodeList))\n        {\n            nodeList.forEach((node:TerraNodeInterface<D>) =>\n            {\n\n                this.setDefaultVisibility(node);\n\n                if(!isNullOrUndefined(node.children))\n                {\n                    this.checkVisibilityAndAssignDefault(node.children);\n                }\n            });\n        }\n    }\n\n    public checkDefaultAndAssignVisibility(nodeList:Array<TerraNodeInterface<D>>):void\n    {\n        nodeList.forEach((node:TerraNodeInterface<D>) =>\n        {\n\n            if(node.defaultVisibility)\n            {\n                node.isVisible = true;\n            }\n            else\n            {\n                node.isVisible = false;\n            }\n\n            if(!isNullOrUndefined(node.children))\n            {\n                this.checkDefaultAndAssignVisibility(node.children);\n            }\n        });\n    }\n}\n"]}