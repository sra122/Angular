"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_base_tree_component_1 = require("../base/terra-base-tree.component");
var terra_checkbox_tree_leaf_state_1 = require("./data/terra-checkbox-tree-leaf-state");
var TerraCheckboxTreeComponent = /** @class */ (function (_super) {
    __extends(TerraCheckboxTreeComponent, _super);
    function TerraCheckboxTreeComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @description get the current selected leaf list
         */
        _this.valueChange = new core_1.EventEmitter();
        _this.selectedLeafList = [];
        return _this;
    }
    /**
     * @description event which is triggered when any checkbox is clicked
     * @param event
     * @param leaf
     */
    TerraCheckboxTreeComponent.prototype.onCheckboxValueChange = function (event, leaf) {
        leaf.checkboxChecked = event;
        this.resetIndeterminateLeafState(leaf);
        this.recursiveUpdateChildLeafs(leaf);
        this.recursiveUpdateParentLeafs(leaf);
        this.valueChange.emit(leaf);
    };
    TerraCheckboxTreeComponent.prototype.resetIndeterminateLeafState = function (leaf) {
        // reset the isIndeterminate flag on every state change
        leaf.isIndeterminate = false;
    };
    /**
     * @description
     * @param leaf
     */
    TerraCheckboxTreeComponent.prototype.recursiveAddLeafToList = function (leaf) {
        if (leaf.checkboxChecked) {
            this.selectedLeafList.push(leaf);
        }
        else {
            var leafIndex = this.selectedLeafList.indexOf(leaf);
            this.selectedLeafList.splice(leafIndex, 1);
        }
        if (leaf.subLeafList) {
            for (var _i = 0, _a = leaf.subLeafList; _i < _a.length; _i++) {
                var subLeaf = _a[_i];
                this.recursiveAddLeafToList(subLeaf);
            }
        }
    };
    /**
     * @description
     * @param leaf
     */
    TerraCheckboxTreeComponent.prototype.recursiveUpdateChildLeafs = function (leaf) {
        if (leaf.subLeafList) {
            for (var _i = 0, _a = leaf.subLeafList; _i < _a.length; _i++) {
                var subLeaf = _a[_i];
                subLeaf.checkboxChecked = leaf.checkboxChecked;
                if (subLeaf.subLeafList) {
                    this.recursiveUpdateChildLeafs(subLeaf);
                }
            }
        }
    };
    TerraCheckboxTreeComponent.prototype.recursiveUpdateParentLeafs = function (leaf) {
        if (leaf.leafParent) {
            var parentLeaf = leaf.leafParent;
            var parentLeafState = this.getParentLeafState(parentLeaf);
            // All checkboxes on this leaf level are checked
            if (parentLeafState.allChildrenAreChecked) {
                this.updateStateValuesOfLeaf(parentLeaf, false, true);
            }
            // No checkbox on this leaf level is checked but one or more set to indeterminate
            else if (parentLeafState.noChildrenAreChecked && parentLeafState.isIndeterminate) {
                this.updateStateValuesOfLeaf(parentLeaf, true, null);
            }
            // No checkbox on this leaf level is checked
            else if (parentLeafState.noChildrenAreChecked) {
                this.updateStateValuesOfLeaf(parentLeaf, false, false);
            }
            // other cases like partial checked or partial indeterminate or mixed
            else {
                this.recursiveSetIndeterminateToParent(leaf);
                return;
            }
            this.recursiveUpdateParentLeafs(parentLeaf);
        }
    };
    TerraCheckboxTreeComponent.prototype.updateStateValuesOfLeaf = function (leaf, isIndeterminate, checkboxChecked) {
        leaf.isIndeterminate = isIndeterminate;
        leaf.checkboxChecked = checkboxChecked;
    };
    TerraCheckboxTreeComponent.prototype.getParentLeafState = function (leaf) {
        var parentLeafState = new terra_checkbox_tree_leaf_state_1.TerraCheckboxTreeLeafState();
        for (var _i = 0, _a = leaf.subLeafList; _i < _a.length; _i++) {
            var subLeaf = _a[_i];
            parentLeafState.allChildrenAreChecked = subLeaf.checkboxChecked && parentLeafState.allChildrenAreChecked;
            parentLeafState.noChildrenAreChecked = !subLeaf.checkboxChecked && parentLeafState.noChildrenAreChecked;
            if (subLeaf.isIndeterminate) {
                parentLeafState.isIndeterminate = true;
            }
        }
        if ((!parentLeafState.allChildrenAreChecked && !parentLeafState.noChildrenAreChecked)) {
            parentLeafState.isIndeterminate = true;
        }
        return parentLeafState;
    };
    TerraCheckboxTreeComponent.prototype.appendParentsToLeafList = function (leafList) {
        for (var _i = 0, leafList_1 = leafList; _i < leafList_1.length; _i++) {
            var leaf = leafList_1[_i];
            this.recursiveAppendParentToSubLeafs(leaf);
        }
    };
    TerraCheckboxTreeComponent.prototype.recursiveAppendParentToSubLeafs = function (leaf) {
        if (leaf.subLeafList) {
            for (var _i = 0, _a = leaf.subLeafList; _i < _a.length; _i++) {
                var subLeaf = _a[_i];
                subLeaf.leafParent = leaf;
                this.recursiveAppendParentToSubLeafs(subLeaf);
            }
        }
    };
    TerraCheckboxTreeComponent.prototype.ngOnInit = function () {
        _super.prototype.ngOnInit.call(this);
        this.appendParentsToLeafList(this.inputLeafList);
    };
    TerraCheckboxTreeComponent.prototype.ngOnChanges = function (changes) {
        if (changes['inputLeafList']) {
            this.appendParentsToLeafList(this.inputLeafList);
        }
    };
    TerraCheckboxTreeComponent.prototype.recursiveSetIndeterminateToParent = function (leaf) {
        if (leaf.leafParent) {
            var parentLeaf = leaf.leafParent;
            this.updateStateValuesOfLeaf(parentLeaf, true, null);
            this.recursiveSetIndeterminateToParent(parentLeaf);
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraCheckboxTreeComponent.prototype, "inputLeafList", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraCheckboxTreeComponent.prototype, "inputParentLeafList", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraCheckboxTreeComponent.prototype, "inputCompleteLeafList", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraCheckboxTreeComponent.prototype, "valueChange", void 0);
    TerraCheckboxTreeComponent = __decorate([
        core_1.Component({
            selector: 'terra-checkbox-tree',
            styles: [require('./terra-checkbox-tree.component.scss')],
            template: require('./terra-checkbox-tree.component.html')
        })
    ], TerraCheckboxTreeComponent);
    return TerraCheckboxTreeComponent;
}(terra_base_tree_component_1.TerraBaseTreeComponent));
exports.TerraCheckboxTreeComponent = TerraCheckboxTreeComponent;

//# sourceMappingURL=terra-checkbox-tree.component.js.map
