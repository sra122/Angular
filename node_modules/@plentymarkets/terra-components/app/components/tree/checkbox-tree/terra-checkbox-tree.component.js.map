{"version":3,"sources":["app/components/tree/checkbox-tree/terra-checkbox-tree.component.ts"],"names":[],"mappings":"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","file":"terra-checkbox-tree.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output, SimpleChanges,\n} from '@angular/core';\nimport { TerraBaseTreeComponent } from '../base/terra-base-tree.component';\nimport { TerraCheckboxLeafInterface } from '../leaf/terra-checkbox-leaf.interface';\nimport { TerraCheckboxTreeLeafState } from './data/terra-checkbox-tree-leaf-state';\n\n@Component({\n    selector: 'terra-checkbox-tree',\n    styles:   [require('./terra-checkbox-tree.component.scss')],\n    template: require('./terra-checkbox-tree.component.html')\n})\nexport class TerraCheckboxTreeComponent extends TerraBaseTreeComponent implements OnInit, OnChanges\n{\n    /**\n     * @description current level leaf list\n     */\n    @Input()\n    public inputLeafList:Array<TerraCheckboxLeafInterface>;\n\n    /**\n     * @description leafs one level higher than current leaf\n     */\n    @Input()\n    public inputParentLeafList:Array<TerraCheckboxLeafInterface>;\n\n    /**\n     * @description complete leaf list for better and faster searching\n     */\n    @Input()\n    public inputCompleteLeafList:Array<TerraCheckboxLeafInterface>;\n\n    /**\n     * @description get the current selected leaf list\n     */\n    @Output()\n    public valueChange:EventEmitter<TerraCheckboxLeafInterface> = new EventEmitter<TerraCheckboxLeafInterface>();\n\n    public selectedLeafList:Array<TerraCheckboxLeafInterface> = [];\n\n    /**\n     * @description event which is triggered when any checkbox is clicked\n     * @param event\n     * @param leaf\n     */\n    private onCheckboxValueChange(event:boolean, leaf:TerraCheckboxLeafInterface):void\n    {\n        leaf.checkboxChecked = event;\n        this.resetIndeterminateLeafState(leaf);\n        this.recursiveUpdateChildLeafs(leaf);\n        this.recursiveUpdateParentLeafs(leaf);\n        this.valueChange.emit(leaf);\n    }\n\n    private resetIndeterminateLeafState(leaf:TerraCheckboxLeafInterface):void\n    {\n        // reset the isIndeterminate flag on every state change\n        leaf.isIndeterminate = false;\n    }\n\n    /**\n     * @description\n     * @param leaf\n     */\n    private recursiveAddLeafToList(leaf:TerraCheckboxLeafInterface):void\n    {\n        if(leaf.checkboxChecked)\n        {\n            this.selectedLeafList.push(leaf);\n        }\n        else\n        {\n            let leafIndex:number = this.selectedLeafList.indexOf(leaf);\n\n            this.selectedLeafList.splice(leafIndex, 1);\n        }\n\n        if(leaf.subLeafList)\n        {\n            for(let subLeaf of leaf.subLeafList)\n            {\n                this.recursiveAddLeafToList(subLeaf);\n            }\n        }\n    }\n\n    /**\n     * @description\n     * @param leaf\n     */\n    private recursiveUpdateChildLeafs(leaf:TerraCheckboxLeafInterface):void\n    {\n        if(leaf.subLeafList)\n        {\n            for(let subLeaf of leaf.subLeafList)\n            {\n                subLeaf.checkboxChecked = leaf.checkboxChecked;\n\n                if(subLeaf.subLeafList)\n                {\n                    this.recursiveUpdateChildLeafs(subLeaf);\n                }\n            }\n        }\n    }\n\n    private recursiveUpdateParentLeafs(leaf:TerraCheckboxLeafInterface):void\n    {\n        if(leaf.leafParent)\n        {\n            let parentLeaf:TerraCheckboxLeafInterface = leaf.leafParent;\n            let parentLeafState:TerraCheckboxTreeLeafState = this.getParentLeafState(parentLeaf);\n\n            // All checkboxes on this leaf level are checked\n            if(parentLeafState.allChildrenAreChecked)\n            {\n                this.updateStateValuesOfLeaf(parentLeaf, false, true);\n            }\n            // No checkbox on this leaf level is checked but one or more set to indeterminate\n            else if(parentLeafState.noChildrenAreChecked && parentLeafState.isIndeterminate)\n            {\n                this.updateStateValuesOfLeaf(parentLeaf, true, null);\n            }\n            // No checkbox on this leaf level is checked\n            else if(parentLeafState.noChildrenAreChecked)\n            {\n                this.updateStateValuesOfLeaf(parentLeaf, false, false);\n            }\n            // other cases like partial checked or partial indeterminate or mixed\n            else\n            {\n                this.recursiveSetIndeterminateToParent(leaf);\n                return;\n            }\n\n            this.recursiveUpdateParentLeafs(parentLeaf);\n        }\n    }\n\n    private updateStateValuesOfLeaf(leaf:TerraCheckboxLeafInterface, isIndeterminate:boolean, checkboxChecked:boolean):void\n    {\n        leaf.isIndeterminate = isIndeterminate;\n        leaf.checkboxChecked = checkboxChecked;\n    }\n\n    private getParentLeafState(leaf:TerraCheckboxLeafInterface):TerraCheckboxTreeLeafState\n    {\n        let parentLeafState:TerraCheckboxTreeLeafState = new TerraCheckboxTreeLeafState();\n\n        for(let subLeaf of leaf.subLeafList)\n        {\n            parentLeafState.allChildrenAreChecked = subLeaf.checkboxChecked && parentLeafState.allChildrenAreChecked;\n            parentLeafState.noChildrenAreChecked = !subLeaf.checkboxChecked && parentLeafState.noChildrenAreChecked;\n            if(subLeaf.isIndeterminate)\n            {\n                parentLeafState.isIndeterminate = true;\n            }\n        }\n        if((!parentLeafState.allChildrenAreChecked && !parentLeafState.noChildrenAreChecked))\n        {\n            parentLeafState.isIndeterminate = true;\n        }\n\n        return parentLeafState;\n    }\n\n    private appendParentsToLeafList(leafList:Array<TerraCheckboxLeafInterface>):void\n    {\n        for(let leaf of leafList)\n        {\n            this.recursiveAppendParentToSubLeafs(leaf);\n        }\n    }\n\n    private recursiveAppendParentToSubLeafs(leaf:TerraCheckboxLeafInterface):void\n    {\n        if(leaf.subLeafList)\n        {\n            for(let subLeaf of leaf.subLeafList)\n            {\n                subLeaf.leafParent = leaf;\n                this.recursiveAppendParentToSubLeafs(subLeaf);\n            }\n        }\n    }\n\n    public ngOnInit():void\n    {\n        super.ngOnInit();\n        this.appendParentsToLeafList(this.inputLeafList);\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if (changes['inputLeafList'])\n        {\n            this.appendParentsToLeafList(this.inputLeafList);\n        }\n    }\n\n    private recursiveSetIndeterminateToParent(leaf:TerraCheckboxLeafInterface):void\n    {\n        if(leaf.leafParent)\n        {\n            let parentLeaf:TerraCheckboxLeafInterface = leaf.leafParent;\n\n            this.updateStateValuesOfLeaf(parentLeaf, true, null);\n            this.recursiveSetIndeterminateToParent(parentLeaf);\n        }\n    }\n}\n\n\n"]}