{"version":3,"sources":["app/components/tree/base/terra-base-tree.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAGuB;AAEvB,6BAA8B;AAE9B;;GAEG;AACH;IAAA;IAgJA,CAAC;IA5HU,yCAAQ,GAAf;QAEI,IAAG,CAAC,IAAI,CAAC,qBAAqB,EAC9B;YACI,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,aAAa,CAAC;SACnD;QAED,IAAG,IAAI,CAAC,mBAAmB,EAC3B;YACI,KAAsB,UAAwB,EAAxB,KAAA,IAAI,CAAC,mBAAmB,EAAxB,cAAwB,EAAxB,IAAwB;gBAA1C,IAAI,UAAU,SAAA;gBAEd,IAAG,UAAU,CAAC,WAAW,EACzB;oBACI,KAAmB,UAAsB,EAAtB,KAAA,UAAU,CAAC,WAAW,EAAtB,cAAsB,EAAtB,IAAsB;wBAArC,IAAI,OAAO,SAAA;wBAEX,KAAgB,UAAkB,EAAlB,KAAA,IAAI,CAAC,aAAa,EAAlB,cAAkB,EAAlB,IAAkB;4BAA9B,IAAI,IAAI,SAAA;4BAER,IAAG,IAAI,KAAK,OAAO,EACnB;gCACI,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,mBAAmB,CAAC;6BAClD;yBACJ;qBACJ;iBACJ;aACJ;SACJ;IACL,CAAC;IAGO,4CAAW,GAAnB,UAAoB,WAA8B;QAE9C,IAAG,CAAC,aAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,EACpE;YACI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;SAChC;QAED,IAAG,CAAC,aAAM,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAC9D;YACI,WAAW,CAAC,aAAa,EAAE,CAAC;SAC/B;QAED,IAAG,CAAC,WAAW,CAAC,QAAQ,EACxB;YACI,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YAC3D,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;SAC/B;IACL,CAAC;IAEO,0DAAyB,GAAjC,UAAkC,IAA8B;QAE5D,IAAI,WAAW,GAAW,KAAK,CAAC;QAEhC,KAAgB,UAAI,EAAJ,aAAI,EAAJ,kBAAI,EAAJ,IAAI;YAAhB,IAAI,IAAI,aAAA;YAER,IAAG,IAAI,CAAC,QAAQ,EAChB;gBACI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,OAAO,IAAI,CAAC;aACf;iBACI,IAAG,IAAI,CAAC,WAAW,EACxB;gBACI,WAAW,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAClE;YAED,IAAG,WAAW,EACd;gBACI,OAAO,WAAW,CAAC;aACtB;SACJ;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEO,2CAAU,GAAlB,UAAmB,WAA8B;QAE7C,WAAW,CAAC,MAAM,GAAG,CAAC,WAAW,CAAC,MAAM,CAAC;IAC7C,CAAC;IAEO,6CAAY,GAApB,UAAqB,WAA8B;QAE/C,IAAG,CAAC,aAAM,CAAC,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,sBAAsB,EAC7E;YACI,WAAW,CAAC,cAAc,EAAE,CAAC;YAC7B,WAAW,CAAC,sBAAsB,GAAG,IAAI,CAAC;SAC7C;QAED,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAEO,0DAAyB,GAAjC,UAAkC,gBAA0C;QAExE,IAAI,SAA4B,CAAC;QAEjC,KAAgB,UAAgB,EAAhB,qCAAgB,EAAhB,8BAAgB,EAAhB,IAAgB;YAA5B,IAAI,IAAI,yBAAA;YAER,IAAG,IAAI,CAAC,QAAQ,EAChB;gBACI,SAAS,GAAG,IAAI,CAAC;gBAEjB,OAAO,SAAS,CAAC;aACpB;iBACI,IAAG,IAAI,CAAC,WAAW,EACxB;gBACI,SAAS,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;gBAE7D,IAAG,CAAC,aAAM,CAAC,SAAS,CAAC,EACrB;oBACI,MAAM;iBACT;aACJ;SACJ;QAED,OAAO,SAAS,CAAC;IACrB,CAAC;IAEM,gDAAe,GAAtB;QAEI,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAC9D,CAAC;IAEO,mDAAkB,GAA1B,UAA2B,WAA8B;QAErD,OAAO,CAAC,aAAM,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,aAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;IACnF,CAAC;IAzID;QADC,YAAK,EAAE;kCACa,KAAK;iEAAqB;IAM/C;QADC,YAAK,EAAE;kCACmB,KAAK;uEAAqB;IAMrD;QADC,YAAK,EAAE;kCACqB,KAAK;yEAAqB;IA8H3D,6BAAC;CAhJD,AAgJC,IAAA;AAhJY,wDAAsB","file":"terra-base-tree.component.js","sourcesContent":["import {\n    Input,\n    OnInit\n} from '@angular/core';\nimport { TerraLeafInterface } from '../leaf/terra-leaf.interface';\nimport { isNull } from 'util';\n\n/**\n * @author mkunze\n */\nexport class TerraBaseTreeComponent implements OnInit\n{\n    /**\n     * current level leaf list\n     */\n    @Input()\n    public inputLeafList:Array<TerraLeafInterface>;\n\n    /**\n     * leafs one level higher than current leaf\n     */\n    @Input()\n    public inputParentLeafList:Array<TerraLeafInterface>;\n\n    /**\n     * complete leaf list for better and faster searching\n     */\n    @Input()\n    public inputCompleteLeafList:Array<TerraLeafInterface>;\n\n    public ngOnInit():void\n    {\n        if(!this.inputCompleteLeafList)\n        {\n            this.inputCompleteLeafList = this.inputLeafList;\n        }\n\n        if(this.inputParentLeafList)\n        {\n            for(let parentLeaf of this.inputParentLeafList)\n            {\n                if(parentLeaf.subLeafList)\n                {\n                    for(let subLeaf of parentLeaf.subLeafList)\n                    {\n                        for(let leaf of this.inputLeafList)\n                        {\n                            if(leaf === subLeaf)\n                            {\n                                leaf.parentLeafList = this.inputParentLeafList;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n\n    private onLeafClick(clickedLeaf:TerraLeafInterface):void\n    {\n        if(!isNull(clickedLeaf.subLeafList) && !clickedLeaf.avoidOpenOnClick)\n        {\n            this.toggleOpen(clickedLeaf);\n        }\n\n        if(!isNull(clickedLeaf.clickFunction) && !clickedLeaf.isActive)\n        {\n            clickedLeaf.clickFunction();\n        }\n\n        if(!clickedLeaf.isActive)\n        {\n            this.recursiveLeafListInactive(this.inputCompleteLeafList);\n            clickedLeaf.isActive = true;\n        }\n    }\n\n    private recursiveLeafListInactive(list:Array<TerraLeafInterface>):boolean\n    {\n        let foundActive:boolean = false;\n\n        for(let leaf of list)\n        {\n            if(leaf.isActive)\n            {\n                leaf.isActive = false;\n                return true;\n            }\n            else if(leaf.subLeafList)\n            {\n                foundActive = this.recursiveLeafListInactive(leaf.subLeafList);\n            }\n\n            if(foundActive)\n            {\n                return foundActive;\n            }\n        }\n\n        return false;\n    }\n\n    private toggleOpen(clickedLeaf:TerraLeafInterface):void\n    {\n        clickedLeaf.isOpen = !clickedLeaf.isOpen;\n    }\n\n    private onArrowClick(clickedLeaf:TerraLeafInterface):void\n    {\n        if(!isNull(clickedLeaf.onOpenFunction) && !clickedLeaf.isOnOpenFunctionCalled)\n        {\n            clickedLeaf.onOpenFunction();\n            clickedLeaf.isOnOpenFunctionCalled = true;\n        }\n\n        this.toggleOpen(clickedLeaf);\n    }\n\n    private recursiveSearchActiveLeaf(leafListToSearch:Array<TerraLeafInterface>):TerraLeafInterface\n    {\n        let foundLeaf:TerraLeafInterface;\n\n        for(let leaf of leafListToSearch)\n        {\n            if(leaf.isActive)\n            {\n                foundLeaf = leaf;\n\n                return foundLeaf;\n            }\n            else if(leaf.subLeafList)\n            {\n                foundLeaf = this.recursiveSearchActiveLeaf(leaf.subLeafList);\n\n                if(!isNull(foundLeaf))\n                {\n                    break;\n                }\n            }\n        }\n\n        return foundLeaf;\n    }\n\n    public getSelectedLeaf():TerraLeafInterface\n    {\n        return this.recursiveSearchActiveLeaf(this.inputLeafList);\n    }\n\n    private checkIfArrowNeeded(clickedLeaf:TerraLeafInterface):boolean\n    {\n        return !isNull(clickedLeaf.subLeafList) || !isNull(clickedLeaf.onOpenFunction);\n    }\n}\n"]}