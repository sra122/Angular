"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var util_1 = require("util");
/**
 * @author mkunze
 */
var TerraBaseTreeComponent = /** @class */ (function () {
    function TerraBaseTreeComponent() {
    }
    TerraBaseTreeComponent.prototype.ngOnInit = function () {
        if (!this.inputCompleteLeafList) {
            this.inputCompleteLeafList = this.inputLeafList;
        }
        if (this.inputParentLeafList) {
            for (var _i = 0, _a = this.inputParentLeafList; _i < _a.length; _i++) {
                var parentLeaf = _a[_i];
                if (parentLeaf.subLeafList) {
                    for (var _b = 0, _c = parentLeaf.subLeafList; _b < _c.length; _b++) {
                        var subLeaf = _c[_b];
                        for (var _d = 0, _e = this.inputLeafList; _d < _e.length; _d++) {
                            var leaf = _e[_d];
                            if (leaf === subLeaf) {
                                leaf.parentLeafList = this.inputParentLeafList;
                            }
                        }
                    }
                }
            }
        }
    };
    TerraBaseTreeComponent.prototype.onLeafClick = function (clickedLeaf) {
        if (!util_1.isNull(clickedLeaf.subLeafList) && !clickedLeaf.avoidOpenOnClick) {
            this.toggleOpen(clickedLeaf);
        }
        if (!util_1.isNull(clickedLeaf.clickFunction) && !clickedLeaf.isActive) {
            clickedLeaf.clickFunction();
        }
        if (!clickedLeaf.isActive) {
            this.recursiveLeafListInactive(this.inputCompleteLeafList);
            clickedLeaf.isActive = true;
        }
    };
    TerraBaseTreeComponent.prototype.recursiveLeafListInactive = function (list) {
        var foundActive = false;
        for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var leaf = list_1[_i];
            if (leaf.isActive) {
                leaf.isActive = false;
                return true;
            }
            else if (leaf.subLeafList) {
                foundActive = this.recursiveLeafListInactive(leaf.subLeafList);
            }
            if (foundActive) {
                return foundActive;
            }
        }
        return false;
    };
    TerraBaseTreeComponent.prototype.toggleOpen = function (clickedLeaf) {
        clickedLeaf.isOpen = !clickedLeaf.isOpen;
    };
    TerraBaseTreeComponent.prototype.onArrowClick = function (clickedLeaf) {
        if (!util_1.isNull(clickedLeaf.onOpenFunction) && !clickedLeaf.isOnOpenFunctionCalled) {
            clickedLeaf.onOpenFunction();
            clickedLeaf.isOnOpenFunctionCalled = true;
        }
        this.toggleOpen(clickedLeaf);
    };
    TerraBaseTreeComponent.prototype.recursiveSearchActiveLeaf = function (leafListToSearch) {
        var foundLeaf;
        for (var _i = 0, leafListToSearch_1 = leafListToSearch; _i < leafListToSearch_1.length; _i++) {
            var leaf = leafListToSearch_1[_i];
            if (leaf.isActive) {
                foundLeaf = leaf;
                return foundLeaf;
            }
            else if (leaf.subLeafList) {
                foundLeaf = this.recursiveSearchActiveLeaf(leaf.subLeafList);
                if (!util_1.isNull(foundLeaf)) {
                    break;
                }
            }
        }
        return foundLeaf;
    };
    TerraBaseTreeComponent.prototype.getSelectedLeaf = function () {
        return this.recursiveSearchActiveLeaf(this.inputLeafList);
    };
    TerraBaseTreeComponent.prototype.checkIfArrowNeeded = function (clickedLeaf) {
        return !util_1.isNull(clickedLeaf.subLeafList) || !util_1.isNull(clickedLeaf.onOpenFunction);
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraBaseTreeComponent.prototype, "inputLeafList", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraBaseTreeComponent.prototype, "inputParentLeafList", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraBaseTreeComponent.prototype, "inputCompleteLeafList", void 0);
    return TerraBaseTreeComponent;
}());
exports.TerraBaseTreeComponent = TerraBaseTreeComponent;

//# sourceMappingURL=terra-base-tree.component.js.map
