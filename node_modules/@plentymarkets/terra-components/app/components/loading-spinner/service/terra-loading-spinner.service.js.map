{"version":3,"sources":["app/components/loading-spinner/service/terra-loading-spinner.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAGuB;AACvB,6BAGc;AAEd;;GAEG;AAEH;IAOI,oCAAoB,IAAW;QAA/B,iBAMC;QANmB,SAAI,GAAJ,IAAI,CAAO;QAHvB,eAAU,GAAW,KAAK,CAAC;QAK/B,IAAI,CAAC,UAAU,GAAG,IAAI,iBAAU,CAAU,UAAC,UAA8B;YAErE,KAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,0CAAK,GAAZ;QAEI,yEAAyE;QACzE,IAAG,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,EACtC;YACI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SACzC;IACL,CAAC;IAEM,yCAAI,GAAX;QAAA,iBAyBC;QAvBG,qEAAqE;QACrE,IAAG,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,EACrC;YACI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;YAExB,oEAAoE;YACpE,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBAEpB,6FAA6F;gBAC7F,UAAU,CAAC;oBAEP,IAAG,CAAC,KAAI,CAAC,UAAU,EACnB;wBACI,oEAAoE;wBACpE,KAAI,CAAC,IAAI,CAAC,GAAG,CAAC;4BAEV,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAI,CAAC,UAAU,CAAC,CAAC;wBAC1C,CAAC,CAAC,CAAC;qBACN;gBACL,CAAC,EAAE,GAAG,CAAC,CAAC;YACZ,CAAC,CACJ,CAAC;SACL;IACL,CAAC;IAED,sBAAW,iDAAS;aAApB;YAEI,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC;;;OAAA;IAvDQ,0BAA0B;QADtC,iBAAU,EAAE;yCAQgB,aAAM;OAPtB,0BAA0B,CAwDtC;IAAD,iCAAC;CAxDD,AAwDC,IAAA;AAxDY,gEAA0B","file":"terra-loading-spinner.service.js","sourcesContent":["import {\n    Injectable,\n    NgZone\n} from '@angular/core';\nimport {\n    Observable,\n    Subscriber\n} from 'rxjs';\n\n/**\n * @author mscharf\n */\n@Injectable()\nexport class TerraLoadingSpinnerService\n{\n    public observable:Observable<boolean>;\n\n    private _isLoading:boolean = false;\n    private subscriber:Subscriber<boolean>;\n\n    constructor(private zone:NgZone)\n    {\n        this.observable = new Observable<boolean>((subscriber:Subscriber<boolean>):void =>\n        {\n            this.subscriber = subscriber;\n        });\n    }\n\n    public start():void\n    {\n        // check if currently not loading to reduce unnecessary change detections\n        if(this.subscriber && !this._isLoading)\n        {\n            this._isLoading = true;\n            this.subscriber.next(this._isLoading);\n        }\n    }\n\n    public stop():void\n    {\n        // check if currently loading to reduce unnecessary change detections\n        if(this.subscriber && this._isLoading)\n        {\n            this._isLoading = false;\n\n            // to send no change detection run the setTimeout outside of angular\n            this.zone.runOutsideAngular(() =>\n                {\n                    // set timeout to stop the loading-spinner from blinking because of sequential started events\n                    setTimeout(() =>\n                    {\n                        if(!this._isLoading)\n                        {\n                            // run inside angular zone to detect changes from isLoading to false\n                            this.zone.run(() =>\n                            {\n                                this.subscriber.next(this._isLoading);\n                            });\n                        }\n                    }, 100);\n                }\n            );\n        }\n    }\n\n    public get isLoading():boolean\n    {\n        return this._isLoading;\n    }\n}\n"]}