"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
/**
 * @author mscharf
 */
var TerraLoadingSpinnerService = /** @class */ (function () {
    function TerraLoadingSpinnerService(zone) {
        var _this = this;
        this.zone = zone;
        this._isLoading = false;
        this.observable = new rxjs_1.Observable(function (subscriber) {
            _this.subscriber = subscriber;
        });
    }
    TerraLoadingSpinnerService.prototype.start = function () {
        // check if currently not loading to reduce unnecessary change detections
        if (this.subscriber && !this._isLoading) {
            this._isLoading = true;
            this.subscriber.next(this._isLoading);
        }
    };
    TerraLoadingSpinnerService.prototype.stop = function () {
        var _this = this;
        // check if currently loading to reduce unnecessary change detections
        if (this.subscriber && this._isLoading) {
            this._isLoading = false;
            // to send no change detection run the setTimeout outside of angular
            this.zone.runOutsideAngular(function () {
                // set timeout to stop the loading-spinner from blinking because of sequential started events
                setTimeout(function () {
                    if (!_this._isLoading) {
                        // run inside angular zone to detect changes from isLoading to false
                        _this.zone.run(function () {
                            _this.subscriber.next(_this._isLoading);
                        });
                    }
                }, 100);
            });
        }
    };
    Object.defineProperty(TerraLoadingSpinnerService.prototype, "isLoading", {
        get: function () {
            return this._isLoading;
        },
        enumerable: true,
        configurable: true
    });
    TerraLoadingSpinnerService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [core_1.NgZone])
    ], TerraLoadingSpinnerService);
    return TerraLoadingSpinnerService;
}());
exports.TerraLoadingSpinnerService = TerraLoadingSpinnerService;

//# sourceMappingURL=terra-loading-spinner.service.js.map
