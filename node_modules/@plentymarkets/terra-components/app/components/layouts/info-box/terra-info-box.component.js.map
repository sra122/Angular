{"version":3,"sources":["app/components/layouts/info-box/terra-info-box.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAIuB;AACvB,6BAAyC;AASzC;IAAA;IAmCA,CAAC;IAVG,sBAAW,6CAAU;aAArB;YAEI,OAAO,CAAC,wBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,GAAG,CAAC;gBAC1G,CAAC,wBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC;QACvF,CAAC;;;OAAA;IAED,sBAAW,4CAAS;aAApB;YAEI,OAAO,CAAC,wBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,wBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACvH,CAAC;;;OAAA;IA/BD;QADC,YAAK,EAAE;kCACY,KAAK;+DAAoB;IAG7C;QADC,YAAK,EAAE;kCACe,KAAK;kEAAuB;IAGnD;QADC,YAAK,EAAE;;8DACmB;IAG3B;QADC,YAAK,EAAE;;+DACoB;IAG5B;QADC,YAAK,EAAE;;kEACuB;IAG/B;QADC,YAAK,EAAE;;0DACc;IAGtB;QADC,YAAK,EAAE;;mEACwB;IAER;QAAvB,gBAAS,CAAC,WAAW,CAAC;;4DAAuB;IAvBrC,qBAAqB;QALjC,gBAAS,CAAC;YACI,QAAQ,EAAE,gBAAgB;YAC1B,MAAM,EAAI,CAAC,OAAO,CAAC,iCAAiC,CAAC,CAAC;YACtD,QAAQ,EAAE,OAAO,CAAC,iCAAiC,CAAC;SACvD,CAAC;OACA,qBAAqB,CAmCjC;IAAD,4BAAC;CAnCD,AAmCC,IAAA;AAnCY,sDAAqB","file":"terra-info-box.component.js","sourcesContent":["import {\n    Component,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { isNullOrUndefined } from 'util';\nimport { TerraTagInterface } from '../../layouts/tag/data/terra-tag.interface';\nimport { TerraButtonInterface } from '../../buttons/button/data/terra-button.interface';\n\n@Component({\n               selector: 'terra-info-box',\n               styles:   [require('./terra-info-box.component.scss')],\n               template: require('./terra-info-box.component.html')\n           })\nexport class TerraInfoBoxComponent\n{\n    @Input()\n    public inputTagList:Array<TerraTagInterface>;\n\n    @Input()\n    public inputButtonList:Array<TerraButtonInterface>;\n\n    @Input()\n    public inputAddBox:boolean;\n\n    @Input()\n    public inputIsEmpty:boolean;\n\n    @Input()\n    public inputIsSelected:boolean;\n\n    @Input()\n    public inputId:number;\n\n    @Input()\n    public inputNoWordBreak:boolean;\n\n    @ViewChild('buttonRef') private buttonRef:any;\n\n    public get hasButtons():boolean\n    {\n        return !isNullOrUndefined(this.buttonRef.nativeElement.childNodes) && this.buttonRef.nativeElement.childNodes > 0 ||\n               !isNullOrUndefined(this.inputButtonList) && this.inputButtonList.length > 0;\n    }\n\n    public get hasFooter():boolean\n    {\n        return !isNullOrUndefined(this.inputId) || (!isNullOrUndefined(this.inputTagList) && this.inputTagList.length > 0);\n    }\n}\n"]}