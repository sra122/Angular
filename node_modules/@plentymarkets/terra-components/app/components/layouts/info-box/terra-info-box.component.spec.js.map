{"version":3,"sources":["app/components/layouts/info-box/terra-info-box.component.spec.ts"],"names":[],"mappings":";;AAAA,uEAAmE;AAGnE,QAAQ,CAAC,kCAAkC,EAAE;IAEzC,IAAI,SAAS,GAAyB,IAAI,gDAAqB,EAAE,CAAC;IAClE,IAAI,OAAO,GAA4B,EAAE,CAAC;IAE1C,OAAO,CAAC,IAAI,CACR;QACI,IAAI,EAAE,OAAO;KAChB,EACD;QACI,IAAI,EAAE,OAAO;KAChB,CACJ,CAAC;IAEF,SAAS,CAAC;QAEF,SAAS,CAAC,YAAY,GAAG,EAAE,CAAC;IAChC,CAAC,CACJ,CAAC;IAEF,SAAS,CAAC;QAEF,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;IAC7B,CAAC,CACJ,CAAC;IAEF,EAAE,CAAC,2BAA2B,EAAE;QAE5B,MAAM,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,CAAC;IACnC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yEAAyE,EAAE;QAEtE,SAAS,CAAC,YAAY,GAAG,OAAO,CAAC;QACjC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC3C,CAAC,CACJ,CAAC;IAEF,EAAE,CAAC,oEAAoE,EAAE;QAEjE,SAAS,CAAC,OAAO,GAAG,CAAC,CAAC;QACtB,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;QACvD,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC,CACJ,CAAC;IAEF,EAAE,CAAC,sFAAsF,EAAE;QAEnF,SAAS,CAAC,YAAY,GAAG,IAAI,CAAC;QAC9B,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;QACzB,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC,CACJ,CAAC;IAEF,EAAE,CAAC,uEAAuE,EAAE;QAEpE,SAAS,CAAC,YAAY,GAAG,EAAE,CAAC;QAC5B,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC,CACJ,CAAC;AACN,CAAC,CAAC,CAAC","file":"terra-info-box.component.spec.js","sourcesContent":["import { TerraInfoBoxComponent } from './terra-info-box.component';\nimport { TerraTagInterface } from '../../../../';\n\ndescribe('Component: TerraInfoBoxComponent', () =>\n{\n    let component:TerraInfoBoxComponent = new TerraInfoBoxComponent();\n    let tagList:Array<TerraTagInterface> = [];\n\n    tagList.push(\n        {\n            name: 'test1'\n        },\n        {\n            name: 'test2'\n        }\n    );\n\n    afterEach(() =>\n        {\n            component.inputTagList = [];\n        }\n    );\n\n    afterEach(() =>\n        {\n            component.inputId = null;\n        }\n    );\n\n    it('should create an instance', () =>\n    {\n        expect(component).toBeTruthy();\n    });\n\n    it('should getter \\'hasFooter\\' return true if \\'inputTagList\\' has entries', () =>\n        {\n            component.inputTagList = tagList;\n            expect(component.hasFooter).toBe(true);\n        }\n    );\n\n    it('should getter \\'hasFooter\\' return true if \\'inputId\\' has a value', () =>\n        {\n            component.inputId = 5;\n            expect(component.hasFooter).toBe(true);\n            expect(component.inputId).toEqual(jasmine.any(Number));\n            expect(component.inputId).toBeGreaterThan(0);\n        }\n    );\n\n    it('should getter \\'hasFooter\\' return false if \\'inputTagList\\' or \\'inputId\\' are null', () =>\n        {\n            component.inputTagList = null;\n            component.inputId = null;\n            expect(component.hasFooter).toBe(false);\n        }\n    );\n\n    it('should getter \\'hasFooter\\' return false if \\'inputTagList\\' is empty', () =>\n        {\n            component.inputTagList = [];\n            expect(component.hasFooter).toBe(false);\n        }\n    );\n});\n"]}