{"version":3,"sources":["app/components/layouts/portlet/terra-portlet.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAOuB;AACvB,kDAM6B;AAC7B,6BAAyC;AAuBzC;IAkDI;QAhDA;;WAEG;QAEI,0BAAqB,GAAW,KAAK,CAAC;QAQ7C;;WAEG;QAEI,uBAAkB,GAAW,KAAK,CAAC;QAE1C;;WAEG;QAEI,mBAAc,GAAW,KAAK,CAAC;QAEtC;;WAEG;QAEI,oBAAe,GAA+B,EAAE,CAAC;QAGjD,yBAAoB,GAAyB,IAAI,mBAAY,EAAW,CAAC;QAmB5E,IAAI,CAAC,kBAAkB,GAAG,wBAAiB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC;IACxG,CAAC;IAlBD,sBAAY,iDAAc;aAA1B;YAEI,IAAG,CAAC,IAAI,CAAC,kBAAkB,EAC3B;gBACI,OAAO,UAAU,CAAC;aACrB;YAED,IAAG,IAAI,CAAC,cAAc,EACtB;gBACI,OAAO,gBAAgB,CAAC;aAC3B;YAED,OAAO,UAAU,CAAC;QACtB,CAAC;;;OAAA;IAOM,2CAAW,GAAlB,UAAmB,OAAqB;QAAxC,iBAUC;QARG,IAAG,OAAO,CAAC,cAAc,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAC3E;YACI,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;YAC5B,UAAU,CAAC;gBAEP,KAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAED;;OAEG;IACI,8CAAc,GAArB;QAEI,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC;QAE3C,IAAG,CAAC,IAAI,CAAC,kBAAkB,EAC3B;YACI,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;SAC/B;QAED,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACxD,CAAC;IA1ED;QADC,YAAK,EAAE;;wEACqC;IAM7C;QADC,YAAK,EAAE;;qEACyB;IAMjC;QADC,YAAK,EAAE;;qEACkC;IAM1C;QADC,YAAK,EAAE;;iEAC8B;IAMtC;QADC,YAAK,EAAE;kCACe,KAAK;kEAA4B;IAGxD;QADC,aAAM,EAAE;kCACmB,mBAAY;uEAAwC;IAjCvE,qBAAqB;QApBjC,gBAAS,CAAC;YACP,QAAQ,EAAI,eAAe;YAC3B,MAAM,EAAM,CAAC,OAAO,CAAC,gCAAgC,CAAC,CAAC;YACvD,QAAQ,EAAI,OAAO,CAAC,gCAAgC,CAAC;YACrD,UAAU,EAAE;gBACR,oBAAO,CAAC,gBAAgB,EAAE;oBACtB,kBAAK,CAAC,gBAAgB,EAAE,kBAAK,CAAC;wBAC1B,MAAM,EAAY,CAAC;wBACnB,aAAa,EAAK,CAAC;wBACnB,gBAAgB,EAAE,CAAC;qBACtB,CAAC,CAAC;oBACH,kBAAK,CAAC,UAAU,EAAE,kBAAK,CAAC;wBACpB,MAAM,EAAE,GAAG;qBACd,CAAC,CAAC;oBACH,uBAAU,CAAC,6BAA6B,EAAE;wBACtC,oBAAO,CAAC,GAAG,CAAC;qBACf,CAAC;iBACL,CAAC;aACL;SACJ,CAAC;;OACW,qBAAqB,CAiFjC;IAAD,4BAAC;CAjFD,AAiFC,IAAA;AAjFY,sDAAqB","file":"terra-portlet.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport {\n    animate,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\nimport { isNullOrUndefined } from 'util';\nimport { TerraButtonInterface } from '../../buttons/button/data/terra-button.interface';\n\n@Component({\n    selector:   'terra-portlet',\n    styles:     [require('./terra-portlet.component.scss')],\n    template:   require('./terra-portlet.component.html'),\n    animations: [\n        trigger('collapsedState', [\n            state('inputCollapsed', style({\n                height:           0,\n                'padding-top':    0,\n                'padding-bottom': 0\n            })),\n            state('expanded', style({\n                height: '*'\n            })),\n            transition('inputCollapsed <=> expanded', [\n                animate(100)\n            ])\n        ])\n    ]\n})\nexport class TerraPortletComponent implements OnChanges\n{\n    /**\n     * @description If true, portlet gets highlighted on mouse hover.\n     */\n    @Input()\n    public inputHighlightPortlet:boolean = false;\n\n    /**\n     * @description Sets the label of the portlet header.\n     */\n    @Input()\n    public inputPortletHeader:string;\n\n    /**\n     * @description If true, the portlet gets collapsable.\n     */\n    @Input()\n    public inputIsCollapsable:boolean = false;\n\n    /**\n     * @description If true, the portlet is collapsed (requires inputIsCollapsable = true).\n     */\n    @Input()\n    public inputCollapsed:boolean = false;\n\n    /**\n     * @description Sets the given buttons as a button group to the right side of the portlet header.\n     */\n    @Input()\n    public inputButtonList:Array<TerraButtonInterface> = [];\n\n    @Output()\n    public inputCollapsedChange:EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    private get collapsedState():string\n    {\n        if(!this.inputIsCollapsable)\n        {\n            return 'expanded';\n        }\n\n        if(this.inputCollapsed)\n        {\n            return 'inputCollapsed';\n        }\n\n        return 'expanded';\n    }\n\n    constructor()\n    {\n        this.inputPortletHeader = isNullOrUndefined(this.inputPortletHeader) ? '' : this.inputPortletHeader;\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if(changes.hasOwnProperty('inputIsCollapsable') && !this.inputIsCollapsable)\n        {\n            this.inputCollapsed = false;\n            setTimeout(() =>\n            {\n                this.inputCollapsedChange.emit(false);\n            });\n        }\n    }\n\n    /**\n     * @description Changes the collapse state.\n     */\n    public toggleCollapse():void\n    {\n        this.inputCollapsed = !this.inputCollapsed;\n\n        if(!this.inputIsCollapsable)\n        {\n            this.inputCollapsed = false;\n        }\n\n        this.inputCollapsedChange.emit(this.inputCollapsed);\n    }\n}\n"]}