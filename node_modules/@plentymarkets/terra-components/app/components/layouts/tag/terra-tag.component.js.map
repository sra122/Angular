{"version":3,"sources":["app/components/layouts/tag/terra-tag.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAKuB;AACvB,6BAAyC;AACzC,4EAAoE;AAEpE,6CAAwC;AAOxC;IAsCI;QAFO,eAAU,GAAwB,IAAI,mBAAY,EAAU,CAAC;QAIhE,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;IAES,iCAAK,GAAf;QAEI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAES,mCAAO,GAAjB;QAEI,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACzE,CAAC;IAEO,6CAAiB,GAAzB;QAAA,iBAqBC;QAnBG,4BAA4B;QAC5B,IAAG,wBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,EAChC;YACI,OAAO,IAAI,CAAC,IAAI,CAAC;SACpB;aAED;YACI,IAAM,OAAO,GAAyB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAC,IAA0B,IAAK,OAAA,IAAI,CAAC,QAAQ,KAAK,KAAI,CAAC,IAAI,EAA3B,CAA2B,CAAC,CAAC;YAEnH,2CAA2C;YAC3C,IAAG,wBAAiB,CAAC,OAAO,CAAC,EAC7B;gBACI,OAAO,IAAI,CAAC,IAAI,CAAC;aACpB;iBAED;gBACI,OAAO,OAAO,CAAC,IAAI,CAAC;aACvB;SACJ;IACL,CAAC;IAED;;;;OAIG;IACK,sCAAU,GAAlB;QAEI,IAAG,CAAC,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC;YACI,OAAO,IAAI,CAAC,UAAU,CAAC;SAC1B;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACK,oCAAQ,GAAhB;QAEI,IAAG,CAAC,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EACtC;YACI,OAAO,CAAC,IAAI,oBAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;SACxE;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;IArGD;QADC,uBAAQ,EAAE;;mDACQ;IAGnB;QADC,YAAK,EAAE;;mDACW;IAGnB;QADC,YAAK,EAAE;;yDACiB;IAGzB;QADC,YAAK,EAAE;;4DACqB;IAG7B;QADC,YAAK,EAAE;;8DACuB;IAG/B;QADC,YAAK,EAAE;;+DACuB;IAM/B;QAJC,YAAK,EAAE;QACR;;WAEG;;;yDACsB;IAGzB;QADC,YAAK,EAAE;;oDACY;IAGpB;QADC,YAAK,EAAE;;yDACkB;IAG1B;QADC,YAAK,EAAE;kCACK,KAAK;oDAAwB;IAG1C;QADC,aAAM,EAAE;kCACS,mBAAY;yDAAsC;IApC3D,iBAAiB;QAL7B,gBAAS,CAAC;YACP,QAAQ,EAAE,WAAW;YACrB,MAAM,EAAI,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC;YACjD,QAAQ,EAAE,OAAO,CAAC,4BAA4B,CAAC;SAClD,CAAC;;OACW,iBAAiB,CAyG7B;IAAD,wBAAC;CAzGD,AAyGC,IAAA;AAzGY,8CAAiB","file":"terra-tag.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output\n} from '@angular/core';\nimport { isNullOrUndefined } from 'util';\nimport { Color } from '../../forms/input/color-picker/color.helper';\nimport { TerraTagNameInterface } from './data/terra-tag-name.interface';\nimport { Language } from 'angular-l10n';\n\n@Component({\n    selector: 'terra-tag',\n    styles:   [require('./terra-tag.component.scss')],\n    template: require('./terra-tag.component.html')\n})\nexport class TerraTagComponent\n{\n    @Language()\n    public lang:string;\n\n    @Input()\n    public name:string;\n\n    @Input()\n    public inputBadge:string;\n\n    @Input()\n    public inputIsTagged:boolean;\n\n    @Input()\n    public inputIsTaggable:boolean;\n\n    @Input()\n    public inputCustomClass:string;\n\n    @Input()\n    /**\n     * The background color for the tag.\n     */\n    public inputColor:string;\n\n    @Input()\n    public tagId:number;\n\n    @Input()\n    public isClosable:boolean;\n\n    @Input()\n    public names:Array<TerraTagNameInterface>;\n\n    @Output()\n    public onCloseTag:EventEmitter<number> = new EventEmitter<number>();\n\n    constructor()\n    {\n        this.inputIsTagged = false;\n        this.inputIsTaggable = false;\n        this.inputColor = null;\n        this.inputCustomClass = null;\n        this.isClosable = false;\n    }\n\n    protected close():void\n    {\n        this.onCloseTag.emit(this.tagId);\n    }\n\n    protected getName():string\n    {\n        return this.inputBadge ? this.inputBadge :  this.getTranslatedName();\n    }\n\n    private getTranslatedName():string\n    {\n        // Fallback if names not set\n        if(isNullOrUndefined(this.names))\n        {\n            return this.name;\n        }\n        else\n        {\n            const tagName:TerraTagNameInterface = this.names.find((name:TerraTagNameInterface) => name.language === this.lang);\n\n            // Fallback if no name for this.lang is set\n            if(isNullOrUndefined(tagName))\n            {\n                return this.name;\n            }\n            else\n            {\n                return tagName.name;\n            }\n        }\n    }\n\n    /**\n     * Get the background color.\n     * @returns {string}\n     * @see inputColor\n     */\n    private getBgColor():string\n    {\n        if(!isNullOrUndefined(this.inputColor))\n        {\n            return this.inputColor;\n        }\n        return null;\n    }\n\n    /**\n     * Get the foreground color.\n     */\n    private getColor():string\n    {\n        if(!isNullOrUndefined(this.inputColor))\n        {\n            return (new Color(this.inputColor)).isDark() ? '#ffffff' : '#000000';\n        }\n        return null;\n    }\n}\n"]}