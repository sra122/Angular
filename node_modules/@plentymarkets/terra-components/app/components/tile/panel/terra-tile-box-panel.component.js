"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
/**
 * @author mkunze
 * @deprecated use `terra-card` instead.
 */
var TerraTileBoxPanelComponent = /** @class */ (function () {
    function TerraTileBoxPanelComponent() {
        this.selectedTileBoxList = [];
        this.viewStyle = false;
        this.inputIsViewToggleable = false;
    }
    TerraTileBoxPanelComponent.prototype.onBoxClick = function (event, tile) {
        tile.isSelected = !tile.isSelected;
        var index = this.selectedTileBoxList.indexOf(tile);
        if (tile.isSelected && index === -1) {
            this.selectedTileBoxList.push(tile);
        }
        else if (!tile.isSelected && index !== -1) {
            this.selectedTileBoxList.splice(index, 1);
        }
    };
    TerraTileBoxPanelComponent.prototype.onDragStart = function (event, draggingTile) {
        this.draggedIndex = this.inputTileBoxList.indexOf(draggingTile);
        draggingTile.isDragging = true;
        for (var _i = 0, _a = this.inputTileBoxList; _i < _a.length; _i++) {
            var tile = _a[_i];
            if (tile !== draggingTile) {
                tile.isDropTarget = true;
            }
        }
        // awesome hack for firefox! it rocks!!!
        event.dataTransfer.setData('text', 'anything');
    };
    TerraTileBoxPanelComponent.prototype.onDragEnd = function (event, draggingTile) {
        event.preventDefault();
        draggingTile.isDragging = false;
        for (var _i = 0, _a = this.inputTileBoxList; _i < _a.length; _i++) {
            var tile = _a[_i];
            tile.isDropTarget = false;
            tile.isHover = false;
        }
    };
    TerraTileBoxPanelComponent.prototype.onDragLeave = function (event, hoverTile) {
        event.preventDefault();
        if (!hoverTile.isDragging) {
            hoverTile.isHover = false;
        }
    };
    TerraTileBoxPanelComponent.prototype.onDrop = function (event, droppedTile) {
        event.preventDefault();
        var draggedTile = this.inputTileBoxList[this.draggedIndex];
        draggedTile.isDragging = false;
        for (var _i = 0, _a = this.inputTileBoxList; _i < _a.length; _i++) {
            var tile = _a[_i];
            tile.isDropTarget = false;
            tile.isHover = false;
        }
        var droppedIndex = this.inputTileBoxList.indexOf(droppedTile);
        this.inputTileBoxList.splice(this.draggedIndex, 1);
        this.inputTileBoxList.splice(droppedIndex, 0, draggedTile);
    };
    TerraTileBoxPanelComponent.prototype.onDragOver = function (event, hoverTile) {
        event.preventDefault();
        if (!hoverTile.isDragging) {
            hoverTile.isHover = true;
            for (var _i = 0, _a = this.inputTileBoxList; _i < _a.length; _i++) {
                var tile = _a[_i];
                if (tile !== hoverTile) {
                    tile.isHover = false;
                }
            }
        }
    };
    TerraTileBoxPanelComponent.prototype.toggleView = function () {
        this.viewStyle = !this.viewStyle;
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraTileBoxPanelComponent.prototype, "inputTileBoxList", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraTileBoxPanelComponent.prototype, "inputIsViewToggleable", void 0);
    TerraTileBoxPanelComponent = __decorate([
        core_1.Component({
            selector: 'terra-tile-box-panel',
            styles: [require('./terra-tile-box-panel.component.scss')],
            template: require('./terra-tile-box-panel.component.html')
        }),
        __metadata("design:paramtypes", [])
    ], TerraTileBoxPanelComponent);
    return TerraTileBoxPanelComponent;
}());
exports.TerraTileBoxPanelComponent = TerraTileBoxPanelComponent;

//# sourceMappingURL=terra-tile-box-panel.component.js.map
