{"version":3,"sources":["app/components/buttons/toggle/terra-toggle.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAMuB;AACvB,wCAGwB;AACxB,oFAAiF;AAcjF;IAqCI;QAVO,gBAAW,GAAqB,IAAI,mBAAY,EAAO,CAAC;QAGxD,cAAS,GAAqB,IAAI,mBAAY,EAAO,CAAC;QAGtD,YAAO,GAAyB,IAAI,mBAAY,EAAW,CAAC;QAEzD,aAAQ,GAAW,KAAK,CAAC;QA8C3B,sBAAiB,GAAc,cAAW,OAAA,SAAS,EAAT,CAAS,CAAC;QAEpD,qBAAgB,GAAmB,UAAC,CAAK,IAAU,OAAA,SAAS,EAAT,CAAS,CAAC;QA5CjE,IAAI,CAAC,qBAAqB,GAAG,yCAAkB,CAAC,GAAG,CAAC;IACxD,CAAC;6BAxCQ,oBAAoB;IA0CnB,qCAAM,GAAhB;QAEI,IAAG,CAAC,IAAI,CAAC,eAAe,EACxB;YACI,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC/B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACjC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrC,IAAG,IAAI,CAAC,QAAQ,EAChB;gBACI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;aACzB;iBAED;gBACI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC;aAC3B;SACJ;IACL,CAAC;IAED,sCAAsC;IAC/B,yCAAU,GAAjB,UAAkB,KAAa;QAE3B,IAAG,KAAK,KAAK,IAAI,CAAC,QAAQ,EAC1B;YACI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SACzB;IACL,CAAC;IAED,sCAAsC;IAC/B,+CAAgB,GAAvB,UAAwB,EAAkB;QAEtC,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IAC/B,CAAC;IAED,sCAAsC;IAC/B,gDAAiB,GAAxB,UAAyB,EAAa;QAElC,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;IAChC,CAAC;IA5ED;QADC,YAAK,EAAE;;8DACoB;IAG5B;QADC,YAAK,EAAE;;8DACoB;IAG5B;QADC,YAAK,EAAE;;iEACuB;IAG/B;QADC,YAAK,EAAE;;2DACgB;IAGxB;QADC,YAAK,EAAE;;mEACyB;IAGjC;QADC,YAAK,EAAE;;+DACqB;IAG7B;QADC,YAAK,EAAE;;kEACuB;IAG/B;QADC,YAAK,EAAE;;uEACwC;IAGhD;QADC,aAAM,EAAE;kCACU,mBAAY;6DAAgC;IAG/D;QADC,aAAM,EAAE;kCACQ,mBAAY;2DAAgC;IAG7D;QADC,aAAM,EAAE;kCACM,mBAAY;yDAAwC;IAjC1D,oBAAoB;QAZhC,gBAAS,CAAC;YACP,QAAQ,EAAG,cAAc;YACzB,MAAM,EAAK,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;YACrD,QAAQ,EAAG,OAAO,CAAC,+BAA+B,CAAC;YACnD,SAAS,EAAE;gBACP;oBACI,OAAO,EAAM,yBAAiB;oBAC9B,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,sBAAoB,EAApB,CAAoB,CAAC;oBACnD,KAAK,EAAQ,IAAI;iBACpB;aACJ;SACJ,CAAC;;OACW,oBAAoB,CAoFhC;IAAD,2BAAC;;CApFD,AAoFC,IAAA;AApFY,oDAAoB","file":"terra-toggle.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    NG_VALUE_ACCESSOR\n} from '@angular/forms';\nimport { TerraPlacementEnum } from '../../../helpers/enums/terra-placement.enum';\n\n@Component({\n    selector:  'terra-toggle',\n    styles:    [require('./terra-toggle.component.scss')],\n    template:  require('./terra-toggle.component.html'),\n    providers: [\n        {\n            provide:     NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TerraToggleComponent),\n            multi:       true\n        }\n    ]\n})\nexport class TerraToggleComponent implements ControlValueAccessor\n{\n    @Input()\n    public inputIsSmall:boolean;\n\n    @Input()\n    public inputIsLarge:boolean;\n\n    @Input()\n    public inputIsDisabled:boolean;\n\n    @Input()\n    public inputIcon:string;\n\n    @Input()\n    public inputIsAlignRight:boolean;\n\n    @Input()\n    public inputIsHidden:boolean;\n\n    @Input()\n    public inputTooltipText:string;\n\n    @Input()\n    public inputTooltipPlacement:TerraPlacementEnum;\n\n    @Output()\n    public deactivated:EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    public activated:EventEmitter<any> = new EventEmitter<any>();\n\n    @Output()\n    public toggled:EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    protected isActive:boolean = false;\n\n    constructor()\n    {\n        this.inputTooltipPlacement = TerraPlacementEnum.TOP;\n    }\n\n    protected toggle():void\n    {\n        if(!this.inputIsDisabled)\n        {\n            this.isActive = !this.isActive;\n            this.toggled.emit(this.isActive);\n            this.onChangeCallback(this.isActive);\n            if(this.isActive)\n            {\n                this.activated.emit();\n            }\n            else\n            {\n                this.deactivated.emit();\n            }\n        }\n    }\n\n    // From ControlValueAccessor interface\n    public writeValue(value:boolean):void\n    {\n        if(value !== this.isActive)\n        {\n            this.isActive = value;\n        }\n    }\n\n    // From ControlValueAccessor interface\n    public registerOnChange(fn:(_:any) => void):void\n    {\n        this.onChangeCallback = fn;\n    }\n\n    // From ControlValueAccessor interface\n    public registerOnTouched(fn:() => void):void\n    {\n        this.onTouchedCallback = fn;\n    }\n\n    private onTouchedCallback:() => void = ():void => undefined;\n\n    private onChangeCallback:(_:any) => void = (_:any):void => undefined;\n}\n"]}