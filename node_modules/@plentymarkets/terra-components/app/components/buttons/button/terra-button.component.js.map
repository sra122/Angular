{"version":3,"sources":["app/components/buttons/button/terra-button.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAKuB;AACvB,6BAAyC;AACzC,oFAAiF;AAOjF;IAuGI;QAJO,kBAAa,GAAuB,IAAI,mBAAY,EAAS,CAAC;QAMjE,IAAI,CAAC,qBAAqB,GAAG,yCAAkB,CAAC,GAAG,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAC5B,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,qBAAqB,CAAC;IAC9D,CAAC;IAEO,oCAAK,GAAb,UAAc,KAAW;QAErB,IAAG,wBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC,eAAe,KAAK,KAAK,EAC5E;YACI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAClC;IACL,CAAC;IAEO,kDAAmB,GAA3B,UAA4B,KAAgB;QAExC,IAAG,wBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAC3C;YACI,OAAO;SACV;QAED,IAAI,2BAA2B,GAAU,GAAG,CAAC;QAE7C,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,qBAAqB,CAAC;QAE1D,IAAG,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,GAAG,2BAA2B,EAClE;YACI,IAAI,CAAC,uBAAuB,GAAG,yCAAkB,CAAC,IAAI,CAAC;SAC1D;aACI,IAAG,KAAK,CAAC,OAAO,GAAG,2BAA2B,EACnD;YACI,IAAI,CAAC,uBAAuB,GAAG,yCAAkB,CAAC,KAAK,CAAC;SAC3D;IACL,CAAC;IA1ID;QADC,YAAK,EAAE;;gEACsB;IAO9B;QADC,YAAK,EAAE;;kEACwB;IAOhC;QADC,YAAK,EAAE;;iEACuB;IAI/B;QADC,YAAK,EAAE;;8DACoB;IAI5B;QADC,YAAK,EAAE;;8DACoB;IAI5B;QADC,YAAK,EAAE;;iEACuB;IAI/B;QADC,YAAK,EAAE;;8DACmB;IAI3B;QADC,YAAK,EAAE;;2DACgB;IAIxB;QADC,YAAK,EAAE;;2DACgB;IAIxB;QADC,YAAK,EAAE;;mEACyB;IAIjC;QADC,YAAK,EAAE;;+DACqB;IAI7B;QADC,YAAK,EAAE;;kEACuB;IAI/B;QADC,YAAK,EAAE;;uEACwC;IAMhD;QADC,YAAK,EAAE;;+DACqB;IAO7B;QADC,YAAK,EAAE;;gEACsB;IAM9B;QADC,YAAK,EAAE;;gEACsB;IAM9B;QADC,YAAK,EAAE;;6DACmB;IAG3B;QADC,YAAK,EAAE;;oEAC0B;IAOlC;QADC,YAAK,EAAE;;8DACoB;IAG5B;QADC,aAAM,EAAE;kCACY,mBAAY;+DAAoC;IAnG5D,oBAAoB;QALhC,gBAAS,CAAC;YACP,QAAQ,EAAE,cAAc;YACxB,MAAM,EAAI,CAAC,OAAO,CAAC,+BAA+B,CAAC,CAAC;YACpD,QAAQ,EAAE,OAAO,CAAC,+BAA+B,CAAC;SACrD,CAAC;;OACW,oBAAoB,CAkJhC;IAAD,2BAAC;CAlJD,AAkJC,IAAA;AAlJY,oDAAoB","file":"terra-button.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    Output\n} from '@angular/core';\nimport { isNullOrUndefined } from 'util';\nimport { TerraPlacementEnum } from '../../../helpers/enums/terra-placement.enum';\n\n@Component({\n    selector: 'terra-button',\n    styles:   [require('./terra-button.component.scss')],\n    template: require('./terra-button.component.html')\n})\nexport class TerraButtonComponent\n{\n    /**\n     * @description If true, the button gets the primary color blue. Default false.\n     * @deprecated The button color depends on the input icon. Each icon has its own fixed color.\n     */\n    @Input()\n    public inputIsPrimary:boolean;\n\n    /**\n     * @description If true, the button gets the secondary color red. Default false.\n     * @deprecated The button color depends on the input icon. Each icon has its own fixed color.\n     */\n    @Input()\n    public inputIsSecondary:boolean;\n\n    /**\n     * @description If true, the button gets the tertiary color green. Default false.\n     * @deprecated The button color depends on the input icon. Each icon has its own fixed color.\n     */\n    @Input()\n    public inputIsTertiary:boolean;\n\n    /** @description If true, the button will be small. Default false.*/\n    @Input()\n    public inputIsSmall:boolean;\n\n    /** @description If true, the button will be large. Default false.*/\n    @Input()\n    public inputIsLarge:boolean;\n\n    /** @description If true, the button will be disabled. Default false.*/\n    @Input()\n    public inputIsDisabled:boolean;\n\n    /** @description Set the caption.*/\n    @Input()\n    public inputCaption:string;\n\n    /** @description Set an icon (e.g. icon-save).*/\n    @Input()\n    public inputIcon:string;\n\n    /** @description Set the html native 'type' attribute, e.g., 'submit or 'reset'. Default 'button'.*/\n    @Input()\n    public inputType:string;\n\n    /** @description  If true, the button will be aligned to the right side of another element. Default false.*/\n    @Input()\n    public inputIsAlignRight:boolean;\n\n    /** @description If true, the button will be hidden. Default false.*/\n    @Input()\n    public inputIsHidden:boolean;\n\n    /** @description Set the tooltip.*/\n    @Input()\n    public inputTooltipText:string;\n\n    /** @description Set the tooltip placement (bottom, top, left, right). Default top.*/\n    @Input()\n    public inputTooltipPlacement:TerraPlacementEnum;\n\n    /**\n     * @description If true, the button color changes to blue and indicates its active state. Default false.\n     */\n    @Input()\n    public inputIsActive:boolean;\n\n    /**\n     * @description If true, a triangular yellow flag appears at the upper right corner of the button to indicate, e.g.,\n     * a state in which the button should be clicked by the user. Default false.\n     */\n    @Input()\n    public inputIsFlagged:boolean;\n\n    /**\n     * @description If true, a none-clickable element is set to optically divide a vertical button group. Default false.\n     */\n    @Input()\n    public inputIsDivider:boolean;\n\n    /**\n     * @description If true, the button will appear as a link which changes to blue on hover. Default false.\n     */\n    @Input()\n    public inputIsLink:boolean;\n\n    @Input()\n    public inputIsHighlighted:boolean;\n\n    /**\n     * @description If true, the button gets full colored background (only for 'add' and 'delete' function group).\n     * Default false\n     */\n    @Input()\n    public inputIsMajor:boolean;\n\n    @Output()\n    public outputClicked:EventEmitter<Event> = new EventEmitter<Event>();\n\n    protected currentTooltipPlacement:string;\n\n    constructor()\n    {\n        this.inputTooltipPlacement = TerraPlacementEnum.TOP;\n        this.inputType = 'button';\n        this.inputIsActive = false;\n        this.inputIsFlagged = false;\n        this.inputIsDivider = false;\n        this.inputIsHidden = false;\n        this.inputIsLink = false;\n        this.inputIsDisabled = false;\n        this.inputIsHighlighted = false;\n        this.inputIsMajor = false;\n        this.currentTooltipPlacement = this.inputTooltipPlacement;\n    }\n\n    private click(event:Event):void\n    {\n        if(isNullOrUndefined(this.inputIsDisabled) || this.inputIsDisabled === false)\n        {\n            this.outputClicked.emit(event);\n        }\n    }\n\n    private setTooltipPlacement(event:MouseEvent):void\n    {\n        if(isNullOrUndefined(this.inputTooltipText))\n        {\n            return;\n        }\n\n        let minimalDistanceToWindowEdge:number = 100;\n\n        this.currentTooltipPlacement = this.inputTooltipPlacement;\n\n        if(window.innerWidth - event.clientX < minimalDistanceToWindowEdge)\n        {\n            this.currentTooltipPlacement = TerraPlacementEnum.LEFT;\n        }\n        else if(event.clientX < minimalDistanceToWindowEdge)\n        {\n            this.currentTooltipPlacement = TerraPlacementEnum.RIGHT;\n        }\n    }\n}\n"]}