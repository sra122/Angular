{"version":3,"sources":["app/components/category-picker/terra-category-picker.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,sCAMuB;AACvB,6CAAkD;AAClD,wCAAmD;AACnD,mGAA8F;AAI9F,6BAAyC;AAIzC,+GAA0G;AAC1G,gGAA4F;AAC5F,8BAGkB;AAgBlB;IAAkD,gDAA8B;IAe5E,sCAAmB,WAA8B,EAC9B,gBAA4D;QAD/E,YAGI,kBAAM,WAAW,EAAE,gBAAgB,CAAC,SAevC;QAlBkB,iBAAW,GAAX,WAAW,CAAmB;QAC9B,sBAAgB,GAAhB,gBAAgB,CAA4C;QAG3E,KAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,KAAI,CAAC,gBAAgB,GAAG;YACpB,EAAE,EAAgB,IAAI;YACtB,QAAQ,EAAU,IAAI;YACtB,MAAM,EAAY,IAAI;YACtB,SAAS,EAAS,IAAI;YACtB,IAAI,EAAc,EAAE;YACpB,OAAO,EAAW,EAAE;YACpB,gBAAgB,EAAE,EAAE;SACvB,CAAC;QACF,KAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,KAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,KAAI,CAAC,2BAA2B,GAAG,KAAK,CAAC;QACzC,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;;IAClC,CAAC;qCAjCQ,4BAA4B;IAmC9B,4DAAqB,GAA5B;QAEI,IAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,EAC1C;YACI,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SAC1C;QAED,IAAG,CAAC,wBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC,wBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,KAAK,CAAC,EACvI;YACI,IAAI,CAAC,2BAA2B,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC,CAAC;SAClH;IACL,CAAC;IAEM,+CAAQ,GAAf;QAEI,IAAG,wBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EACpC;YACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,8BAA8B,CAAC,CAAC;SAC/E;QACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACvC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAEM,gEAAyB,GAAhC;QAEI,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACjC,CAAC;IAED,sCAAsC;IAC/B,iDAAU,GAAjB,UAAkB,KAAS;QAA3B,iBA6BC;QA3BG,IAAG,CAAC,wBAAiB,CAAC,KAAK,CAAC,EAC5B;YACI,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,UAAC,IAAQ;gBAExE,IAAG,wBAAiB,CAAC,KAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,EAC/D;oBACI,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;iBAC7B;gBAED,IAAI,YAAY,GAAkE,KAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAE5H,IAAG,CAAC,wBAAiB,CAAC,YAAY,CAAC,EACnC;oBACI,KAAI,CAAC,gBAAgB,CAAC,mBAAmB,GAAG,YAAY,CAAC;oBACzD,KAAI,CAAC,YAAY,GAAG,KAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC;iBACtE;gBAED,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBAEnB,IAAG,KAAI,CAAC,gBAAgB,EACxB;oBACI,KAAI,CAAC,sBAAsB,CAAC,YAAY,CAAC,CAAC;oBAC1C,KAAI,CAAC,iBAAiB,EAAE,CAAC;oBACzB,KAAI,CAAC,gBAAgB,CAAC,KAAI,CAAC,KAAK,CAAC,CAAC;iBACrC;YACL,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAEM,mDAAY,GAAnB;QAEI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAE7B,IAAG,CAAC,wBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,EAChE;YACI,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC;YACnE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;SACjE;QACD,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;IACvC,CAAC;IAEM,4CAAK,GAAZ;QAEI,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,GAAG;YACxC,EAAE,EAAgB,IAAI;YACtB,QAAQ,EAAU,IAAI;YACtB,MAAM,EAAY,IAAI;YACtB,SAAS,EAAS,IAAI;YACtB,IAAI,EAAc,EAAE;YACpB,OAAO,EAAW,EAAE;YACpB,gBAAgB,EAAE,EAAE;SACvB,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEf,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAEO,6DAAsB,GAA9B,UAA+B,QAAuE;QAElG,IAAI,CAAC,gBAAgB,CAAC,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC;QACxC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;QACnD,IAAI,CAAC,gBAAgB,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;QAC/C,IAAI,CAAC,gBAAgB,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACrD,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC3C,IAAI,CAAC,gBAAgB,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;QACjD,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,CAAC;IACvE,CAAC;IAEO,8DAAuB,GAA/B,UAAgC,QAAwB;QAAxD,iBAGC;QADG,OAAO,cAA6C,OAAA,KAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,EAA5B,CAA4B,CAAC;IACrF,CAAC;IAEO,oDAAa,GAArB,UAAsB,QAAwB;QAA9C,iBAUC;QARG,IAAI,GAAG,GAA0C,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QAEzG,GAAG,CAAC,SAAS,CAAC,UAAC,IAA+B;YAE1C,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACf,CAAC;IAEM,+CAAQ,GAAf,UAAgB,IAAQ,EAAE,YAA4B;QAAtD,iBAsEC;QApEG,6EAA6E;QAC7E,IAAI,OAAO,GAAa,IAAI,CAAC,OAAO,CAAC;QAErC,uEAAuE;QACvE,IAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,EACzH;YACI,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;YACnF,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,EAAE,CAAC;SACnC;QAED,IAAG,CAAC,wBAAiB,CAAC,OAAO,CAAC,EAC9B;YACI,OAAO,CAAC,OAAO,CAAC,UAAC,KAA2B;gBAExC,IAAI,YAAY,GAAyB,KAAK,CAAC;gBAC/C,IAAI,cAAc,GAA+B,IAAI,CAAC;gBAEtD,oEAAoE;gBACpE,IAAG,wBAAiB,CAAC,KAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,IAAI,YAAY,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAC5G;oBACI,cAAc,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;oBAEzC,mCAAmC;oBACnC,IAAI,SAAS,GAAkE;wBAC3E,EAAE,EAAgB,YAAY,CAAC,EAAE;wBACjC,IAAI,EAAc,cAAc,CAAC,IAAI;wBACrC,SAAS,EAAS,IAAI;wBACtB,OAAO,EAAW,MAAM,GAAG,YAAY,CAAC,EAAE;wBAC1C,gBAAgB,EAAE,KAAK;wBACvB,KAAK,EAAa;4BACd,IAAI,EAAE,YAAY;yBACrB;qBACJ,CAAC;oBAEF,IAAI,UAAU,SAA+D,CAAC;oBAE9E,kGAAkG;oBAClG,IAAG,CAAC,wBAAiB,CAAC,YAAY,CAAC,gBAAgB,CAAC,EACpD;wBACI,UAAU,GAAG,KAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;qBAClF;oBAED,4FAA4F;oBAC5F,IAAG,wBAAiB,CAAC,UAAU,CAAC,EAChC;wBACI,IAAG,wBAAiB,CAAC,YAAY,CAAC,EAClC;4BACI,UAAU,GAAG,IAAI,CAAC;yBACrB;6BAED;4BACI,UAAU,GAAG,KAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;yBACjE;qBACJ;oBAED,wFAAwF;oBACxF,IAAG,YAAY,CAAC,WAAW,EAC3B;wBACI,SAAS,CAAC,UAAU,GAAG,KAAI,CAAC,uBAAuB,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;qBACrE;oBAED,8CAA8C;oBAC9C,KAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;iBACxD;YACL,CAAC,CAAC,CAAC;SACN;QACD,0BAA0B;QAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;IAC3C,CAAC;IAEO,4DAAqB,GAA7B,UAA8B,UAAyE;QAAvG,iBAoBC;QAlBG,IAAI,EAAE,GAAmB,IAAI,CAAC;QAE9B,IAAG,CAAC,wBAAiB,CAAC,UAAU,CAAC,EACjC;YACI,EAAE,GAAG,UAAU,CAAC,EAAE,CAAC;SACtB;QAED,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,UAAC,IAA+B;YAExF,IAAG,wBAAiB,CAAC,UAAU,CAAC,EAChC;gBACI,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aAC3B;iBAED;gBACI,KAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC;aACtC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IA9OD;QADC,YAAK,EAAE;kCACoB,mEAA8B;8EAAC;IAPlD,4BAA4B;QAdxC,gBAAS,CAAC;YACP,QAAQ,EAAG,uBAAuB;YAClC,QAAQ,EAAG,OAAO,CAAC,wCAAwC,CAAC;YAC5D,MAAM,EAAK,CAAC,OAAO,CAAC,wCAAwC,CAAC,CAAC;YAC9D,SAAS,EAAE;gBACP;oBACI,OAAO,EAAM,yBAAiB;oBAC9B,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,8BAA4B,EAA5B,CAA4B,CAAC;oBAC3D,KAAK,EAAQ,IAAI;iBACpB;gBACD,uBAAmB;gBACnB,8CAAoB;aACvB;SACJ,CAAC;yCAgBiC,iCAAkB;YACb,8CAAoB;OAhB/C,4BAA4B,CAsPxC;IAAD,mCAAC;;CAtPD,AAsPC,CAtPiD,mEAA8B,GAsP/E;AAtPY,oEAA4B","file":"terra-category-picker.component.js","sourcesContent":["import {\n    AfterContentChecked,\n    Component,\n    forwardRef,\n    Input,\n    OnInit\n} from '@angular/core';\nimport { TranslationService } from 'angular-l10n';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TerraCategoryPickerBaseService } from './service/terra-category-picker-base.service';\nimport { TerraNodeInterface } from '../tree/node-tree/data/terra-node.interface';\nimport { CategoryDataInterface } from './data/category-data.interface';\nimport { CategoryDetailDataInterface } from './data/category-detail-data.interface';\nimport { isNullOrUndefined } from 'util';\nimport { CategoryPagerDataInterface } from './data/category-pager-data.interface';\nimport { CategoryValueInterface } from './data/category-value.interface';\nimport { Observable } from 'rxjs/Observable';\nimport { TerraNestedDataPickerComponent } from '../nested-data-picker/terra-nested-data-picker.component';\nimport { NestedDataTreeConfig } from '../nested-data-picker/config/nested-data-tree.config';\nimport {\n    NestedDataInterface,\n    TerraNodeTreeConfig\n} from '../../..';\n\n@Component({\n    selector:  'terra-category-picker',\n    template:  require('./terra-category-picker.component.html'),\n    styles:    [require('./terra-category-picker.component.scss')],\n    providers: [\n        {\n            provide:     NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TerraCategoryPickerComponent),\n            multi:       true\n        },\n        TerraNodeTreeConfig,\n        NestedDataTreeConfig\n    ]\n})\nexport class TerraCategoryPickerComponent extends TerraNestedDataPickerComponent implements OnInit, AfterContentChecked\n{\n\n    /**\n     * @description Service, that is used to request the category data from the server\n     */\n    @Input()\n    public inputCategoryService:TerraCategoryPickerBaseService;\n\n    private completeCategory:CategoryValueInterface;\n\n    private categoryName:string;\n    private list:Array<TerraNodeInterface<NestedDataInterface<CategoryDataInterface>>>;\n    private isContainerCategorySelected:boolean;\n\n    constructor(public translation:TranslationService,\n                public nestedTreeConfig:NestedDataTreeConfig<CategoryDataInterface>)\n    {\n        super(translation, nestedTreeConfig);\n        this.value = 0;\n        this.completeCategory = {\n            id:               null,\n            isActive:         null,\n            isOpen:           null,\n            isVisible:        null,\n            name:             '',\n            tooltip:          '',\n            tooltipPlacement: '',\n        };\n        this.categoryName = '';\n        this.list = [];\n        this.isContainerCategorySelected = false;\n        this.isNotInitialCall = false;\n    }\n\n    public ngAfterContentChecked():void\n    {\n        if(this.nestedTreeConfig.list.length === 0)\n        {\n            this.nestedTreeConfig.list = this.list;\n        }\n\n        if(!isNullOrUndefined(this.nestedTreeConfig.currentSelectedNode) && !isNullOrUndefined(this.nestedTreeConfig.currentSelectedNode.value))\n        {\n            this.isContainerCategorySelected = (this.nestedTreeConfig.currentSelectedNode.value.data.type === 'container');\n        }\n    }\n\n    public ngOnInit():void\n    {\n        if(isNullOrUndefined(this.inputName))\n        {\n            this.inputName = this.translation.translate('terraCategoryPicker.category');\n        }\n        this.nestedTreeConfig.list = this.list;\n        this.getCategoriesByParent(null);\n    }\n\n    public getCompleteCategoryObject():CategoryValueInterface\n    {\n        return this.completeCategory;\n    }\n\n    // From ControlValueAccessor interface\n    public writeValue(value:any):void\n    {\n        if(!isNullOrUndefined(value))\n        {\n            this.inputCategoryService.requestCategoryDataById(value).subscribe((data:any) =>\n            {\n                if(isNullOrUndefined(this.nestedTreeConfig.findNodeById(value)))\n                {\n                    this.addNodes(data, null);\n                }\n\n                let nodeToSelect:TerraNodeInterface<NestedDataInterface<CategoryDataInterface>> = this.nestedTreeConfig.findNodeById(value);\n\n                if(!isNullOrUndefined(nodeToSelect))\n                {\n                    this.nestedTreeConfig.currentSelectedNode = nodeToSelect;\n                    this.categoryName = this.nestedTreeConfig.currentSelectedNode.name;\n                }\n\n                this.value = value;\n\n                if(this.isNotInitialCall)\n                {\n                    this.updateCompleteCategory(nodeToSelect);\n                    this.onTouchedCallback();\n                    this.onChangeCallback(this.value);\n                }\n            });\n        }\n    }\n\n    public onSelectNode():void\n    {\n        this.isNotInitialCall = true;\n\n        if(!isNullOrUndefined(this.nestedTreeConfig.currentSelectedNode))\n        {\n            this.categoryName = this.nestedTreeConfig.currentSelectedNode.name;\n            this.writeValue(this.nestedTreeConfig.currentSelectedNode.id);\n        }\n        this.toggleTree = !this.toggleTree;\n    }\n\n    public reset():void\n    {\n        this.nestedTreeConfig.currentSelectedNode = {\n            id:               null,\n            isActive:         null,\n            isOpen:           null,\n            isVisible:        null,\n            name:             '',\n            tooltip:          '',\n            tooltipPlacement: '',\n        };\n        this.categoryName = '';\n        this.value = 0;\n\n        this.onTouchedCallback();\n        this.onChangeCallback(this.value);\n    }\n\n    private updateCompleteCategory(category:TerraNodeInterface<NestedDataInterface<CategoryDataInterface>>):void\n    {\n        this.completeCategory.id = +category.id;\n        this.completeCategory.isActive = category.isActive;\n        this.completeCategory.isOpen = category.isOpen;\n        this.completeCategory.isVisible = category.isVisible;\n        this.completeCategory.name = category.name;\n        this.completeCategory.tooltip = category.tooltip;\n        this.completeCategory.tooltipPlacement = category.tooltipPlacement;\n    }\n\n    private getCategoriesByParentId(parentId:number | string):() => Observable<any>\n    {\n        return ():Observable<CategoryPagerDataInterface> => this.getCategories(parentId);\n    }\n\n    private getCategories(parentId:number | string):Observable<CategoryPagerDataInterface>\n    {\n        let obs:Observable<CategoryPagerDataInterface> = this.inputCategoryService.requestCategoryData(parentId);\n\n        obs.subscribe((data:CategoryPagerDataInterface) =>\n        {\n            this.addNodes(data, parentId);\n        });\n\n        return obs;\n    }\n\n    public addNodes(data:any, parentNodeId:number | string):void\n    {\n        // List of Categories which will be turned into Nodes to add to the node tree\n        let entries:Array<{}> = data.entries;\n\n        // Necessary for re-initializing of the Node Tree after data was loaded\n        if(this.nestedTreeConfig.list.length === 1 && this.nestedTreeConfig.list[0] === this.nestedTreeConfig.currentSelectedNode)\n        {\n            this.nestedTreeConfig.removeNodeById(this.nestedTreeConfig.currentSelectedNode.id);\n            this.nestedTreeConfig.list = [];\n        }\n\n        if(!isNullOrUndefined(entries))\n        {\n            entries.forEach((entry:CategoryDataInterface) =>\n            {\n                let categoryData:CategoryDataInterface = entry;\n                let categoryDetail:CategoryDetailDataInterface = null;\n\n                // If the node hasn't already been added the routine will be started\n                if(isNullOrUndefined(this.nestedTreeConfig.findNodeById(categoryData.id)) && categoryData.details.length > 0)\n                {\n                    categoryDetail = categoryData.details[0];\n\n                    // Create Node to add to tree later\n                    let childNode:TerraNodeInterface<NestedDataInterface<CategoryDataInterface>> = {\n                        id:               categoryData.id,\n                        name:             categoryDetail.name,\n                        isVisible:        true,\n                        tooltip:          'ID: ' + categoryData.id,\n                        tooltipPlacement: 'top',\n                        value:            {\n                            data: categoryData\n                        }\n                    };\n\n                    let parentNode:TerraNodeInterface<NestedDataInterface<CategoryDataInterface>>;\n\n                    // If the category has a parent, the parent node is created from the parentId in the category data\n                    if(!isNullOrUndefined(categoryData.parentCategoryId))\n                    {\n                        parentNode = this.nestedTreeConfig.findNodeById(categoryData.parentCategoryId);\n                    }\n\n                    // If the parentNode is still null it is tried to create the parent node out of the given id\n                    if(isNullOrUndefined(parentNode))\n                    {\n                        if(isNullOrUndefined(parentNodeId))\n                        {\n                            parentNode = null;\n                        }\n                        else\n                        {\n                            parentNode = this.nestedTreeConfig.findNodeById(parentNodeId);\n                        }\n                    }\n\n                    // If the category has children the lazy-loading method will be added to the parent node\n                    if(categoryData.hasChildren)\n                    {\n                        childNode.onLazyLoad = this.getCategoriesByParentId(childNode.id);\n                    }\n\n                    // The finished node is added to the node tree\n                    this.nestedTreeConfig.addNode(childNode, parentNode);\n                }\n            });\n        }\n        // Current List is updated\n        this.list = this.nestedTreeConfig.list;\n    }\n\n    private getCategoriesByParent(parentNode:TerraNodeInterface<NestedDataInterface<CategoryDataInterface>>):void\n    {\n        let id:number | string = null;\n\n        if(!isNullOrUndefined(parentNode))\n        {\n            id = parentNode.id;\n        }\n\n        this.inputCategoryService.requestCategoryData(id).subscribe((data:CategoryPagerDataInterface) =>\n        {\n            if(isNullOrUndefined(parentNode))\n            {\n                this.addNodes(data, id);\n            }\n            else\n            {\n                this.addNodes(data, parentNode.id);\n            }\n        });\n    }\n}\n"]}