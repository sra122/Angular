"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var terra_split_config_base_1 = require("../../split-view/data/terra-split-config-base");
var rxjs_1 = require("rxjs");
var core_1 = require("@angular/core");
/**
 * @author mscharf
 * @deprecated since `terra-navigator` is now deprecated
 */
var TerraNavigatorSplitViewConfig = /** @class */ (function (_super) {
    __extends(TerraNavigatorSplitViewConfig, _super);
    function TerraNavigatorSplitViewConfig() {
        var _this = _super.call(this) || this;
        _this.observableUpdateActiveItem = new rxjs_1.Observable(function (subscriber) {
            _this.subscriberUpdateActiveItem = subscriber;
        });
        _this.observableNodeClicked = new rxjs_1.Observable(function (subscriber) {
            _this.subscriberNodeClicked = subscriber;
        });
        return _this;
    }
    TerraNavigatorSplitViewConfig.prototype.openNextLevel = function (currentLevelItem) {
        if (this.subscriberNodeClicked) {
            this.subscriberNodeClicked.next(currentLevelItem);
        }
    };
    TerraNavigatorSplitViewConfig.prototype.updateActiveItem = function (nodes) {
        if (this.subscriberUpdateActiveItem) {
            this.subscriberUpdateActiveItem.next(nodes);
        }
    };
    TerraNavigatorSplitViewConfig = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], TerraNavigatorSplitViewConfig);
    return TerraNavigatorSplitViewConfig;
}(terra_split_config_base_1.TerraSplitConfigBase));
exports.TerraNavigatorSplitViewConfig = TerraNavigatorSplitViewConfig;

//# sourceMappingURL=terra-navigator-split-view.config.js.map
