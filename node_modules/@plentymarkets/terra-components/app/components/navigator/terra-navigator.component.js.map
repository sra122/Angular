{"version":3,"sources":["app/components/navigator/terra-navigator.component.ts"],"names":[],"mappings":"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","file":"terra-navigator.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport { TerraNavigatorSplitViewConfig } from './config/terra-navigator-split-view.config';\nimport { TerraNavigatorNodeInterface } from './data/terra-navigator-node.interface';\nimport { TerraButtonGroupModule } from './button-group/terra-button-group.module';\nimport { TerraNavigatorConfig } from './config/terra-navigator.config';\nimport {\n    isNull,\n    isNullOrUndefined,\n    isUndefined\n} from 'util';\nimport { TerraSuggestionBoxValueInterface } from '../forms/suggestion-box/data/terra-suggestion-box.interface';\nimport { Router } from '@angular/router';\nimport { TranslationService } from 'angular-l10n';\n\n/**\n * @author mscharf\n * @deprecated please use `terra-node-tree` instead\n */\n@Component({\n    selector: 'terra-navigator',\n    template: require('./terra-navigator.component.html'),\n    styles:   [\n        require('./terra-navigator.component.scss'),\n        require('./terra-navigator.component.glob.scss').toString()\n    ],\n})\nexport class TerraNavigatorComponent<D> implements OnInit, OnChanges\n{\n    @Input()\n    public inputNodes:Array<TerraNavigatorNodeInterface<D>>;\n\n    @Input()\n    public inputNavigatorService:TerraNavigatorConfig<D>;\n\n    @Input()\n    public inputModuleWidth:string;\n\n    @Input()\n    public inputFirstBreadcrumbName:string;\n\n    @Input()\n    public inputRouter:Router;\n\n    @Input()\n    public inputBaseRoute:string;\n\n    @Output()\n    public outputEndpointClicked:EventEmitter<TerraNavigatorNodeInterface<D>>;\n\n    @Output()\n    public outputNodeClicked:EventEmitter<TerraNavigatorNodeInterface<D>>;\n\n    private isInit:boolean;\n    private _searchNodeList:Array<TerraSuggestionBoxValueInterface>;\n\n    constructor(protected terraNavigatorSplitViewConfig:TerraNavigatorSplitViewConfig<D>, private translation:TranslationService)\n    {\n        this.isInit = false;\n        this.outputEndpointClicked = new EventEmitter();\n        this.outputNodeClicked = new EventEmitter();\n        this._searchNodeList = [];\n    }\n\n    public ngOnInit():void\n    {\n        if(isNullOrUndefined(this.inputModuleWidth))\n        {\n            this.inputModuleWidth = 'col-xs-12 col-md-12 col-lg-12';\n        }\n\n        if(!isNullOrUndefined(this.inputNodes))\n        {\n            this.initRootPaths(this.inputNodes, null);\n            this.refreshNodeVisibilities(this.inputNodes);\n\n            if(isNull(this.inputFirstBreadcrumbName) || this.inputFirstBreadcrumbName === '')\n            {\n                console.error('You have to define an initial breadcrumb!!!');\n            }\n\n            this.terraNavigatorSplitViewConfig.addModule({\n                module:                TerraButtonGroupModule.forRoot(),\n                instanceKey:           0,\n                defaultWidth:          this.inputModuleWidth,\n                hidden:                false,\n                name:                  this.inputFirstBreadcrumbName,\n                mainComponentName:     'TerraButtonGroupComponent',\n                parameter:             {\n                    nodes: this.inputNodes\n                }\n            });\n        }\n\n        this.terraNavigatorSplitViewConfig.observableNodeClicked.subscribe((item:TerraNavigatorNodeInterface<D>) =>\n        {\n            if(isNullOrUndefined(item.rootPath))\n            {\n                this.initRootPaths(this.inputNodes, null);\n            }\n\n            this.outputNodeClicked.emit(item);\n\n            if(!isNullOrUndefined(item.children))\n            {\n                this.terraNavigatorSplitViewConfig.modules[0].defaultWidth = 'col-xs-6 col-md-6 col-lg-6';\n\n                this.terraNavigatorSplitViewConfig\n                    .addModule({\n                        module:                TerraButtonGroupModule.forRoot(),\n                        instanceKey:           item.rootPath.length,\n                        defaultWidth:          'col-xs-6 col-md-6 col-lg-6',\n                        hidden:                false,\n                        name:                  item.nodeName,\n                        mainComponentName:     'TerraButtonGroupComponent',\n                        parameter:             {\n                            nodes: item.children\n                        }\n                    });\n            }\n            else\n            {\n                while(this.terraNavigatorSplitViewConfig.modules.length > item.rootPath.length)\n                {\n                    this.terraNavigatorSplitViewConfig.modules.pop();\n                }\n\n                this.outputEndpointClicked.emit(item);\n            }\n        });\n\n        this.inputNavigatorService.observableNewNodeByRootPath.subscribe((item:TerraNavigatorNodeInterface<D>) =>\n        {\n            this.addNodeAt(this.inputNodes, item.rootPath, -1, item);\n\n            this.initRootPaths(this.inputNodes, null);\n            this.refreshNodeVisibilities(this.inputNodes);\n\n            this.addSearchNode(item);\n        });\n\n        this.inputNavigatorService.observableNewNodesByRoute.subscribe((items:Array<TerraNavigatorNodeInterface<D>>) =>\n        {\n            this.addNodesRecursive(items);\n            this.refreshNodeVisibilities(this.inputNodes);\n\n            items.forEach((item:TerraNavigatorNodeInterface<D>):void =>\n            {\n                this.addSearchNode(item);\n            });\n        });\n\n        this.updateSearchNodes();\n\n        this.isInit = true;\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if(this.isInit === true && changes['inputNodes'])\n        {\n            this.terraNavigatorSplitViewConfig.modules = [];\n\n            this.initRootPaths(changes['inputNodes'].currentValue, null);\n            this.refreshNodeVisibilities(changes['inputNodes'].currentValue);\n\n            this.updateSearchNodes();\n\n            this.terraNavigatorSplitViewConfig.addModule({\n                module:                TerraButtonGroupModule.forRoot(),\n                instanceKey:           0,\n                defaultWidth:          this.inputModuleWidth,\n                hidden:                false,\n                name:                  this.inputFirstBreadcrumbName,\n                mainComponentName:     'TerraButtonGroupComponent',\n                parameter:             {\n                    nodes: changes['inputNodes'].currentValue\n                }\n            });\n        }\n    }\n\n    private initRootPaths(data:Array<TerraNavigatorNodeInterface<D>>, rootIndex:Array<number>):Array<TerraNavigatorNodeInterface<D>>\n    {\n        for(let i:number = 0; i < data.length; i++)\n        {\n            data[i].rootPath = [];\n\n            if(!isNullOrUndefined(rootIndex))\n            {\n                rootIndex.forEach((item:number):void =>\n                {\n                    data[i].rootPath.push(item);\n                });\n            }\n\n            data[i].rootPath.push(i);\n\n            if(!isNullOrUndefined(data[i].children) && data[i].children.length > 0)\n            {\n                this.initRootPaths(data[i].children, data[i].rootPath);\n            }\n        }\n\n        return data;\n    }\n\n    private addNodesRecursive(nodes:Array<TerraNavigatorNodeInterface<D>>):void\n    {\n        nodes.forEach((item:TerraNavigatorNodeInterface<D>) =>\n        {\n            let routeArray:Array<string> = item.route.split('/');\n            let routeIndex:number = -1;\n            let result:Array<number> = [];\n\n            this.findRootPath(routeArray, routeIndex, this.inputNodes, result);\n\n            let newNode:TerraNavigatorNodeInterface<D> = {\n                nodeName:  item.nodeName,\n                nodeIcon:  item.nodeIcon,\n                route:     routeArray[routeArray.length - 1],\n                value:     item.value,\n                rootPath:  [],\n                children:  null,\n                isVisible: item.isVisible,\n                isActive:  item.isActive\n            };\n\n            this.addNodeAt(this.inputNodes, result, -1, newNode);\n\n            this.initRootPaths(this.inputNodes, null);\n\n            if(!isNullOrUndefined(item.children))\n            {\n                this.addNodesRecursive(item.children);\n            }\n        });\n    }\n\n    private findRootPath(routeArray:Array<string>, routeIndex:number, data:Array<TerraNavigatorNodeInterface<D>>, result:Array<number>):void\n    {\n        routeIndex++;\n\n        data.forEach((item:TerraNavigatorNodeInterface<D>):void =>\n        {\n            if(item.route === routeArray[routeIndex])\n            {\n                result.push(item.rootPath[item.rootPath.length - 1]);\n\n                if(!isNull(item.children))\n                {\n                    this.findRootPath(routeArray, routeIndex, item.children, result);\n                }\n            }\n        });\n    }\n\n    private addNodeAt(data:Array<TerraNavigatorNodeInterface<D>>, rootIndex:Array<number>, position:number,\n                      newNode:TerraNavigatorNodeInterface<D>):void\n    {\n        position++;\n\n        if(position === rootIndex.length)\n        {\n            let newRootPath:Array<number> = newNode.rootPath;\n\n            newRootPath.push(data.length);\n\n            data.push({\n                nodeName:  newNode.nodeName,\n                nodeIcon:  newNode.nodeIcon,\n                route:     newNode.route,\n                value:     newNode.value,\n                rootPath:  newRootPath,\n                children:  newNode.children,\n                isVisible: newNode.isVisible,\n                isActive:  newNode.isActive\n            });\n        }\n        else if(!isNullOrUndefined(data[rootIndex[position]].children))\n        {\n            this.addNodeAt(data[rootIndex[position]].children, rootIndex, position, newNode);\n        }\n        else\n        {\n            data[rootIndex[position]].children = [];\n            this.addNodeAt(data[rootIndex[position]].children, rootIndex, position, newNode);\n        }\n    }\n\n    private refreshNodeVisibilities(nodes:Array<TerraNavigatorNodeInterface<D>>):void\n    {\n        // go through the node list\n        nodes.forEach((node:TerraNavigatorNodeInterface<D>):void =>\n            {\n                // check if there are children or if node is a leaf\n                if(!isNullOrUndefined(node.children) && node.children.length > 0)\n                {\n                    // check descendants visibility\n                    if(this.getTotalVisibleChildren(node) > 0)\n                    {\n                        this.refreshNodeVisibilities(node.children);\n                    }\n                    // there are no visible descendants -> hide node\n                    else\n                    {\n                        node.isVisible = false;\n                    }\n                }\n            }\n        );\n    }\n\n    private getTotalVisibleChildren(rootNode:TerraNavigatorNodeInterface<D>):number\n    {\n        // initialize counter\n        let childrenCount:number = 0;\n\n        // go deep into the children\n        if(!isNullOrUndefined(rootNode.children))\n        {\n            rootNode.children.forEach((node:TerraNavigatorNodeInterface<D>):void =>\n                {\n                    if(node.isVisible || isUndefined(node.isVisible))\n                    {\n                        childrenCount++;\n                    }\n\n                    // recursive\n                    childrenCount += this.getTotalVisibleChildren(node);\n                }\n            );\n        }\n\n        // return count of children\n        return childrenCount;\n    }\n\n    private updateSearchNodes():void\n    {\n        // reset node list\n        this._searchNodeList = [];\n\n        // convert tree model into flat hierarchy\n        this.inputNodes.forEach((node:TerraNavigatorNodeInterface<D>) =>\n        {\n            this.addSearchNode(node);\n        });\n    }\n\n    private addSearchNode(node:TerraNavigatorNodeInterface<D>):void\n    {\n        // check for null pointer\n        if(isNullOrUndefined(node))\n        {\n            return;\n        }\n\n        // seek trough its children, if existing\n        if(!isNullOrUndefined(node.children) && node.children.length > 0)\n        {\n            node.children.forEach((child:TerraNavigatorNodeInterface<D>) =>\n            {\n                this.addSearchNode(child);\n            });\n        }\n        // only add nodes without children <=> leaves\n        else\n        {\n            // check if node is visible\n            if(isNullOrUndefined(node.isVisible) || node.isVisible) // TODO: rename in hidden!\n            {\n                // add node to the flat list\n                this._searchNodeList.push(\n                    {\n                        value:   node,\n                        caption: this.getNodePath(node)\n                    }\n                );\n            }\n        }\n    }\n\n    private openSelectedNode(suggest:TerraSuggestionBoxValueInterface):void\n    {\n        this.inputRouter.navigateByUrl(this.inputBaseRoute + this.getNodeRoute(suggest.value as TerraNavigatorNodeInterface<D>));\n    }\n\n    private getNodeRoute(node:TerraNavigatorNodeInterface<D>):string\n    {\n        let route:string = '';\n        let nodes:Array<TerraNavigatorNodeInterface<D>> = this.inputNodes;\n\n        if(!isNullOrUndefined(node.rootPath))\n        {\n            node.rootPath.forEach((root:number):void =>\n            {\n                route = route + '/' + nodes[root].route;\n                nodes = nodes[root].children;\n            });\n        }\n\n        return route;\n    }\n\n    private getNodePath(node:TerraNavigatorNodeInterface<D>):string\n    {\n        let route:string = '';\n        let nodes:Array<TerraNavigatorNodeInterface<D>> = this.inputNodes;\n\n        if(!isNullOrUndefined(node.rootPath))\n        {\n            node.rootPath.forEach((root:number):void =>\n            {\n                let translatedNodeName:string = this.translation.translate(nodes[root].nodeName);\n                if(route === '')\n                {\n                    route = translatedNodeName;\n                }\n                else\n                {\n                    route += ' » ' + translatedNodeName;\n                }\n                nodes = nodes[root].children;\n            });\n        }\n\n        return route;\n    }\n\n    public get searchNodeList():Array<TerraSuggestionBoxValueInterface>\n    {\n        return this._searchNodeList;\n    }\n}\n"]}