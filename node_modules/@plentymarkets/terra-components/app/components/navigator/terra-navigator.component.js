"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_navigator_split_view_config_1 = require("./config/terra-navigator-split-view.config");
var terra_button_group_module_1 = require("./button-group/terra-button-group.module");
var terra_navigator_config_1 = require("./config/terra-navigator.config");
var util_1 = require("util");
var router_1 = require("@angular/router");
var angular_l10n_1 = require("angular-l10n");
/**
 * @author mscharf
 * @deprecated please use `terra-node-tree` instead
 */
var TerraNavigatorComponent = /** @class */ (function () {
    function TerraNavigatorComponent(terraNavigatorSplitViewConfig, translation) {
        this.terraNavigatorSplitViewConfig = terraNavigatorSplitViewConfig;
        this.translation = translation;
        this.isInit = false;
        this.outputEndpointClicked = new core_1.EventEmitter();
        this.outputNodeClicked = new core_1.EventEmitter();
        this._searchNodeList = [];
    }
    TerraNavigatorComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (util_1.isNullOrUndefined(this.inputModuleWidth)) {
            this.inputModuleWidth = 'col-xs-12 col-md-12 col-lg-12';
        }
        if (!util_1.isNullOrUndefined(this.inputNodes)) {
            this.initRootPaths(this.inputNodes, null);
            this.refreshNodeVisibilities(this.inputNodes);
            if (util_1.isNull(this.inputFirstBreadcrumbName) || this.inputFirstBreadcrumbName === '') {
                console.error('You have to define an initial breadcrumb!!!');
            }
            this.terraNavigatorSplitViewConfig.addModule({
                module: terra_button_group_module_1.TerraButtonGroupModule.forRoot(),
                instanceKey: 0,
                defaultWidth: this.inputModuleWidth,
                hidden: false,
                name: this.inputFirstBreadcrumbName,
                mainComponentName: 'TerraButtonGroupComponent',
                parameter: {
                    nodes: this.inputNodes
                }
            });
        }
        this.terraNavigatorSplitViewConfig.observableNodeClicked.subscribe(function (item) {
            if (util_1.isNullOrUndefined(item.rootPath)) {
                _this.initRootPaths(_this.inputNodes, null);
            }
            _this.outputNodeClicked.emit(item);
            if (!util_1.isNullOrUndefined(item.children)) {
                _this.terraNavigatorSplitViewConfig.modules[0].defaultWidth = 'col-xs-6 col-md-6 col-lg-6';
                _this.terraNavigatorSplitViewConfig
                    .addModule({
                    module: terra_button_group_module_1.TerraButtonGroupModule.forRoot(),
                    instanceKey: item.rootPath.length,
                    defaultWidth: 'col-xs-6 col-md-6 col-lg-6',
                    hidden: false,
                    name: item.nodeName,
                    mainComponentName: 'TerraButtonGroupComponent',
                    parameter: {
                        nodes: item.children
                    }
                });
            }
            else {
                while (_this.terraNavigatorSplitViewConfig.modules.length > item.rootPath.length) {
                    _this.terraNavigatorSplitViewConfig.modules.pop();
                }
                _this.outputEndpointClicked.emit(item);
            }
        });
        this.inputNavigatorService.observableNewNodeByRootPath.subscribe(function (item) {
            _this.addNodeAt(_this.inputNodes, item.rootPath, -1, item);
            _this.initRootPaths(_this.inputNodes, null);
            _this.refreshNodeVisibilities(_this.inputNodes);
            _this.addSearchNode(item);
        });
        this.inputNavigatorService.observableNewNodesByRoute.subscribe(function (items) {
            _this.addNodesRecursive(items);
            _this.refreshNodeVisibilities(_this.inputNodes);
            items.forEach(function (item) {
                _this.addSearchNode(item);
            });
        });
        this.updateSearchNodes();
        this.isInit = true;
    };
    TerraNavigatorComponent.prototype.ngOnChanges = function (changes) {
        if (this.isInit === true && changes['inputNodes']) {
            this.terraNavigatorSplitViewConfig.modules = [];
            this.initRootPaths(changes['inputNodes'].currentValue, null);
            this.refreshNodeVisibilities(changes['inputNodes'].currentValue);
            this.updateSearchNodes();
            this.terraNavigatorSplitViewConfig.addModule({
                module: terra_button_group_module_1.TerraButtonGroupModule.forRoot(),
                instanceKey: 0,
                defaultWidth: this.inputModuleWidth,
                hidden: false,
                name: this.inputFirstBreadcrumbName,
                mainComponentName: 'TerraButtonGroupComponent',
                parameter: {
                    nodes: changes['inputNodes'].currentValue
                }
            });
        }
    };
    TerraNavigatorComponent.prototype.initRootPaths = function (data, rootIndex) {
        var _loop_1 = function (i) {
            data[i].rootPath = [];
            if (!util_1.isNullOrUndefined(rootIndex)) {
                rootIndex.forEach(function (item) {
                    data[i].rootPath.push(item);
                });
            }
            data[i].rootPath.push(i);
            if (!util_1.isNullOrUndefined(data[i].children) && data[i].children.length > 0) {
                this_1.initRootPaths(data[i].children, data[i].rootPath);
            }
        };
        var this_1 = this;
        for (var i = 0; i < data.length; i++) {
            _loop_1(i);
        }
        return data;
    };
    TerraNavigatorComponent.prototype.addNodesRecursive = function (nodes) {
        var _this = this;
        nodes.forEach(function (item) {
            var routeArray = item.route.split('/');
            var routeIndex = -1;
            var result = [];
            _this.findRootPath(routeArray, routeIndex, _this.inputNodes, result);
            var newNode = {
                nodeName: item.nodeName,
                nodeIcon: item.nodeIcon,
                route: routeArray[routeArray.length - 1],
                value: item.value,
                rootPath: [],
                children: null,
                isVisible: item.isVisible,
                isActive: item.isActive
            };
            _this.addNodeAt(_this.inputNodes, result, -1, newNode);
            _this.initRootPaths(_this.inputNodes, null);
            if (!util_1.isNullOrUndefined(item.children)) {
                _this.addNodesRecursive(item.children);
            }
        });
    };
    TerraNavigatorComponent.prototype.findRootPath = function (routeArray, routeIndex, data, result) {
        var _this = this;
        routeIndex++;
        data.forEach(function (item) {
            if (item.route === routeArray[routeIndex]) {
                result.push(item.rootPath[item.rootPath.length - 1]);
                if (!util_1.isNull(item.children)) {
                    _this.findRootPath(routeArray, routeIndex, item.children, result);
                }
            }
        });
    };
    TerraNavigatorComponent.prototype.addNodeAt = function (data, rootIndex, position, newNode) {
        position++;
        if (position === rootIndex.length) {
            var newRootPath = newNode.rootPath;
            newRootPath.push(data.length);
            data.push({
                nodeName: newNode.nodeName,
                nodeIcon: newNode.nodeIcon,
                route: newNode.route,
                value: newNode.value,
                rootPath: newRootPath,
                children: newNode.children,
                isVisible: newNode.isVisible,
                isActive: newNode.isActive
            });
        }
        else if (!util_1.isNullOrUndefined(data[rootIndex[position]].children)) {
            this.addNodeAt(data[rootIndex[position]].children, rootIndex, position, newNode);
        }
        else {
            data[rootIndex[position]].children = [];
            this.addNodeAt(data[rootIndex[position]].children, rootIndex, position, newNode);
        }
    };
    TerraNavigatorComponent.prototype.refreshNodeVisibilities = function (nodes) {
        var _this = this;
        // go through the node list
        nodes.forEach(function (node) {
            // check if there are children or if node is a leaf
            if (!util_1.isNullOrUndefined(node.children) && node.children.length > 0) {
                // check descendants visibility
                if (_this.getTotalVisibleChildren(node) > 0) {
                    _this.refreshNodeVisibilities(node.children);
                }
                // there are no visible descendants -> hide node
                else {
                    node.isVisible = false;
                }
            }
        });
    };
    TerraNavigatorComponent.prototype.getTotalVisibleChildren = function (rootNode) {
        var _this = this;
        // initialize counter
        var childrenCount = 0;
        // go deep into the children
        if (!util_1.isNullOrUndefined(rootNode.children)) {
            rootNode.children.forEach(function (node) {
                if (node.isVisible || util_1.isUndefined(node.isVisible)) {
                    childrenCount++;
                }
                // recursive
                childrenCount += _this.getTotalVisibleChildren(node);
            });
        }
        // return count of children
        return childrenCount;
    };
    TerraNavigatorComponent.prototype.updateSearchNodes = function () {
        var _this = this;
        // reset node list
        this._searchNodeList = [];
        // convert tree model into flat hierarchy
        this.inputNodes.forEach(function (node) {
            _this.addSearchNode(node);
        });
    };
    TerraNavigatorComponent.prototype.addSearchNode = function (node) {
        var _this = this;
        // check for null pointer
        if (util_1.isNullOrUndefined(node)) {
            return;
        }
        // seek trough its children, if existing
        if (!util_1.isNullOrUndefined(node.children) && node.children.length > 0) {
            node.children.forEach(function (child) {
                _this.addSearchNode(child);
            });
        }
        // only add nodes without children <=> leaves
        else {
            // check if node is visible
            if (util_1.isNullOrUndefined(node.isVisible) || node.isVisible) // TODO: rename in hidden!
             {
                // add node to the flat list
                this._searchNodeList.push({
                    value: node,
                    caption: this.getNodePath(node)
                });
            }
        }
    };
    TerraNavigatorComponent.prototype.openSelectedNode = function (suggest) {
        this.inputRouter.navigateByUrl(this.inputBaseRoute + this.getNodeRoute(suggest.value));
    };
    TerraNavigatorComponent.prototype.getNodeRoute = function (node) {
        var route = '';
        var nodes = this.inputNodes;
        if (!util_1.isNullOrUndefined(node.rootPath)) {
            node.rootPath.forEach(function (root) {
                route = route + '/' + nodes[root].route;
                nodes = nodes[root].children;
            });
        }
        return route;
    };
    TerraNavigatorComponent.prototype.getNodePath = function (node) {
        var _this = this;
        var route = '';
        var nodes = this.inputNodes;
        if (!util_1.isNullOrUndefined(node.rootPath)) {
            node.rootPath.forEach(function (root) {
                var translatedNodeName = _this.translation.translate(nodes[root].nodeName);
                if (route === '') {
                    route = translatedNodeName;
                }
                else {
                    route += ' » ' + translatedNodeName;
                }
                nodes = nodes[root].children;
            });
        }
        return route;
    };
    Object.defineProperty(TerraNavigatorComponent.prototype, "searchNodeList", {
        get: function () {
            return this._searchNodeList;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraNavigatorComponent.prototype, "inputNodes", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", terra_navigator_config_1.TerraNavigatorConfig)
    ], TerraNavigatorComponent.prototype, "inputNavigatorService", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraNavigatorComponent.prototype, "inputModuleWidth", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraNavigatorComponent.prototype, "inputFirstBreadcrumbName", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", router_1.Router)
    ], TerraNavigatorComponent.prototype, "inputRouter", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraNavigatorComponent.prototype, "inputBaseRoute", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraNavigatorComponent.prototype, "outputEndpointClicked", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraNavigatorComponent.prototype, "outputNodeClicked", void 0);
    TerraNavigatorComponent = __decorate([
        core_1.Component({
            selector: 'terra-navigator',
            template: require('./terra-navigator.component.html'),
            styles: [
                require('./terra-navigator.component.scss'),
                require('./terra-navigator.component.glob.scss').toString()
            ],
        }),
        __metadata("design:paramtypes", [terra_navigator_split_view_config_1.TerraNavigatorSplitViewConfig, angular_l10n_1.TranslationService])
    ], TerraNavigatorComponent);
    return TerraNavigatorComponent;
}());
exports.TerraNavigatorComponent = TerraNavigatorComponent;

//# sourceMappingURL=terra-navigator.component.js.map
