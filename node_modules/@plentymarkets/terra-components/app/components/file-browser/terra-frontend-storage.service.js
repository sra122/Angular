"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_upload_item_1 = require("./model/terra-upload-item");
var terra_upload_queue_1 = require("./model/terra-upload-queue");
var http_1 = require("@angular/http");
var terra_storage_object_list_1 = require("./model/terra-storage-object-list");
var Observable_1 = require("rxjs/Observable");
var s3_storage_object_interface_1 = require("./model/s3-storage-object.interface");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var angular_l10n_1 = require("angular-l10n");
var util_1 = require("util");
var terra_loading_spinner_service_1 = require("../loading-spinner/service/terra-loading-spinner.service");
var terra_base_metadata_storage_interface_1 = require("./terra-base-metadata-storage.interface");
var TerraFrontendStorageService = /** @class */ (function (_super) {
    __extends(TerraFrontendStorageService, _super);
    function TerraFrontendStorageService(terraLoadingSpinnerService, http, translation) {
        var _this = _super.call(this, terraLoadingSpinnerService, http, '/rest/storage/frontend/file') || this;
        _this.isImagePreviewEnabled = true;
        _this.queue = new terra_upload_queue_1.TerraUploadQueue('/rest/storage/frontend/file');
        _this.storageInitialized = false;
        _this.storageListSubject = new BehaviorSubject_1.BehaviorSubject(null);
        _this.metadataCache = {};
        _this.name = translation.translate('terraFileBrowser.myFiles');
        return _this;
    }
    Object.defineProperty(TerraFrontendStorageService.prototype, "_storageList", {
        get: function () {
            return this.storageListSubject.getValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraFrontendStorageService.prototype, "uploadProgress", {
        get: function () {
            return this.queue.progress;
        },
        enumerable: true,
        configurable: true
    });
    TerraFrontendStorageService.prototype.getStorageList = function () {
        if (!this.storageInitialized) {
            this.initStorageList();
        }
        return this.storageListSubject;
    };
    TerraFrontendStorageService.prototype.createDirectory = function (path) {
        var _this = this;
        if (path.charAt(0) === '/') {
            path = path.substr(1);
        }
        if (path.charAt(path.length - 1) !== '/') {
            path += '/';
        }
        path = this.prepareKey(path);
        this.setAuthorization();
        var request = this.mapRequest(this.http.post(this.url + '?key=' + path, null, {
            headers: this.headers
        }));
        request.subscribe(function () {
            _this.storageListSubject.next(_this._storageList.insertObject(s3_storage_object_interface_1.createS3StorageObject(path)));
        });
        return request;
    };
    TerraFrontendStorageService.prototype.uploadFiles = function (files, path) {
        if (path === void 0) { path = '/'; }
        if (util_1.isNullOrUndefined(files) || files.length <= 0) {
            return [];
        }
        var uploadItems = [];
        /* tslint:disable:prefer-for-of */
        for (var i = 0; i < files.length; i++) {
            uploadItems.push(this.uploadFile(files[i], path));
        }
        /* tslint:enable:prefer-for-of */
        return uploadItems;
    };
    TerraFrontendStorageService.prototype.uploadFile = function (file, path) {
        var _this = this;
        if (path === void 0) { path = '/'; }
        if (util_1.isNullOrUndefined(file)) {
            return terra_upload_item_1.TerraUploadItem.DONE;
        }
        var item = new terra_upload_item_1.TerraUploadItem(file, path, this);
        item.beforeUpload(function () {
            _this.storageListSubject.next(_this._storageList.insertObject(s3_storage_object_interface_1.createS3StorageObject(item.pathname)));
        });
        item.onSuccess(function (response) {
            var s3Data = JSON.parse(response);
            _this.storageListSubject.next(_this._storageList.insertObject({
                eTag: s3Data.eTag,
                key: s3Data.key,
                lastModified: (new Date()).toISOString(),
                size: file.size,
                publicUrl: s3Data.publicUrl,
                storageClass: 'STANDARD'
            }));
        });
        item.onError(function () {
            _this._storageList.root.removeChild(item.pathname);
            _this.storageListSubject.next(_this._storageList);
        });
        item.onCancel(function () {
            _this._storageList.root.removeChild(item.pathname);
            _this.storageListSubject.next(_this._storageList);
        });
        this.queue.add(item);
        this.queue.startUpload();
        return item;
    };
    TerraFrontendStorageService.prototype.getMetadata = function (key) {
        var _this = this;
        if (this.metadataCache.hasOwnProperty(key)) {
            return Observable_1.Observable.from([this.metadataCache[key]]);
        }
        this.setAuthorization();
        var request = this.mapRequest(this.http.get(this.url + '/metadata?key=' + key, {
            headers: this.headers
        }));
        request.subscribe(function (metadata) {
            _this.metadataCache[key] = metadata;
        }, function () {
            delete _this.metadataCache[key];
        });
        return request;
    };
    TerraFrontendStorageService.prototype.updateMetadata = function (key, metadata) {
        var _this = this;
        this.setAuthorization();
        var request = this.mapRequest(this.http.post(this.url + '/metadata', {
            key: key,
            metadata: metadata
        }, {
            headers: this.headers
        }));
        request.subscribe(function () {
            _this.metadataCache[key] = metadata;
        }, function () {
            delete _this.metadataCache[key];
        });
        return request;
    };
    TerraFrontendStorageService.prototype.deleteFiles = function (keyList) {
        var _this = this;
        this.setAuthorization();
        var request = this.mapRequest(this.http.delete('/rest/storage/frontend/files?' + keyList.map(function (key) { return 'keyList[]=' + key; }).join('&'), {
            headers: this.headers
        }));
        request.subscribe(function () {
            keyList.forEach(function (key) { return _this._storageList.root.removeChild(key); });
            _this.storageListSubject.next(_this._storageList);
        }, function () {
            _this.storageInitialized = false;
            _this.storageListSubject.next(null);
        });
        return request;
    };
    TerraFrontendStorageService.prototype.initStorageList = function (continuationToken) {
        var _this = this;
        this.storageInitialized = true;
        var url = '/rest/storage/frontend/files';
        if (!util_1.isNullOrUndefined(continuationToken)) {
            url += '?continuationToken=' + encodeURIComponent(continuationToken);
        }
        this.setAuthorization();
        this.mapRequest(this.http.get(url, { headers: this.headers })).subscribe(function (results) {
            var storageList = _this.storageListSubject.getValue() || new terra_storage_object_list_1.TerraStorageObjectList();
            storageList.insertObjects(results.objects);
            _this.storageListSubject.next(storageList);
            if (results.isTruncated && results.nextContinuationToken.length > 0) {
                _this.initStorageList(results.nextContinuationToken);
            }
        }, function (err) {
            console.error(err);
            _this.storageInitialized = false;
            _this.storageListSubject.next(null);
        });
    };
    TerraFrontendStorageService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [terra_loading_spinner_service_1.TerraLoadingSpinnerService, http_1.Http, angular_l10n_1.TranslationService])
    ], TerraFrontendStorageService);
    return TerraFrontendStorageService;
}(terra_base_metadata_storage_interface_1.TerraBaseMetadataStorageService));
exports.TerraFrontendStorageService = TerraFrontendStorageService;

//# sourceMappingURL=terra-frontend-storage.service.js.map
