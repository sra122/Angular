"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var s3_storage_object_interface_1 = require("./s3-storage-object.interface");
var util_1 = require("util");
var path_helper_1 = require("../../../helpers/path.helper");
var fileType_helper_1 = require("../../../helpers/fileType.helper");
var TerraStorageObject = /** @class */ (function () {
    function TerraStorageObject(s3Object, parent) {
        this._children = [];
        this.s3Object = s3Object;
        this._parent = parent;
    }
    Object.defineProperty(TerraStorageObject.prototype, "eTag", {
        get: function () {
            return this.s3Object.eTag;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "key", {
        get: function () {
            return this.s3Object.key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "publicUrl", {
        get: function () {
            return this.s3Object.publicUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "previewUrl", {
        get: function () {
            return this.s3Object.previewUrl || this.s3Object.publicUrl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "lastModified", {
        get: function () {
            return new Date(this.s3Object.lastModified);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "size", {
        get: function () {
            return parseInt(this.s3Object.size + '', 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "sizeString", {
        get: function () {
            if (isNaN(this.size)) {
                return '0B';
            }
            return path_helper_1.PathHelper.sizeString(this.size);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "name", {
        get: function () {
            return path_helper_1.PathHelper.basename(this.s3Object.key);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "icon", {
        get: function () {
            if (this.isDirectory) {
                return 'icon-folder';
            }
            return fileType_helper_1.FileTypeHelper.mapIconClass(this.name);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "isDirectory", {
        get: function () {
            return path_helper_1.PathHelper.isDirectory(this.s3Object.key);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "isFile", {
        get: function () {
            return path_helper_1.PathHelper.isFile(this.s3Object.key);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "hasChildren", {
        get: function () {
            return this.isFile ? false : this._children.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "children", {
        get: function () {
            if (this.isFile) {
                return [];
            }
            return this._children.sort(function (childA, childB) {
                if (childA.name > childB.name) {
                    return -1;
                }
                if (childA.name < childB.name) {
                    return 1;
                }
                return 0;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraStorageObject.prototype, "fileCount", {
        get: function () {
            if (this.isFile) {
                return 1;
            }
            else {
                return this.children
                    .map(function (child) {
                    return child.fileCount;
                })
                    .reduce(function (sum, current) {
                    return sum + current;
                }, 0);
            }
        },
        enumerable: true,
        configurable: true
    });
    TerraStorageObject.prototype.addChild = function (s3object, paths) {
        if (this.isFile) {
            console.error('Cannot add child object to file-like object.');
            return;
        }
        paths = paths || s3object.key.split(path_helper_1.PathHelper.DELIMITER);
        while (paths.length > 0 && paths[0].length <= 0) {
            paths.shift();
        }
        var lastIdx = paths.length - 1;
        while (lastIdx > 0 && paths[lastIdx].length <= 0) {
            paths.pop();
            lastIdx--;
        }
        if (paths.length === 1) {
            var object_1 = new TerraStorageObject(s3object, this);
            if (this.hasChild(object_1.name)) {
                var idx = this._children.findIndex(function (child) {
                    return child.name === object_1.name;
                });
                this._children[idx] = object_1;
            }
            else {
                this._children.push(object_1);
            }
        }
        else {
            var nextPath = paths.shift();
            var child = this.getChild(nextPath);
            if (!child) {
                var s3Object = s3_storage_object_interface_1.createS3StorageObject(path_helper_1.PathHelper.join(this.key, nextPath) + '/');
                child = new TerraStorageObject(s3Object, this);
                this.children.push(child);
            }
            child.addChild(s3object, paths);
        }
    };
    TerraStorageObject.prototype.removeChild = function (key) {
        var paths = this.splitKeyIntoPaths(key);
        var nextPath = paths.shift();
        var child = this.getChild(nextPath);
        if (child) {
            if (paths.length > 0) {
                child.removeChild(paths.join('/'));
            }
            else {
                var idx = this._children.indexOf(child);
                this._children.splice(idx, 1);
            }
        }
    };
    TerraStorageObject.prototype.getChild = function (name) {
        return this._children.find(function (child) {
            return child.name === name;
        });
    };
    TerraStorageObject.prototype.hasChild = function (name) {
        return this._children.some(function (child) {
            return child.name === name;
        });
    };
    TerraStorageObject.prototype.find = function (key) {
        if (util_1.isNullOrUndefined(key)) {
            return null;
        }
        var paths = this.splitKeyIntoPaths(key);
        var nextPath = paths.shift();
        var child = this.getChild(nextPath);
        if (!util_1.isNullOrUndefined(child)) {
            if (paths.length > 0) {
                return child.find(paths.join('/'));
            }
            return child;
        }
        return null;
    };
    TerraStorageObject.prototype.splitKeyIntoPaths = function (key) {
        return key.split('/').filter(function (part) { return part.length > 0; });
    };
    return TerraStorageObject;
}());
exports.TerraStorageObject = TerraStorageObject;

//# sourceMappingURL=terra-storage-object.js.map
