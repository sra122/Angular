"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Observable_1 = require("rxjs/Observable");
var util_1 = require("util");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var TerraUploadQueue = /** @class */ (function () {
    function TerraUploadQueue(uploadUrl, uploadMethod) {
        if (uploadMethod === void 0) { uploadMethod = 'POST'; }
        var _this = this;
        this.uploadUrl = uploadUrl;
        this.uploadMethod = uploadMethod;
        this.status = new BehaviorSubject_1.BehaviorSubject(null);
        this.items = [];
        this.size = 0;
        this.progressListeners = [];
        this.progressValue = -1;
        this.progress = new Observable_1.Observable(function (observer) {
            _this.progressListeners.push(observer);
            observer.next(_this.progressValue);
            return function () {
                var idx = _this.progressListeners.indexOf(observer);
                if (idx >= 0) {
                    _this.progressListeners.splice(idx, 1);
                }
            };
        });
    }
    TerraUploadQueue.prototype.add = function (item) {
        this.items.push(item);
        this.size += item.file.size;
        if (this.inProgress) {
            this.onProgress();
        }
        return this;
    };
    TerraUploadQueue.prototype.remove = function (item) {
        var idx = this.items.indexOf(item);
        this.items.splice(idx, 1);
        this.size -= item.file.size;
        if (this.inProgress) {
            this.onProgress();
        }
        return this;
    };
    TerraUploadQueue.prototype.startUpload = function () {
        var _this = this;
        if (this.items.length <= 0) {
            return Promise.resolve();
        }
        if (this.inProgress) {
            return this.inProgress;
        }
        this.inProgress = this.uploadAllItems()
            .then(function () {
            _this.inProgress = null;
            _this.items = [];
            _this.size = 0;
        });
    };
    TerraUploadQueue.prototype.uploadAllItems = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var nextItem = _this.items.find(function (item) { return !item.uploaded; });
            if (util_1.isNullOrUndefined(nextItem)) {
                // all items are uploaded
                _this.items = [];
                _this.status.next(null);
                resolve(null);
            }
            else {
                _this.uploadItem(nextItem).then(function () {
                    _this.uploadAllItems().then(resolve).catch(reject);
                }).catch(reject);
            }
        });
    };
    TerraUploadQueue.prototype.uploadItem = function (item) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var xhr = item.xhr = new XMLHttpRequest();
            item.emit('beforeUpload', item.file);
            xhr.upload.onprogress = function (event) {
                var progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);
                item.emit('onProgress', progress);
                _this.onProgress();
            };
            xhr.onload = function () {
                item.emit('onSuccess', xhr.response, xhr.status, _this.parseHeaders(xhr.getAllResponseHeaders()));
                item.uploaded = true;
                _this.onProgress();
                resolve(null);
            };
            xhr.onerror = function () {
                item.emit('onError', xhr.response, xhr.status, _this.parseHeaders(xhr.getAllResponseHeaders()));
                item.uploaded = true;
                _this.onProgress();
                reject(xhr.response);
            };
            xhr.onabort = function () {
                item.emit('onCancel', xhr.response, xhr.status, _this.parseHeaders(xhr.getAllResponseHeaders()));
                item.uploaded = true;
                _this.onProgress();
                reject(xhr.response);
            };
            xhr.open(_this.uploadMethod, _this.getUploadUrl(item.pathname), true);
            if (localStorage.getItem('accessToken')) {
                xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.getItem('accessToken'));
            }
            xhr.send(item.file);
        });
    };
    TerraUploadQueue.prototype.onProgress = function () {
        var filesUploaded = this.items.filter(function (item) { return item.uploaded; });
        var sizeUploaded = filesUploaded
            .map(function (item) { return item.file.size; })
            .reduce(function (prev, current) { return prev + current; }, 0);
        var progress = 100 - Math.round(((this.size - sizeUploaded) / this.size) * 100);
        this.progressListeners.forEach(function (listener) {
            listener.next(progress || 0);
        });
        this.status.next({
            filesTotal: this.items.length,
            filesUploaded: filesUploaded.length,
            sizeTotal: this.size,
            sizeUploaded: sizeUploaded,
            progress: progress
        });
    };
    TerraUploadQueue.prototype.parseHeaders = function (headers) {
        var parsed = {};
        headers.split('\n').forEach(function (header) {
            var pivot = header.indexOf(':');
            var key = header.substr(0, pivot).trim().toLowerCase();
            var value = header.substr(pivot + 1).trim();
            if (!util_1.isNullOrUndefined(key)) {
                parsed[key] = parsed[key] ? parsed[key] + ', ' + value : value;
            }
        });
        return parsed;
    };
    TerraUploadQueue.prototype.getUploadUrl = function (storageKey) {
        if (typeof this.uploadUrl === 'function') {
            return this.uploadUrl(storageKey);
        }
        else {
            return this.uploadUrl + '?key=' + storageKey;
        }
    };
    return TerraUploadQueue;
}());
exports.TerraUploadQueue = TerraUploadQueue;

//# sourceMappingURL=terra-upload-queue.js.map
