{"version":3,"sources":["app/components/file-browser/model/terra-upload-queue.ts"],"names":[],"mappings":"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","file":"terra-upload-queue.js","sourcesContent":["import { TerraUploadItem } from './terra-upload-item';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { isNullOrUndefined } from 'util';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { TerraUploadProgress } from './terra-upload-progress';\n\nexport type UploadQueueUrlFactory = (storageKey:string) => string;\n\nexport class TerraUploadQueue\n{\n    public progress:Observable<number>;\n    public inProgress:Promise<void>;\n    public status:BehaviorSubject<TerraUploadProgress> = new BehaviorSubject<TerraUploadProgress>(null);\n\n    private items:Array<TerraUploadItem> = [];\n    private size:number = 0;\n\n    private progressListeners:Array<Observer<number>> = [];\n    private progressValue:number = -1;\n\n    constructor(private uploadUrl:string | UploadQueueUrlFactory, private uploadMethod:'GET' | 'POST' | 'DELETE' | 'PUT' = 'POST')\n    {\n        this.progress = new Observable((observer:Observer<number>):Function =>\n        {\n            this.progressListeners.push(observer);\n            observer.next(this.progressValue);\n\n            return ():void =>\n            {\n                let idx:number = this.progressListeners.indexOf(observer);\n                if(idx >= 0)\n                {\n                    this.progressListeners.splice(idx, 1);\n                }\n            };\n        });\n    }\n\n    public add(item:TerraUploadItem):TerraUploadQueue\n    {\n        this.items.push(item);\n        this.size += item.file.size;\n        if(this.inProgress)\n        {\n            this.onProgress();\n        }\n        return this;\n    }\n\n    public remove(item:TerraUploadItem):TerraUploadQueue\n    {\n        let idx:number = this.items.indexOf(item);\n        this.items.splice(idx, 1);\n        this.size -= item.file.size;\n        if(this.inProgress)\n        {\n            this.onProgress();\n        }\n        return this;\n    }\n\n    public startUpload():Promise<void>\n    {\n        if(this.items.length <= 0)\n        {\n            return Promise.resolve();\n        }\n\n        if(this.inProgress)\n        {\n            return this.inProgress;\n        }\n\n        this.inProgress = this.uploadAllItems()\n                              .then(() =>\n                              {\n                                  this.inProgress = null;\n                                  this.items = [];\n                                  this.size = 0;\n                              });\n    }\n\n    private uploadAllItems():Promise<void>\n    {\n        return new Promise((resolve:(resp:void) => void, reject:(err:any) => void):void =>\n        {\n            let nextItem:TerraUploadItem = this.items.find((item:TerraUploadItem) => !item.uploaded);\n\n            if(isNullOrUndefined(nextItem))\n            {\n                // all items are uploaded\n                this.items = [];\n                this.status.next(null);\n                resolve(null);\n            }\n            else\n            {\n                this.uploadItem(nextItem).then(() =>\n                {\n                    this.uploadAllItems().then(resolve).catch(reject);\n                }).catch(reject);\n            }\n        });\n    }\n\n    private uploadItem(item:TerraUploadItem):Promise<void>\n    {\n        return new Promise((resolve:(resp:void) => void, reject:(err:any) => void):void =>\n        {\n            let xhr:XMLHttpRequest = item.xhr = new XMLHttpRequest();\n\n            item.emit('beforeUpload', item.file);\n\n            xhr.upload.onprogress = (event:ProgressEvent):void =>\n            {\n                let progress:number = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);\n                item.emit('onProgress', progress);\n                this.onProgress();\n            };\n\n            xhr.onload = ():void =>\n            {\n                item.emit('onSuccess', xhr.response, xhr.status, this.parseHeaders(xhr.getAllResponseHeaders()));\n                item.uploaded = true;\n                this.onProgress();\n                resolve(null);\n            };\n\n            xhr.onerror = ():void =>\n            {\n                item.emit('onError', xhr.response, xhr.status, this.parseHeaders(xhr.getAllResponseHeaders()));\n                item.uploaded = true;\n                this.onProgress();\n                reject(xhr.response);\n            };\n\n            xhr.onabort = ():void =>\n            {\n                item.emit(\n                    'onCancel',\n                    xhr.response,\n                    xhr.status,\n                    this.parseHeaders(xhr.getAllResponseHeaders())\n                );\n                item.uploaded = true;\n                this.onProgress();\n                reject(xhr.response);\n            };\n\n            xhr.open(\n                this.uploadMethod,\n                this.getUploadUrl(item.pathname),\n                true\n            );\n\n            if(localStorage.getItem('accessToken'))\n            {\n                xhr.setRequestHeader('Authorization', 'Bearer ' + localStorage.getItem('accessToken'));\n            }\n\n            xhr.send(item.file);\n        });\n\n    }\n\n    private onProgress():void\n    {\n        let filesUploaded:Array<TerraUploadItem> = this.items.filter( (item:TerraUploadItem) => item.uploaded);\n        let sizeUploaded:number = filesUploaded\n            .map( (item:TerraUploadItem) => item.file.size)\n            .reduce((prev:number, current:number) => prev + current, 0);\n\n        let progress:number = 100 - Math.round(((this.size - sizeUploaded) / this.size) * 100);\n\n        this.progressListeners.forEach((listener:Observer<number>) =>\n        {\n            listener.next(progress || 0);\n        });\n\n\n        this.status.next({\n            filesTotal: this.items.length,\n            filesUploaded: filesUploaded.length,\n            sizeTotal: this.size,\n            sizeUploaded: sizeUploaded,\n            progress: progress\n        });\n    }\n\n    private parseHeaders(headers:string):{ [key:string]:string }\n    {\n        let parsed:{ [key:string]:string } = {};\n        headers.split('\\n').forEach((header:string) =>\n        {\n            let pivot:number = header.indexOf(':');\n            let key:string = header.substr(0, pivot).trim().toLowerCase();\n            let value:string = header.substr(pivot + 1).trim();\n            if(!isNullOrUndefined(key))\n            {\n                parsed[key] = parsed[key] ? parsed[key] + ', ' + value : value;\n            }\n        });\n        return parsed;\n    }\n\n    private getUploadUrl(storageKey:string):string\n    {\n        if(typeof this.uploadUrl === 'function')\n        {\n            return this.uploadUrl(storageKey);\n        }\n        else\n        {\n            return this.uploadUrl + '?key=' + storageKey;\n        }\n    }\n}\n"]}