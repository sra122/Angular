{"version":3,"sources":["app/components/split-view/multi/injectables/terra-multi-split-view.config.ts"],"names":[],"mappings":"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","file":"terra-multi-split-view.config.js","sourcesContent":["import {\n    EventEmitter,\n    Injectable,\n    Injector\n} from '@angular/core';\nimport { TerraMultiSplitViewInterface } from '../interfaces/terra-multi-split-view.interface';\nimport { isNullOrUndefined } from 'util';\nimport {\n    ActivatedRoute,\n    ActivatedRouteSnapshot,\n    ResolveData,\n    Route,\n    Router,\n    RouterStateSnapshot,\n    Routes\n} from '@angular/router';\nimport { TerraDynamicLoadedComponentInputInterface } from '../../../dynamic-module-loader/data/terra-dynamic-loaded-component-input.interface';\nimport { TranslationService } from 'angular-l10n';\nimport { TerraMultiSplitViewComponent } from '../terra-multi-split-view.component';\nimport { ResolvedDataInterface } from '../interfaces/resolved-data.interface';\nimport { ResolverListItemInterface } from '../interfaces/resolve-list-item.interface';\nimport { TerraResolvedDataHelper } from '../helpers/terra-resolved-data.helper';\nimport { TerraMultiSplitViewHelper } from '../helpers/terra-multi-split-view.helper';\n\n@Injectable()\nexport class TerraMultiSplitViewConfig\n{\n    public currentSelectedView:TerraMultiSplitViewInterface;\n    public routingConfig:Routes = [];\n\n    public deleteViewEventEmitter:EventEmitter<TerraMultiSplitViewInterface> = new EventEmitter<TerraMultiSplitViewInterface>();\n    public selectBreadcrumbEventEmitter:EventEmitter<TerraMultiSplitViewInterface> = new EventEmitter<TerraMultiSplitViewInterface>();\n\n    private views:Array<TerraMultiSplitViewInterface> = [];\n    private routerStateSnapshot:RouterStateSnapshot;\n    private activatedRouteSnapshot:ActivatedRouteSnapshot;\n\n    private _splitViewComponent:TerraMultiSplitViewComponent;\n\n    constructor(private router?:Router,\n                private injector?:Injector,\n                private translation?:TranslationService,\n                private activatedRoute?:ActivatedRoute)\n    {\n\n    }\n\n    public addView(view:TerraMultiSplitViewInterface, parent?:TerraMultiSplitViewInterface):void\n    {\n        if(view.parameter)\n        {\n            console.warn(\n                'Property \\'parameter\\' is deprecated. It will be removed in one of the upcoming releases. Please use \\'inputs\\' instead.');\n        }\n\n        // TODO: setTimeout can be removed, if it is guaranteed that change detection is fired when adding a new view\n        setTimeout(() =>\n            {\n                if(isNullOrUndefined(parent))\n                {\n                    if(isNullOrUndefined(this.currentSelectedView))\n                    {\n                        this.currentSelectedView = view;\n                        this.views.push(view);\n                    }\n                    else\n                    {\n                        parent = this.currentSelectedView;\n                    }\n                }\n\n                if(parent)\n                {\n                    view.parent = parent;\n\n                    if(isNullOrUndefined(parent.children))\n                    {\n                        parent.children = [view];\n                    }\n                    else\n                    {\n                        let viewExist:boolean = false;\n\n                        for(let child of parent.children)\n                        {\n                            // TODO very ugly way, maybe add an option to use an id?\n                            if(TerraMultiSplitViewHelper.isSameView(view, child))\n                            {\n                                view = child;\n                                viewExist = true;\n                                break;\n                            }\n                        }\n\n                        if(!viewExist)\n                        {\n                            parent.children.push(view);\n                        }\n                    }\n                }\n\n                // synchronize modules array with input config\n                this._splitViewComponent.addToModulesIfNotExist(view);\n\n                // set the selected view\n                this._splitViewComponent.setSelectedView(view);\n            }\n        );\n    }\n\n    public removeView(view:TerraMultiSplitViewInterface):void\n    {\n        if(isNullOrUndefined(view))\n        {\n            return;\n        }\n\n        // update modules array\n        let viewToSelect:TerraMultiSplitViewInterface = this._splitViewComponent.removeFromModules(view);\n\n        // select the parent view\n        this._splitViewComponent.handleBreadCrumbClick(viewToSelect);\n\n        if(this.removeViewAndChildren(view))\n        {\n            // notify user\n            this.deleteViewEventEmitter.next(view);\n        }\n    }\n\n    private removeViewAndChildren(view:TerraMultiSplitViewInterface):boolean\n    {\n        if(view.children && view.children.length > 0)\n        {\n            view.children.forEach((child:TerraMultiSplitViewInterface) =>\n            {\n                this.removeViewAndChildren(child);\n            });\n        }\n\n        let parent:TerraMultiSplitViewInterface = view.parent;\n        let viewIndex:number = parent.children.findIndex((elem:TerraMultiSplitViewInterface) => elem === view);\n\n        if(viewIndex >= 0)\n        {\n            parent.children.splice(viewIndex, 1);\n            return true;\n        }\n        return false;\n    }\n\n    public resizeView(view:TerraMultiSplitViewInterface, width:string):void\n    {\n        view.defaultWidth = width;\n\n        this._splitViewComponent.resizeViewAndModule(view);\n    }\n\n    public setSelectedView(view:TerraMultiSplitViewInterface):void\n    {\n        this._splitViewComponent.setSelectedView(view);\n    }\n\n    public reset():void\n    {\n        this.views = [];\n        this.currentSelectedView = null;\n        this.selectBreadcrumbEventEmitter.unsubscribe();\n        this.selectBreadcrumbEventEmitter = new EventEmitter<TerraMultiSplitViewInterface>();\n    }\n\n    public navigateToViewByUrl(url:string):void\n    {\n        if(!this._splitViewComponent.inputHasRouting)\n        {\n            console.warn('Routing is deactivated. If you want to use routing for the split-view set the components input \"inputHasRouting\"');\n            return;\n        }\n\n        // check if the needed dependencies are injected\n        if(isNullOrUndefined(this.router))\n        {\n            console.error(\n                '_router is not defined.. Please inject the Router in your config-instance to make routing functionality available');\n            return;\n        }\n        if(isNullOrUndefined(this.injector))\n        {\n            console.error(\n                '_injector is not defined. Please inject the Injector in your config-instance to make routing functionality available');\n            return;\n        }\n        if(isNullOrUndefined(this.translation))\n        {\n            console.error(\n                '_translation is not defined. Please inject the TranslationService in your config-instance to make routing functionality available');\n            return;\n        }\n\n        this.routerStateSnapshot = this.router.routerState.snapshot;\n        this.activatedRouteSnapshot = this.activatedRoute.snapshot;\n        let remainingUrl:string = url.replace(this._splitViewComponent.componentRoute, '');\n        let redirectUrl:string = this.urlIsRedirected(remainingUrl);\n\n        if(redirectUrl)\n        {\n            if(redirectUrl === 'invalidRoute')\n            {\n                this.router.navigate(['/error-page'],\n                    {\n                        queryParams: {\n                            errorCode: 'invalidRoute',\n                            errorUrl:  url\n                        }\n                    });\n                return;\n            }\n            this.router.navigateByUrl(url + redirectUrl);\n            return;\n        }\n\n        this.getResolveDataForUrl(remainingUrl, this.routingConfig);\n    }\n\n    private addOrSelectViewsByUrl(url:string, resolveData:Array<ResolvedDataInterface>):void\n    {\n        let views:Array<TerraMultiSplitViewInterface> = this.views;\n        let routeConfig:Routes = this.routingConfig;\n\n        let urlParts:Array<string> = url.split('/');\n\n        let viewToSelect:TerraMultiSplitViewInterface;\n        let partialRoute:string = '';\n\n        urlParts.forEach((urlPart:string) =>\n        {\n            if(urlPart.length > 0)\n            {\n                partialRoute += '/' + urlPart;\n            }\n            let route:Route = routeConfig.find((r:Route) => this.isMatchingRoute(r, urlPart));\n            if(route)\n            {\n                if(route.data && route.data.mainComponentName)\n                {\n                    let view:TerraMultiSplitViewInterface = views.find(\n                        (v:TerraMultiSplitViewInterface) => this.viewForRoutePartExists(v, route, urlPart)\n                    );\n\n                    if(isNullOrUndefined(view))\n                    {\n                        this.addView(this.createNewViewByUrlPart(route, urlPart, partialRoute, resolveData), viewToSelect);\n                        viewToSelect = null;\n                    }\n                    else\n                    {\n                        viewToSelect = view;\n                        if(view.children && view.children.length > 0)\n                        {\n                            views = view.children;\n                        }\n                        else\n                        {\n                            views = [];\n                        }\n                        // TODO: reset inputs with new resolve data??\n                    }\n                }\n                if(route.children && route.children.length > 0)\n                {\n                    routeConfig = route.children;\n                }\n                else\n                {\n                    routeConfig = [];\n                }\n            }\n            else\n            {\n                console.error('Route not found');\n            }\n        });\n\n        if(viewToSelect)\n        {\n            this.setSelectedView(viewToSelect);\n        }\n    }\n\n    private viewForRoutePartExists(view:TerraMultiSplitViewInterface, route:Route, viewId:string):boolean\n    {\n        return view.mainComponentName === route.data.mainComponentName && isNullOrUndefined(view.id)\n               || view.mainComponentName === route.data.mainComponentName && route.path.startsWith(':') && view.id && view.id === viewId;\n    }\n\n    private createNewViewByUrlPart(route:Route, urlPart:string, partialUrl:string,\n                                   resolveData:Array<ResolvedDataInterface>):TerraMultiSplitViewInterface\n    {\n        let viewName:string;\n        if(typeof route.data.name === 'function')\n        {\n            let res:ResolvedDataInterface = resolveData.find((data:ResolvedDataInterface) => data.urlPart === urlPart);\n            if(!isNullOrUndefined(res))\n            {\n                let obj:ResolveData = {};\n                res.resolves.forEach((resolve:TerraDynamicLoadedComponentInputInterface) =>\n                {\n                    obj[resolve.name] = resolve.value;\n                });\n                viewName = this.translation.translate(route.data.name(obj), {id: urlPart});\n            }\n        }\n        else\n        {\n            viewName = this.translation.translate(route.data.name, {id: urlPart});\n        }\n        let newView:TerraMultiSplitViewInterface =\n            {\n                module:            route.data.module,\n                name:              viewName,\n                defaultWidth:      route.data.defaultWidth,\n                focusedWidth:      route.data.focusedWidth ? route.data.focusedWidth : undefined,\n                mainComponentName: route.data.mainComponentName,\n                id:                route.path && route.path.startsWith(':') ? urlPart : undefined,\n                url:               partialUrl\n            };\n        if(route.resolve)\n        {\n            let res:ResolvedDataInterface = resolveData.find((data:ResolvedDataInterface) => data.urlPart === urlPart);\n            if(res)\n            {\n                newView.inputs = res.resolves;\n            }\n        }\n        return newView;\n    }\n\n    private urlIsRedirected(url:string):string\n    {\n        let routeConfig:Routes = this.routingConfig;\n        let views:Array<TerraMultiSplitViewInterface> = this.views;\n        let urlParts:Array<string> = url.split('/');\n        let route:Route;\n        let isInvalidRoute:boolean = false;\n        let view:TerraMultiSplitViewInterface;\n        urlParts.forEach((urlPart:string) =>\n        {\n            route = routeConfig.find((r:Route) => this.isMatchingRoute(r, urlPart));\n            if(route)\n            {\n                if(route.data && route.data.mainComponentName)\n                {\n                    view = views.find(\n                        (v:TerraMultiSplitViewInterface) => this.viewForRoutePartExists(v, route, urlPart)\n                    );\n\n                    if(view)\n                    {\n                        if(view.children && view.children.length > 0)\n                        {\n                            views = view.children;\n                        }\n                        else\n                        {\n                            views = [];\n                        }\n                    }\n                }\n\n                if(route.children && route.children.length > 0)\n                {\n                    routeConfig = route.children;\n                }\n                else\n                {\n                    routeConfig = [];\n                }\n            }\n            else\n            {\n                isInvalidRoute = true;\n                return;\n            }\n        });\n        if(isInvalidRoute)\n        {\n            return 'invalidRoute';\n        }\n        if(!view) // do not redirect if the view is already added\n        {\n            let rou:Route = routeConfig.find((r:Route) => r.path === '' && !isNullOrUndefined(r.redirectTo));\n            if(rou)\n            {\n                return '/' + rou.redirectTo;\n            }\n        }\n        return null;\n    }\n\n    private getResolveDataForUrl(url:string, routeConfig:Routes):void\n    {\n        let resolverList:Array<ResolverListItemInterface> = this.getResolversForUrl(url, routeConfig);\n        let data:Array<ResolvedDataInterface> = [];\n        this.activatedRouteSnapshot.params = {};\n        this.resolveInSequence(url, resolverList, data);\n    }\n\n    private getResolversForUrl(url:string, routeConfig:Routes):Array<ResolverListItemInterface>\n    {\n        let urlParts:Array<string> = url.split('/');\n\n        let resolverList:Array<ResolverListItemInterface> = [];\n        urlParts.forEach((urlPart:string) =>\n        {\n            let route:Route = routeConfig.find((r:Route) => this.isMatchingRoute(r, urlPart));\n            if(route)\n            {\n                if(route.resolve)\n                {\n                    Object.keys(route.resolve).forEach((elem:string) =>\n                    {\n                        let resolver:ResolverListItemInterface = {\n                            urlPart:   urlPart,\n                            routePath: route.path,\n                            resolver:  {\n                                key:     elem,\n                                service: this.injector.get(route.resolve[elem])\n                            }\n                        };\n\n                        if(isNullOrUndefined(resolverList))\n                        {\n                            resolverList = [resolver];\n                        }\n                        else\n                        {\n                            resolverList.push(resolver);\n                        }\n                    });\n                }\n\n                if(route.children && route.children.length > 0)\n                {\n                    routeConfig = route.children;\n                }\n            }\n        });\n\n        return resolverList;\n    }\n\n    private resolveInSequence(url:string,\n                              resolverList:Array<ResolverListItemInterface>,\n                              data:Array<ResolvedDataInterface>,\n                              resolvedResolvers?:Array<ResolverListItemInterface>):void\n    {\n        if(isNullOrUndefined(resolvedResolvers))\n        {\n            resolvedResolvers = [];\n        }\n\n        if(isNullOrUndefined(resolverList) || resolverList.length === 0)\n        {\n            // all data resolved go to view addition/selection\n            this.addOrSelectViewsByUrl(url, data);\n            return;\n        }\n\n        let resolverListItem:ResolverListItemInterface = resolverList.shift();\n        if(!isNullOrUndefined(resolverListItem.routePath) && resolverListItem.routePath.startsWith(':'))\n        {\n            this.activatedRouteSnapshot.params[resolverListItem.routePath.substring(1)] = resolverListItem.urlPart; // pass route params\n        }\n\n        let resolvedResolver:ResolverListItemInterface = resolvedResolvers.find((res:ResolverListItemInterface) =>\n            Object.getPrototypeOf(res.resolver.service) === Object.getPrototypeOf(resolverListItem.resolver.service)\n        );\n        if(!isNullOrUndefined(resolvedResolver)) // resolve resolvers only once for a route\n        {\n            let inputData:TerraDynamicLoadedComponentInputInterface =\n                TerraResolvedDataHelper.findInputDataByResolveKey(resolvedResolver.urlPart, resolvedResolver.resolver.key, data);\n            data = TerraResolvedDataHelper.addResolvedData(resolverListItem, inputData.value, data);\n\n            // go to the next resolver\n            this.resolveInSequence(url, resolverList, data, resolvedResolvers);\n        }\n        else\n        {\n            resolverListItem.resolver.service.resolve(this.activatedRouteSnapshot, this.routerStateSnapshot).subscribe((res:any) =>\n            {\n                resolvedResolvers.push(resolverListItem);\n\n                data = TerraResolvedDataHelper.addResolvedData(resolverListItem, res, data);\n\n                // go to the next resolver\n                this.resolveInSequence(url, resolverList, data, resolvedResolvers);\n            });\n        }\n\n    }\n\n    public set splitViewComponent(value:TerraMultiSplitViewComponent)\n    {\n        this._splitViewComponent = value;\n    }\n\n    private isMatchingRoute(route:Route, routePath:string):boolean\n    {\n        return !isNullOrUndefined(route) &&\n               (!isNullOrUndefined(route.path) && (route.path === routePath || route.path.startsWith(':')) ||\n                (route === this.routingConfig[0] && isNullOrUndefined(route.path)));\n    }\n\n    public get baseRoute():string\n    {\n        return this._splitViewComponent.componentRoute;\n    }\n}\n"]}