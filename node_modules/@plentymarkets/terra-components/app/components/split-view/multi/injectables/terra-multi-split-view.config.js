"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var util_1 = require("util");
var router_1 = require("@angular/router");
var angular_l10n_1 = require("angular-l10n");
var terra_resolved_data_helper_1 = require("../helpers/terra-resolved-data.helper");
var terra_multi_split_view_helper_1 = require("../helpers/terra-multi-split-view.helper");
var TerraMultiSplitViewConfig = /** @class */ (function () {
    function TerraMultiSplitViewConfig(router, injector, translation, activatedRoute) {
        this.router = router;
        this.injector = injector;
        this.translation = translation;
        this.activatedRoute = activatedRoute;
        this.routingConfig = [];
        this.deleteViewEventEmitter = new core_1.EventEmitter();
        this.selectBreadcrumbEventEmitter = new core_1.EventEmitter();
        this.views = [];
    }
    TerraMultiSplitViewConfig.prototype.addView = function (view, parent) {
        var _this = this;
        if (view.parameter) {
            console.warn('Property \'parameter\' is deprecated. It will be removed in one of the upcoming releases. Please use \'inputs\' instead.');
        }
        // TODO: setTimeout can be removed, if it is guaranteed that change detection is fired when adding a new view
        setTimeout(function () {
            if (util_1.isNullOrUndefined(parent)) {
                if (util_1.isNullOrUndefined(_this.currentSelectedView)) {
                    _this.currentSelectedView = view;
                    _this.views.push(view);
                }
                else {
                    parent = _this.currentSelectedView;
                }
            }
            if (parent) {
                view.parent = parent;
                if (util_1.isNullOrUndefined(parent.children)) {
                    parent.children = [view];
                }
                else {
                    var viewExist = false;
                    for (var _i = 0, _a = parent.children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        // TODO very ugly way, maybe add an option to use an id?
                        if (terra_multi_split_view_helper_1.TerraMultiSplitViewHelper.isSameView(view, child)) {
                            view = child;
                            viewExist = true;
                            break;
                        }
                    }
                    if (!viewExist) {
                        parent.children.push(view);
                    }
                }
            }
            // synchronize modules array with input config
            _this._splitViewComponent.addToModulesIfNotExist(view);
            // set the selected view
            _this._splitViewComponent.setSelectedView(view);
        });
    };
    TerraMultiSplitViewConfig.prototype.removeView = function (view) {
        if (util_1.isNullOrUndefined(view)) {
            return;
        }
        // update modules array
        var viewToSelect = this._splitViewComponent.removeFromModules(view);
        // select the parent view
        this._splitViewComponent.handleBreadCrumbClick(viewToSelect);
        if (this.removeViewAndChildren(view)) {
            // notify user
            this.deleteViewEventEmitter.next(view);
        }
    };
    TerraMultiSplitViewConfig.prototype.removeViewAndChildren = function (view) {
        var _this = this;
        if (view.children && view.children.length > 0) {
            view.children.forEach(function (child) {
                _this.removeViewAndChildren(child);
            });
        }
        var parent = view.parent;
        var viewIndex = parent.children.findIndex(function (elem) { return elem === view; });
        if (viewIndex >= 0) {
            parent.children.splice(viewIndex, 1);
            return true;
        }
        return false;
    };
    TerraMultiSplitViewConfig.prototype.resizeView = function (view, width) {
        view.defaultWidth = width;
        this._splitViewComponent.resizeViewAndModule(view);
    };
    TerraMultiSplitViewConfig.prototype.setSelectedView = function (view) {
        this._splitViewComponent.setSelectedView(view);
    };
    TerraMultiSplitViewConfig.prototype.reset = function () {
        this.views = [];
        this.currentSelectedView = null;
        this.selectBreadcrumbEventEmitter.unsubscribe();
        this.selectBreadcrumbEventEmitter = new core_1.EventEmitter();
    };
    TerraMultiSplitViewConfig.prototype.navigateToViewByUrl = function (url) {
        if (!this._splitViewComponent.inputHasRouting) {
            console.warn('Routing is deactivated. If you want to use routing for the split-view set the components input "inputHasRouting"');
            return;
        }
        // check if the needed dependencies are injected
        if (util_1.isNullOrUndefined(this.router)) {
            console.error('_router is not defined.. Please inject the Router in your config-instance to make routing functionality available');
            return;
        }
        if (util_1.isNullOrUndefined(this.injector)) {
            console.error('_injector is not defined. Please inject the Injector in your config-instance to make routing functionality available');
            return;
        }
        if (util_1.isNullOrUndefined(this.translation)) {
            console.error('_translation is not defined. Please inject the TranslationService in your config-instance to make routing functionality available');
            return;
        }
        this.routerStateSnapshot = this.router.routerState.snapshot;
        this.activatedRouteSnapshot = this.activatedRoute.snapshot;
        var remainingUrl = url.replace(this._splitViewComponent.componentRoute, '');
        var redirectUrl = this.urlIsRedirected(remainingUrl);
        if (redirectUrl) {
            if (redirectUrl === 'invalidRoute') {
                this.router.navigate(['/error-page'], {
                    queryParams: {
                        errorCode: 'invalidRoute',
                        errorUrl: url
                    }
                });
                return;
            }
            this.router.navigateByUrl(url + redirectUrl);
            return;
        }
        this.getResolveDataForUrl(remainingUrl, this.routingConfig);
    };
    TerraMultiSplitViewConfig.prototype.addOrSelectViewsByUrl = function (url, resolveData) {
        var _this = this;
        var views = this.views;
        var routeConfig = this.routingConfig;
        var urlParts = url.split('/');
        var viewToSelect;
        var partialRoute = '';
        urlParts.forEach(function (urlPart) {
            if (urlPart.length > 0) {
                partialRoute += '/' + urlPart;
            }
            var route = routeConfig.find(function (r) { return _this.isMatchingRoute(r, urlPart); });
            if (route) {
                if (route.data && route.data.mainComponentName) {
                    var view = views.find(function (v) { return _this.viewForRoutePartExists(v, route, urlPart); });
                    if (util_1.isNullOrUndefined(view)) {
                        _this.addView(_this.createNewViewByUrlPart(route, urlPart, partialRoute, resolveData), viewToSelect);
                        viewToSelect = null;
                    }
                    else {
                        viewToSelect = view;
                        if (view.children && view.children.length > 0) {
                            views = view.children;
                        }
                        else {
                            views = [];
                        }
                        // TODO: reset inputs with new resolve data??
                    }
                }
                if (route.children && route.children.length > 0) {
                    routeConfig = route.children;
                }
                else {
                    routeConfig = [];
                }
            }
            else {
                console.error('Route not found');
            }
        });
        if (viewToSelect) {
            this.setSelectedView(viewToSelect);
        }
    };
    TerraMultiSplitViewConfig.prototype.viewForRoutePartExists = function (view, route, viewId) {
        return view.mainComponentName === route.data.mainComponentName && util_1.isNullOrUndefined(view.id)
            || view.mainComponentName === route.data.mainComponentName && route.path.startsWith(':') && view.id && view.id === viewId;
    };
    TerraMultiSplitViewConfig.prototype.createNewViewByUrlPart = function (route, urlPart, partialUrl, resolveData) {
        var viewName;
        if (typeof route.data.name === 'function') {
            var res = resolveData.find(function (data) { return data.urlPart === urlPart; });
            if (!util_1.isNullOrUndefined(res)) {
                var obj_1 = {};
                res.resolves.forEach(function (resolve) {
                    obj_1[resolve.name] = resolve.value;
                });
                viewName = this.translation.translate(route.data.name(obj_1), { id: urlPart });
            }
        }
        else {
            viewName = this.translation.translate(route.data.name, { id: urlPart });
        }
        var newView = {
            module: route.data.module,
            name: viewName,
            defaultWidth: route.data.defaultWidth,
            focusedWidth: route.data.focusedWidth ? route.data.focusedWidth : undefined,
            mainComponentName: route.data.mainComponentName,
            id: route.path && route.path.startsWith(':') ? urlPart : undefined,
            url: partialUrl
        };
        if (route.resolve) {
            var res = resolveData.find(function (data) { return data.urlPart === urlPart; });
            if (res) {
                newView.inputs = res.resolves;
            }
        }
        return newView;
    };
    TerraMultiSplitViewConfig.prototype.urlIsRedirected = function (url) {
        var _this = this;
        var routeConfig = this.routingConfig;
        var views = this.views;
        var urlParts = url.split('/');
        var route;
        var isInvalidRoute = false;
        var view;
        urlParts.forEach(function (urlPart) {
            route = routeConfig.find(function (r) { return _this.isMatchingRoute(r, urlPart); });
            if (route) {
                if (route.data && route.data.mainComponentName) {
                    view = views.find(function (v) { return _this.viewForRoutePartExists(v, route, urlPart); });
                    if (view) {
                        if (view.children && view.children.length > 0) {
                            views = view.children;
                        }
                        else {
                            views = [];
                        }
                    }
                }
                if (route.children && route.children.length > 0) {
                    routeConfig = route.children;
                }
                else {
                    routeConfig = [];
                }
            }
            else {
                isInvalidRoute = true;
                return;
            }
        });
        if (isInvalidRoute) {
            return 'invalidRoute';
        }
        if (!view) // do not redirect if the view is already added
         {
            var rou = routeConfig.find(function (r) { return r.path === '' && !util_1.isNullOrUndefined(r.redirectTo); });
            if (rou) {
                return '/' + rou.redirectTo;
            }
        }
        return null;
    };
    TerraMultiSplitViewConfig.prototype.getResolveDataForUrl = function (url, routeConfig) {
        var resolverList = this.getResolversForUrl(url, routeConfig);
        var data = [];
        this.activatedRouteSnapshot.params = {};
        this.resolveInSequence(url, resolverList, data);
    };
    TerraMultiSplitViewConfig.prototype.getResolversForUrl = function (url, routeConfig) {
        var _this = this;
        var urlParts = url.split('/');
        var resolverList = [];
        urlParts.forEach(function (urlPart) {
            var route = routeConfig.find(function (r) { return _this.isMatchingRoute(r, urlPart); });
            if (route) {
                if (route.resolve) {
                    Object.keys(route.resolve).forEach(function (elem) {
                        var resolver = {
                            urlPart: urlPart,
                            routePath: route.path,
                            resolver: {
                                key: elem,
                                service: _this.injector.get(route.resolve[elem])
                            }
                        };
                        if (util_1.isNullOrUndefined(resolverList)) {
                            resolverList = [resolver];
                        }
                        else {
                            resolverList.push(resolver);
                        }
                    });
                }
                if (route.children && route.children.length > 0) {
                    routeConfig = route.children;
                }
            }
        });
        return resolverList;
    };
    TerraMultiSplitViewConfig.prototype.resolveInSequence = function (url, resolverList, data, resolvedResolvers) {
        var _this = this;
        if (util_1.isNullOrUndefined(resolvedResolvers)) {
            resolvedResolvers = [];
        }
        if (util_1.isNullOrUndefined(resolverList) || resolverList.length === 0) {
            // all data resolved go to view addition/selection
            this.addOrSelectViewsByUrl(url, data);
            return;
        }
        var resolverListItem = resolverList.shift();
        if (!util_1.isNullOrUndefined(resolverListItem.routePath) && resolverListItem.routePath.startsWith(':')) {
            this.activatedRouteSnapshot.params[resolverListItem.routePath.substring(1)] = resolverListItem.urlPart; // pass route params
        }
        var resolvedResolver = resolvedResolvers.find(function (res) {
            return Object.getPrototypeOf(res.resolver.service) === Object.getPrototypeOf(resolverListItem.resolver.service);
        });
        if (!util_1.isNullOrUndefined(resolvedResolver)) // resolve resolvers only once for a route
         {
            var inputData = terra_resolved_data_helper_1.TerraResolvedDataHelper.findInputDataByResolveKey(resolvedResolver.urlPart, resolvedResolver.resolver.key, data);
            data = terra_resolved_data_helper_1.TerraResolvedDataHelper.addResolvedData(resolverListItem, inputData.value, data);
            // go to the next resolver
            this.resolveInSequence(url, resolverList, data, resolvedResolvers);
        }
        else {
            resolverListItem.resolver.service.resolve(this.activatedRouteSnapshot, this.routerStateSnapshot).subscribe(function (res) {
                resolvedResolvers.push(resolverListItem);
                data = terra_resolved_data_helper_1.TerraResolvedDataHelper.addResolvedData(resolverListItem, res, data);
                // go to the next resolver
                _this.resolveInSequence(url, resolverList, data, resolvedResolvers);
            });
        }
    };
    Object.defineProperty(TerraMultiSplitViewConfig.prototype, "splitViewComponent", {
        set: function (value) {
            this._splitViewComponent = value;
        },
        enumerable: true,
        configurable: true
    });
    TerraMultiSplitViewConfig.prototype.isMatchingRoute = function (route, routePath) {
        return !util_1.isNullOrUndefined(route) &&
            (!util_1.isNullOrUndefined(route.path) && (route.path === routePath || route.path.startsWith(':')) ||
                (route === this.routingConfig[0] && util_1.isNullOrUndefined(route.path)));
    };
    Object.defineProperty(TerraMultiSplitViewConfig.prototype, "baseRoute", {
        get: function () {
            return this._splitViewComponent.componentRoute;
        },
        enumerable: true,
        configurable: true
    });
    TerraMultiSplitViewConfig = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [router_1.Router,
            core_1.Injector,
            angular_l10n_1.TranslationService,
            router_1.ActivatedRoute])
    ], TerraMultiSplitViewConfig);
    return TerraMultiSplitViewConfig;
}());
exports.TerraMultiSplitViewConfig = TerraMultiSplitViewConfig;

//# sourceMappingURL=terra-multi-split-view.config.js.map
