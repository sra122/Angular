import { EventEmitter, Injector } from '@angular/core';
import { TerraMultiSplitViewInterface } from '../interfaces/terra-multi-split-view.interface';
import { ActivatedRoute, Router, Routes } from '@angular/router';
import { TranslationService } from 'angular-l10n';
import { TerraMultiSplitViewComponent } from '../terra-multi-split-view.component';
export declare class TerraMultiSplitViewConfig {
    private router;
    private injector;
    private translation;
    private activatedRoute;
    currentSelectedView: TerraMultiSplitViewInterface;
    routingConfig: Routes;
    deleteViewEventEmitter: EventEmitter<TerraMultiSplitViewInterface>;
    selectBreadcrumbEventEmitter: EventEmitter<TerraMultiSplitViewInterface>;
    private views;
    private routerStateSnapshot;
    private activatedRouteSnapshot;
    private _splitViewComponent;
    constructor(router?: Router, injector?: Injector, translation?: TranslationService, activatedRoute?: ActivatedRoute);
    addView(view: TerraMultiSplitViewInterface, parent?: TerraMultiSplitViewInterface): void;
    removeView(view: TerraMultiSplitViewInterface): void;
    private removeViewAndChildren(view);
    resizeView(view: TerraMultiSplitViewInterface, width: string): void;
    setSelectedView(view: TerraMultiSplitViewInterface): void;
    reset(): void;
    navigateToViewByUrl(url: string): void;
    private addOrSelectViewsByUrl(url, resolveData);
    private viewForRoutePartExists(view, route, viewId);
    private createNewViewByUrlPart(route, urlPart, partialUrl, resolveData);
    private urlIsRedirected(url);
    private getResolveDataForUrl(url, routeConfig);
    private getResolversForUrl(url, routeConfig);
    private resolveInSequence(url, resolverList, data, resolvedResolvers?);
    splitViewComponent: TerraMultiSplitViewComponent;
    private isMatchingRoute(route, routePath);
    readonly baseRoute: string;
}
