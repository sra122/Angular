{"version":3,"sources":["app/components/split-view/multi/terra-multi-split-view.component.ts"],"names":[],"mappings":"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","file":"terra-multi-split-view.component.js","sourcesContent":["import {\n    Component,\n    HostListener,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\nimport { isNullOrUndefined } from 'util';\nimport { TerraMultiSplitViewConfig } from './injectables/terra-multi-split-view.config';\nimport { TerraMultiSplitViewModuleInterface } from './interfaces/terra-multi-split-view-module.interface';\nimport { TerraMultiSplitViewInterface } from './interfaces/terra-multi-split-view.interface';\nimport * as AngularRouter from '@angular/router'; // Required to use both Angular Router Events and ES6 Events\nimport {\n    NavigationEnd,\n    NavigationStart,\n    Router,\n    Routes\n} from '@angular/router';\nimport { Route } from '@angular/router/src/config';\nimport { UrlHelper } from '../../../helpers/url.helper';\nimport { TerraMultiSplitViewRoutes } from './interfaces/terra-multi-split-view-routes';\nimport { TerraMultiSplitViewBreadcrumbsService } from './injectables/terra-multi-split-view-breadcrumbs.service';\n\nlet nextSplitViewId:number = 0;\n\n@Component({\n    selector: 'terra-multi-split-view',\n    template: require('./terra-multi-split-view.component.html'),\n    styles:   [\n        require('./terra-multi-split-view.component.scss'),\n        require('./terra-multi-split-view.component.glob.scss').toString()\n    ],\n})\nexport class TerraMultiSplitViewComponent implements OnDestroy, OnInit\n{\n    public static ANIMATION_SPEED:number = 1000; // ms\n\n    @Input()\n    public inputConfig:TerraMultiSplitViewConfig;\n\n    @Input()\n    public inputShowBreadcrumbs:boolean;\n\n    /**\n     * @deprecated\n     */\n    @Input()\n    public inputComponentRoute:string; // to catch the routing event, when selecting the tab where the split view is instantiated\n\n    /**\n     * @description adds/activates routing functionality to the split-view. Several dependencies need to be injected to the config as well.\n     */\n    @Input()\n    public inputHasRouting:boolean;\n\n    /**\n     * @description local copy of the isNullOrUndefined function from \"util\" to be used in the template only!\n     */\n    protected isNullOrUndefined:(object:any) => object is null | undefined;\n\n    private breadCrumbsPath:string;\n\n    private modules:Array<TerraMultiSplitViewModuleInterface> = [];\n\n    private resizeTimeout:number;\n\n    private splitViewId:number;\n\n    private _componentRoute:string;\n\n    constructor(private zone:NgZone, private router:Router, private breadcrumbsService:TerraMultiSplitViewBreadcrumbsService)\n    {\n        this.isNullOrUndefined = isNullOrUndefined;\n        this.inputShowBreadcrumbs = true; // default\n        this.breadCrumbsPath = '';\n        this.splitViewId = nextSplitViewId++;\n        this._componentRoute = this.searchAngularRoutes(this.router.url);\n    }\n\n    @HostListener('window:resize')\n    public onWindowResize():void\n    {\n        this.zone.runOutsideAngular(():void =>\n            {\n                // debounce resize, wait for resize to finish before updating the viewport\n                if(this.resizeTimeout)\n                {\n                    clearTimeout(this.resizeTimeout);\n                }\n                this.resizeTimeout = setTimeout((():void =>\n                    {\n                        if(this.inputConfig.currentSelectedView)\n                        {\n                            this.updateViewport(this.inputConfig.currentSelectedView, true);\n                        }\n                    }\n                ).bind(this), 500);\n            }\n        );\n    }\n\n    public ngOnDestroy():void\n    {\n        this.inputConfig.reset();\n    }\n\n    public ngOnInit():void\n    {\n        this.inputConfig.splitViewComponent = this;\n\n        // catch routing events, but only those that select the tab where the split view is instantiated\n        if(!isNullOrUndefined(this.router) && !isNullOrUndefined(this._componentRoute))\n        {\n            // check if the given route exists in the route config\n            if(this.routeExists(this._componentRoute))\n            {\n                if(this.inputHasRouting)\n                {\n                    this.router.events.filter((event:AngularRouter.Event) =>\n                        event instanceof NavigationEnd && event.url.startsWith(this._componentRoute)\n                    ).subscribe((event:NavigationEnd) =>\n                    {\n                        if(this.inputConfig.currentSelectedView && (this._componentRoute + this.inputConfig.currentSelectedView.url === event.url))\n                        {\n                            this.updateViewport(this.inputConfig.currentSelectedView, true);\n                        }\n                        else\n                        {\n                            this.inputConfig.navigateToViewByUrl(event.url);\n                        }\n                    });\n\n                    this.inputConfig.navigateToViewByUrl(this.router.url);\n                }\n                else\n                {\n                    this.router.events.filter((event:AngularRouter.Event) =>\n                        event instanceof NavigationStart && event.url === this._componentRoute\n                    ).subscribe((path:NavigationStart) =>\n                    {\n                        this.updateViewport(this.inputConfig.currentSelectedView, true);\n                    });\n                }\n            }\n        }\n    }\n\n    public get componentRoute():string\n    {\n        return this._componentRoute;\n    }\n\n    public addToModulesIfNotExist(view:TerraMultiSplitViewInterface):void\n    {\n        // check whether view is null or undefined\n        if(isNullOrUndefined(view))\n        {\n            return;\n        }\n\n        // get hierarchy level of selected view\n        let hierarchyLevel:number = this.getHierarchyLevelOfView(view);\n\n        // check if modules array is not initialized\n        if(isNullOrUndefined(this.modules[hierarchyLevel]))\n        {\n            this.modules.push(\n                {\n                    views:               [],\n                    identifier:          view.mainComponentName,\n                    width:               view.focusedWidth ? view.focusedWidth : view.defaultWidth,\n                    currentSelectedView: view\n                }\n            );\n        }\n\n        // get the module of the hierarchy\n        let module:TerraMultiSplitViewModuleInterface = this.modules[hierarchyLevel];\n\n        // initialize views array if null or undefined\n        if(isNullOrUndefined(module.views))\n        {\n            module.views = [];\n        }\n\n        // check if view is already added to module's views array\n        if(!module.views.find((elem:TerraMultiSplitViewInterface) => elem === view))\n        {\n            // add view to the module's views array\n            module.views.push(view);\n        }\n    }\n\n    public setSelectedView(view:TerraMultiSplitViewInterface):void\n    {\n        // check whether view is defined\n        if(isNullOrUndefined(view))\n        {\n            return;\n        }\n\n        // check whether the view's module is defined\n        let module:TerraMultiSplitViewModuleInterface = this.getModuleOfView(view);\n        if(isNullOrUndefined(module))\n        {\n            return;\n        }\n\n        // check if view is already selected\n        if(this.inputConfig.currentSelectedView === view)\n        {\n            // stop execution, since the view is already selected\n            return;\n        }\n\n        if(!isNullOrUndefined(this.inputConfig.selectBreadcrumbEventEmitter))\n        {\n            this.inputConfig.selectBreadcrumbEventEmitter.next(view);\n        }\n\n        // check whether the view is already opened\n        if(module.currentSelectedView === view)\n        {\n            // also set the width of the view\n            module.width = !isNullOrUndefined(view.focusedWidth) ? view.focusedWidth : view.defaultWidth;\n        }\n        // vertical selection has changed\n        else\n        {\n            // check if parent views are selected\n            let parent:TerraMultiSplitViewInterface = view;\n            while(!isNullOrUndefined(parent))\n            {\n                let parentModule:TerraMultiSplitViewModuleInterface = this.getModuleOfView(parent);\n                if(parentModule)\n                {\n                    if(!(parentModule.currentSelectedView === parent))\n                    {\n                        if(parent.parent)\n                        {\n                            parentModule.views = parent.parent.children;\n                        }\n                        parentModule.currentSelectedView = parent;\n                    }\n                }\n                parent = parent.parent;\n            }\n\n            // rebuild modules for children views\n            this.rebuildModules(view, module);\n        }\n\n        // if module has changed horizontally\n        let inputModule:TerraMultiSplitViewModuleInterface = this.getModuleOfView(this.inputConfig.currentSelectedView);\n        if(inputModule !== this.getModuleOfView(view)\n           && !isNullOrUndefined(inputModule)) // this has to be checked, since a module can be removed and hence isn't existing anymore\n        {\n            inputModule.width = this.inputConfig.currentSelectedView.defaultWidth;\n        }\n\n        this.inputConfig.currentSelectedView = view;\n        this.updateViewport(view);\n        this.updateBreadCrumbs();\n        this.updateBreadcrumbsList();\n    }\n\n    private updateBreadcrumbsList():void\n    {\n        this.breadcrumbsService.breadcrumbList[this._componentRoute] =\n            this.modules.map((module:TerraMultiSplitViewModuleInterface) =>\n            {\n                return module.currentSelectedView.name;\n            });\n\n    }\n\n    private updateBreadCrumbs():void\n    {\n        this.zone.runOutsideAngular(() =>\n        {\n            // init breadcrumb sliding\n            setTimeout(function():void\n            {\n                $('.terra-breadcrumbs').each(function():void\n                {\n                    $(this).find('li').each(function():void\n                    {\n                        let viewContainer:JQuery = $(this).closest('.terra-breadcrumbs');\n                        let viewContainerOffsetLeft:number = viewContainer.offset().left;\n                        let viewContainerWidth:number = viewContainer.width();\n\n                        $(this).off();\n                        $(this).mouseenter(function():void\n                        {\n                            let elementWidth:number = $(this).width();\n                            let elementOffsetLeft:number = $(this).offset().left;\n                            let viewContainerScrollLeft:number = viewContainer.scrollLeft();\n                            let offset:number = 0;\n\n                            if(elementOffsetLeft < viewContainer.offset().left)\n                            {\n                                offset = viewContainerScrollLeft + elementOffsetLeft - 10;\n                            }\n                            else if(elementOffsetLeft + elementWidth + 30 > viewContainerOffsetLeft + viewContainerWidth)\n                            {\n                                offset = viewContainerScrollLeft + elementOffsetLeft + elementWidth + 30 - viewContainerWidth;\n                            }\n                            else\n                            {\n                                return;\n                            }\n                            viewContainer.stop();\n                            viewContainer.animate({scrollLeft: offset}, 1200);\n                        });\n                    });\n                });\n            });\n        });\n    }\n\n    public updateViewport(view:TerraMultiSplitViewInterface, skipAnimation?:boolean):void\n    {\n        // check if view is defined\n        if(isNullOrUndefined(view))\n        {\n            return;\n        }\n\n        this.zone.runOutsideAngular(() =>\n        {\n            let splitViewId:number = this.splitViewId;\n            setTimeout(function():void\n            {\n                let id:string = view.mainComponentName;\n\n                let parent:TerraMultiSplitViewInterface = view.parent;\n                let moduleIndex:number = 0;\n\n                while(!isNullOrUndefined(parent))\n                {\n                    parent = parent.parent;\n                    moduleIndex++;\n                }\n\n                let anchor:JQuery = $('#splitview' + splitViewId + '_module' + moduleIndex);\n                let currentBreadcrumb:JQuery = $('.' + id); // TODO: vwiebe, fix scope\n                let breadCrumbContainer:JQuery = currentBreadcrumb.closest('.terra-breadcrumbs');\n                let viewContainer:JQuery = anchor.parent();\n\n                // focus breadcrumbs\n                if(!isNullOrUndefined(currentBreadcrumb[0]))\n                {\n                    breadCrumbContainer.stop();\n                    breadCrumbContainer.animate(\n                        {scrollLeft: (currentBreadcrumb[0].getBoundingClientRect().left + breadCrumbContainer.scrollLeft())},\n                        this.ANIMATION_SPEED);\n                }\n\n                // check if viewport needs to be adjusted\n                if(!isNullOrUndefined(anchor[0]) &&\n                   anchor[0].getBoundingClientRect().left > viewContainer.offset().left &&\n                   anchor[0].getBoundingClientRect().right <= viewContainer.offset().left + viewContainer.outerWidth())\n                {\n                    return;\n                }\n\n                // interrupt all ongoing animations to prevent queue\n                viewContainer.stop();\n\n                if(isNullOrUndefined(anchor[0]))\n                {\n                    return;\n                }\n\n                // focus view horizontally\n                if(skipAnimation)\n                {\n                    viewContainer.scrollLeft(\n                        Math.ceil(anchor[0].getBoundingClientRect().left + viewContainer.scrollLeft() - viewContainer.offset().left));\n                }\n                else\n                {\n                    viewContainer.animate(\n                        {scrollLeft: (Math.ceil(anchor[0].getBoundingClientRect().left + viewContainer.scrollLeft() - viewContainer.offset().left))},\n                        this.ANIMATION_SPEED);\n                }\n            });\n        });\n    }\n\n    private rebuildModules(view:TerraMultiSplitViewInterface, module:TerraMultiSplitViewModuleInterface):void\n    {\n        if(isNullOrUndefined(view))\n        {\n            return;\n        }\n\n        let hierarchyLevel:number = this.getHierarchyLevelOfView(view);\n\n        // cut off last elements if existing\n        if(this.modules.length > hierarchyLevel)\n        {\n            this.modules = this.modules.slice(0, hierarchyLevel + 1);\n        }\n\n        // rebuild\n        if(!isNullOrUndefined(view.children))\n        {\n            view.children.forEach((child:TerraMultiSplitViewInterface) =>\n                {\n                    // add view to the modules array\n                    this.addToModulesIfNotExist(child);\n\n                    // set selected view and rebuild sub tree for children\n                    this.setSelectedView(child);\n                }\n            );\n        }\n\n        // update the corresponding module's current- and lastSelectedView\n        let moduleView:TerraMultiSplitViewInterface = module.views.find((v:TerraMultiSplitViewInterface) => v === view);\n\n        // an existing view has been SELECTED?\n        if(moduleView)\n        {\n            module.lastSelectedView = module.currentSelectedView;\n            module.currentSelectedView = view;\n\n            // also set the width of the view\n            module.width = !isNullOrUndefined(view.focusedWidth) ? view.focusedWidth : view.defaultWidth;\n        }\n    }\n\n    public removeFromModules(view:TerraMultiSplitViewInterface):TerraMultiSplitViewInterface\n    {\n        // check whether view is null or undefined\n        if(isNullOrUndefined(view))\n        {\n            // ERROR... stop further execution\n            return view;\n        }\n\n        // get the corresponding module\n        let module:TerraMultiSplitViewModuleInterface = this.getModuleOfView(view);\n\n        // check whether module is defined\n        if(isNullOrUndefined(module))\n        {\n            // ERROR... stop further execution\n            return view;\n        }\n\n        // delete all children only if the view is selected and the children are rendered\n        if(view === module.currentSelectedView)\n        {\n            if(!isNullOrUndefined(view.children))\n            {\n                view.children.forEach((elem:TerraMultiSplitViewInterface) =>\n                    {\n                        this.removeFromModules(elem);\n                    }\n                );\n            }\n        }\n\n        // check if module has more than one view\n        if(module.views.length <= 1)\n        {\n            // get the index of the module in the modules array\n            let moduleIndex:number = this.modules.findIndex((mod:TerraMultiSplitViewModuleInterface) => mod === module);\n\n            // check if the module has been found\n            if(moduleIndex >= 0 && moduleIndex < this.modules.length)\n            {\n                // remove the whole module\n                this.modules.splice(moduleIndex, 1);\n\n                // select the views parent view\n                return view.parent;\n            }\n        }\n        else\n        {\n            // get the index of the view in the module's views array\n            let viewIndex:number = module.views.findIndex((elem:TerraMultiSplitViewInterface) => elem === view);\n\n            // check if the view has been found\n            if(viewIndex >= 0 && viewIndex < module.views.length)\n            {\n                // remove view from module's views array\n                module.views.splice(viewIndex, 1);\n            }\n\n            // return the view that should be selected after deletion\n            if(module.currentSelectedView === view && this.inputConfig.currentSelectedView === view)\n            {\n                return this.getLastSelectedOfModule(module);\n            }\n            else\n            {\n                // check if vertical selection has to be changed\n                if(module.currentSelectedView === view)\n                {\n                    // rebuild modules array depending on the selected view\n                    this.rebuildModules(this.getLastSelectedOfModule(module), module);\n\n                }\n                // do not change anything -> select the currently selected view\n                return this.inputConfig.currentSelectedView;\n            }\n        }\n    }\n\n    protected getModuleOfView(view:TerraMultiSplitViewInterface):TerraMultiSplitViewModuleInterface\n    {\n        // get hierarchy level of deleted view\n        let hierarchyLevel:number = this.getHierarchyLevelOfView(view);\n\n        return this.modules[hierarchyLevel];\n    }\n\n    private getHierarchyLevelOfView(view:TerraMultiSplitViewInterface):number\n    {\n        let hierarchyLevel:number = 0;\n        let parent:TerraMultiSplitViewInterface = view.parent;\n        while(!isNullOrUndefined(parent))\n        {\n            parent = parent.parent;\n            hierarchyLevel++;\n        }\n\n        return hierarchyLevel;\n    }\n\n    public resizeViewAndModule(view:TerraMultiSplitViewInterface):void\n    {\n        let module:TerraMultiSplitViewModuleInterface = this.getModuleOfView(view);\n\n        module.width = view.defaultWidth;\n    }\n\n    private removeView(view:TerraMultiSplitViewInterface, event:Event):void\n    {\n        // stop event bubbling\n        event.stopPropagation();\n\n        // remove the selected view\n        this.inputConfig.removeView(view);\n    }\n\n    private routeExists(route:string):boolean\n    {\n        let noLeadingSlash:string = UrlHelper.removeLeadingSlash(route);\n        let routeParts:Array<string> = noLeadingSlash.split('/');\n\n        let routeLevel:number = 0;\n\n        // get the routing config\n        let registeredRoutes:TerraMultiSplitViewRoutes = this.router.config as TerraMultiSplitViewRoutes;\n\n        // scan the routing config\n        while(routeLevel < routeParts.length)\n        {\n            if(isNullOrUndefined(registeredRoutes))\n            {\n                return false;\n            }\n\n            // search the array for the route partial\n            let foundRoute:Route = registeredRoutes.find(\n                (registeredRoute:Route) => registeredRoute.path === routeParts[routeLevel]);\n            if(foundRoute) // the route partial is defined?\n            {\n                // into deep\n                routeLevel++;\n                registeredRoutes = foundRoute.children as TerraMultiSplitViewRoutes;\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        // if the while loop ends, the route exists\n        return true;\n    }\n\n    private getLastSelectedOfModule(module:TerraMultiSplitViewModuleInterface):TerraMultiSplitViewInterface\n    {\n        if(module.lastSelectedView && module.views.find((v:TerraMultiSplitViewInterface) => v === module.lastSelectedView))\n        {\n            return module.lastSelectedView;\n        }\n\n        // select the first view in the views array\n        return module.views[0];\n    }\n\n    public handleBreadCrumbClick(view:TerraMultiSplitViewInterface, event?:MouseEvent):void\n    {\n        // prevent event bubbling\n        if(event)\n        {\n            event.stopPropagation();\n        }\n\n        this.setSelectedView(view);\n    }\n\n    // TODO: The same functionality as TerraRouterHelper.getRouteBaseUrl()\n    private searchAngularRoutes(url:string):string\n    {\n        let urlWithoutLeadingSlash:string = UrlHelper.removeLeadingSlash(url);\n        let urlParts:Array<string> = urlWithoutLeadingSlash.split('/');\n        let urlPart:string = urlParts.shift();\n        let routes:Routes = this.router.config;\n        let route:Route = this.findRouteByPath(urlPart, routes);\n        let baseUrl:string = '';\n\n        while(!isNullOrUndefined(route) && urlParts.length > 0)\n        {\n            baseUrl += '/' + route.path;\n            routes = route.children;\n            urlPart = urlParts.shift();\n            route = this.findRouteByPath(urlPart, routes);\n        }\n\n        if(isNullOrUndefined(route) && !isNullOrUndefined(routes) && !isNullOrUndefined(routes[0]) && routes[0].path === '**')\n        {\n            return baseUrl;\n        }\n\n        if(urlParts.length === 0 && !isNullOrUndefined(route))\n        {\n            return baseUrl + '/' + route.path;\n        }\n\n        return undefined;\n    }\n\n    private findRouteByPath(routePath:string, routeConfig:Routes):Route\n    {\n        if(isNullOrUndefined(routeConfig))\n        {\n            return undefined;\n        }\n        return routeConfig.find((route:Route) =>\n        {\n            return route.path === routePath;\n        });\n    }\n}\n"]}