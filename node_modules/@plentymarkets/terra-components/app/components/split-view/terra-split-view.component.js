"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var util_1 = require("util");
/** @deprecated - please use `TerraMultiSplitViewComponent` instead */
var TerraSplitViewComponent = /** @class */ (function () {
    function TerraSplitViewComponent() {
        this.inputShowBreadcrumbs = true; // default
        this.breadCrumbsPath = '';
        this.inputUpdateViewport = true;
    }
    TerraSplitViewComponent.prototype.ngOnDestroy = function () {
        this.inputModules.splice(0, this.inputModules.length);
    };
    TerraSplitViewComponent.prototype.ngOnChanges = function (changes) {
        if (this.inputUpdateViewport) {
            if (!util_1.isUndefined(changes['inputModules'].currentValue) && changes['inputModules'].currentValue.length > 0) {
                var currentModule = this.inputModules[this.inputModules.length - 1];
                this.updateViewport(currentModule.mainComponentName + '_' + currentModule.instanceKey);
            }
            // init breadcrumb sliding
            setTimeout(function () {
                $('.terra-breadcrumbs').each(function () {
                    $(this).find('li').each(function () {
                        /* tslint:disable:no-var-keyword */
                        /* var is requires here (scope) */
                        var viewContainer = $(this).closest('.terra-breadcrumbs');
                        var viewContainerOffsetLeft = viewContainer.offset().left;
                        var viewContainerWidth = viewContainer.width();
                        /* tslint:enable:no-var-keyword */
                        $(this).off();
                        $(this).mouseenter(function () {
                            var elementWidth = $(this).width();
                            var elementOffsetLeft = $(this).offset().left;
                            var viewContainerScrollLeft = viewContainer.scrollLeft();
                            var offset = 0;
                            if (elementOffsetLeft < viewContainer.offset().left) {
                                offset = viewContainerScrollLeft + elementOffsetLeft;
                            }
                            else if (elementOffsetLeft + elementWidth + 30 > viewContainerOffsetLeft + viewContainerWidth) {
                                offset = viewContainerScrollLeft + elementOffsetLeft + elementWidth + 30 - viewContainerWidth;
                            }
                            else {
                                return;
                            }
                            viewContainer.stop();
                            viewContainer.animate({ scrollLeft: offset }, 1200);
                        });
                    });
                });
            });
        }
    };
    TerraSplitViewComponent.prototype.updateViewport = function (id) {
        setTimeout(function () {
            var anchor = $('#' + id);
            var breadcrumb = $('.' + id);
            var breadCrumbContainer = breadcrumb.closest('.terra-breadcrumbs');
            var viewContainer = anchor.parent();
            var offset = 3;
            var prevSplitView = breadcrumb.closest('.view').prev();
            // update breadcrumbs
            breadcrumb.closest('.terra-breadcrumbs').find('div').each(function () {
                $(this).removeClass('active');
            });
            breadcrumb.addClass('active');
            // focus breadcrumbs
            if (!util_1.isNullOrUndefined(breadcrumb[0])) {
                breadCrumbContainer.stop();
                breadCrumbContainer.animate({ scrollLeft: (breadcrumb[0].getBoundingClientRect().left + breadCrumbContainer.scrollLeft()) }, this.ANIMATION_SPEED);
            }
            // focus view
            if (!util_1.isNullOrUndefined(viewContainer[0]) &&
                anchor[0].getBoundingClientRect().left > viewContainer.scrollLeft() - offset &&
                anchor[0].getBoundingClientRect().right <= viewContainer[0].getBoundingClientRect().right) {
                return;
            }
            // offset fix for navigator
            if (!util_1.isNull(prevSplitView[0])) {
                offset = offset + prevSplitView.width() + (3 * offset);
            }
            // offset fix for overlay
            if (!util_1.isNull($($(anchor[0].closest('.hasSplitView')).find(anchor))[0])) {
                offset = offset + ($(window).width() / 2 - viewContainer.width() / 2);
            }
            viewContainer.stop();
            viewContainer.animate({ scrollLeft: (anchor[0].getBoundingClientRect().left + viewContainer.scrollLeft() - offset) }, this.ANIMATION_SPEED);
        });
    };
    TerraSplitViewComponent.ANIMATION_SPEED = 1000; // ms
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraSplitViewComponent.prototype, "inputModules", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSplitViewComponent.prototype, "inputShowBreadcrumbs", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSplitViewComponent.prototype, "inputUpdateViewport", void 0);
    TerraSplitViewComponent = __decorate([
        core_1.Component({
            selector: 'terra-split-view',
            template: require('./terra-split-view.component.html'),
            styles: [require('./terra-split-view.component.scss'),
                require('./terra-split-view.component.glob.scss').toString()
            ]
        }),
        __metadata("design:paramtypes", [])
    ], TerraSplitViewComponent);
    return TerraSplitViewComponent;
}());
exports.TerraSplitViewComponent = TerraSplitViewComponent;

//# sourceMappingURL=terra-split-view.component.js.map
