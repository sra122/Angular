"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_breadcrumbs_service_1 = require("./service/terra-breadcrumbs.service");
var router_1 = require("@angular/router");
var util_1 = require("util");
var TerraBreadcrumbsComponent = /** @class */ (function () {
    function TerraBreadcrumbsComponent(breadcrumbsService, activatedRoute, router) {
        this.breadcrumbsService = breadcrumbsService;
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.mouseLeft = '0px';
        this.isTooltipDisabled = false;
        this.breadcrumbsService.initialPath =
            this.getCompletePathByRoute(this.activatedRoute.snapshot.routeConfig, this.router.config, '');
    }
    // identical code exists in TerraRouterHelper in terra
    TerraBreadcrumbsComponent.prototype.getCompletePathByRoute = function (routeToFind, routeConfig, parentPath) {
        var path = null;
        if (!util_1.isNullOrUndefined(routeConfig)) {
            for (var _i = 0, routeConfig_1 = routeConfig; _i < routeConfig_1.length; _i++) {
                var route = routeConfig_1[_i];
                if (route === routeToFind) {
                    path = parentPath + '/' + route.path;
                    if (parentPath.length === 0) {
                        path = route.path;
                    }
                    return path;
                }
                else if (route.children) {
                    path = this.getCompletePathByRoute(routeToFind, route.children, parentPath);
                    if (!util_1.isNullOrUndefined(path)) {
                        path = route.path + '/' + path;
                        break;
                    }
                }
            }
        }
        return path;
    };
    Object.defineProperty(TerraBreadcrumbsComponent.prototype, "breadcrumbContainers", {
        get: function () {
            return this.breadcrumbsService.containers;
        },
        enumerable: true,
        configurable: true
    });
    TerraBreadcrumbsComponent.prototype.closeBreadcrumb = function (container, breadcrumb, event) {
        event.stopPropagation();
        this.breadcrumbsService.closeBreadcrumb(container, breadcrumb);
    };
    TerraBreadcrumbsComponent.prototype.checkActiveRoute = function (bcc, container) {
        var isRouteActive = this.breadcrumbsService.checkActiveRoute(bcc);
        if (!util_1.isNullOrUndefined(container) && isRouteActive) {
            container.scrollIntoView();
        }
        return isRouteActive;
    };
    TerraBreadcrumbsComponent.prototype.calculatePosition = function (container, contextMenu) {
        var containerClientRect = container.getBoundingClientRect();
        var contextMenuClientRect = contextMenu.getBoundingClientRect();
        var isOutsideRight = (contextMenuClientRect.width + containerClientRect.left) > window.innerWidth;
        var left = 0;
        if (isOutsideRight) {
            left = window.innerWidth - contextMenuClientRect.width;
        }
        else {
            left = containerClientRect.left;
        }
        this.mouseLeft = left + 'px';
    };
    TerraBreadcrumbsComponent.prototype.checkLastBreadcrumbContainer = function (index) {
        var nextContainer = this.breadcrumbContainers[index + 1];
        return !util_1.isNullOrUndefined(nextContainer) &&
            !util_1.isNullOrUndefined(nextContainer.currentSelectedBreadcrumb) &&
            !nextContainer.currentSelectedBreadcrumb.isHidden;
    };
    TerraBreadcrumbsComponent.prototype.checkTooltip = function (el) {
        var curOverflow = el.style.overflow;
        // 'hide' overflow to get correct scrollWidth
        if (!curOverflow || curOverflow === 'visible') {
            el.style.overflow = 'hidden';
        }
        // check if is overflowing
        var isOverflowing = el.clientWidth < el.scrollWidth;
        // 'reset' overflow to initial state
        el.style.overflow = curOverflow;
        this.isTooltipDisabled = !isOverflowing;
    };
    TerraBreadcrumbsComponent = __decorate([
        core_1.Component({
            selector: 'terra-breadcrumbs',
            styles: [require('./terra-breadcrumbs.component.scss')],
            template: require('./terra-breadcrumbs.component.html'),
            providers: [terra_breadcrumbs_service_1.TerraBreadcrumbsService]
        }),
        __metadata("design:paramtypes", [terra_breadcrumbs_service_1.TerraBreadcrumbsService,
            router_1.ActivatedRoute,
            router_1.Router])
    ], TerraBreadcrumbsComponent);
    return TerraBreadcrumbsComponent;
}());
exports.TerraBreadcrumbsComponent = TerraBreadcrumbsComponent;

//# sourceMappingURL=terra-breadcrumbs.component.js.map
