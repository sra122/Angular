{"version":3,"sources":["app/components/breadcrumbs/service/terra-breadcrumbs.service.ts"],"names":[],"mappings":"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","file":"terra-breadcrumbs.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TerraBreadcrumb } from '../terra-breadcrumb';\nimport {\n    ActivatedRouteSnapshot,\n    NavigationEnd,\n    Route,\n    Router,\n    RouterEvent,\n    Routes\n} from '@angular/router';\nimport { isNullOrUndefined } from 'util';\nimport { TranslationService } from 'angular-l10n';\nimport { TerraBreadcrumbContainer } from '../terra-breadcrumb-container';\nimport { UrlHelper } from '../../../helpers/url.helper';\nimport { StringHelper } from '../../../helpers/string.helper';\n\n@Injectable()\nexport class TerraBreadcrumbsService\n{\n    private _containers:Array<TerraBreadcrumbContainer> = [];\n\n    private _initialPath:string;\n    private initialRoute:Route;\n\n    constructor(private router:Router,\n                private translation:TranslationService)\n    {\n        this.router.events.filter((event:RouterEvent) =>\n        {\n            return event instanceof NavigationEnd // navigation is done\n                   && !isNullOrUndefined(this._initialPath) // initialPath is set\n                   && event.urlAfterRedirects.startsWith('/' + this._initialPath); // url starts with the initial path\n        }).subscribe((event:NavigationEnd) =>\n        {\n            if(!isNullOrUndefined(this.initialRoute.children))\n            {\n                let shortUrl:string = event.urlAfterRedirects.replace('/' + this._initialPath, '');\n\n                let urlParts:Array<string> = shortUrl.split('/');\n                let urls:Array<string> = urlParts.map((urlPart:string, index:number) => urlParts.slice(0, index + 1).join('/'));\n                urls.forEach((url:string) =>\n                {\n                    this.handleBreadcrumbForUrl(url, '/' + this._initialPath + url);\n                });\n\n                // update breadcrumb visibility for containers that have not been checked since the url is to short\n                if(urlParts.length < this._containers.length)\n                {\n                    for(let j:number = urlParts.length; j < this._containers.length; j++)\n                    {\n                        this.updateBreadcrumbVisibilities(\n                            this._containers[j],\n                            this._containers[j - 1].currentSelectedBreadcrumb\n                        );\n                    }\n                }\n            }\n        });\n    }\n\n    public set initialPath(value:string)\n    {\n        this._containers = [];\n        this._initialPath = value;\n        this.initialRoute = this.findRoute(value, this.router.config);\n    }\n\n    public get containers():Array<TerraBreadcrumbContainer>\n    {\n        return this._containers;\n    }\n\n    private handleBreadcrumbForUrl(shortUrl:string, fullUrl:string):void\n    {\n        let shortUrlWithoutLeadingSlash:string = UrlHelper.removeLeadingSlash(shortUrl);\n        let route:Route = this.findRoute(shortUrlWithoutLeadingSlash, this.initialRoute.children);\n        this.handleBreadcrumb(route, fullUrl, shortUrl.split('/').length - 1);\n    }\n\n    private handleBreadcrumb(route:Route, url:string, urlPartsCount:number):void\n    {\n        if(isNullOrUndefined(route))\n        {\n            return;\n        }\n\n        // search for existing container - create new container if not existing\n        let container:TerraBreadcrumbContainer = this._containers[urlPartsCount];\n        if(isNullOrUndefined(container))\n        {\n            container = new TerraBreadcrumbContainer();\n            this._containers.push(container);\n        }\n\n        // search for existing breadcrumb\n        let breadcrumb:TerraBreadcrumb = container.breadcrumbList.find((bc:TerraBreadcrumb) =>\n        {\n            return bc.routerLink === url;\n        });\n\n        // breadcrumb not found\n        if(isNullOrUndefined(breadcrumb))\n        {\n            let label:string = this.getBreadcrumbLabel(route);\n            let currentContainerIndex:number = this._containers.indexOf(container);\n            let previousContainer:TerraBreadcrumbContainer = this._containers[currentContainerIndex - 1];\n            let parentBreadcrumb:TerraBreadcrumb = isNullOrUndefined(previousContainer) ? undefined : previousContainer.currentSelectedBreadcrumb;\n            breadcrumb = new TerraBreadcrumb(label, parentBreadcrumb, url);\n            container.breadcrumbList.push(breadcrumb);\n        }\n\n        // select breadcrumb and update visibilities\n        container.currentSelectedBreadcrumb = breadcrumb;\n        this.updateBreadcrumbVisibilities(container, breadcrumb.parent);\n    }\n\n    private getBreadcrumbLabel(route:Route):string\n    {\n        let label:string = '';\n        if(!isNullOrUndefined(route.data))\n        {\n            if(typeof route.data.label === 'function')\n            {\n                let activatedSnapshot:ActivatedRouteSnapshot = this.findActivatedRouteSnapshot(this.router.routerState.snapshot.root);\n\n                label = route.data.label(this.translation, activatedSnapshot.params, activatedSnapshot.data);\n            }\n            else\n            {\n                label = this.translation.translate(route.data.label);\n            }\n        }\n        return label;\n    }\n\n    private updateBreadcrumbVisibilities(breadcrumbContainer:TerraBreadcrumbContainer, parentBreadcrumb:TerraBreadcrumb):void\n    {\n        breadcrumbContainer.breadcrumbList.forEach((bc:TerraBreadcrumb) =>\n        {\n            bc.isHidden = bc.parent !== parentBreadcrumb || !isNullOrUndefined(bc.parent) && bc.parent.isHidden;\n        });\n\n        // is the current selected breadcrumb now hidden?\n        if(breadcrumbContainer.currentSelectedBreadcrumb.isHidden)\n        {\n            // search for another breadcrumb to be selected that is not hidden\n            let foundBreadcrumb:TerraBreadcrumb = breadcrumbContainer.breadcrumbList.find((bc:TerraBreadcrumb) => !bc.isHidden);\n            if(!isNullOrUndefined(foundBreadcrumb))\n            {\n                breadcrumbContainer.currentSelectedBreadcrumb = foundBreadcrumb;\n            }\n        }\n    }\n\n    // same exists in TerraRouterHelper\n    private findActivatedRouteSnapshot(activatedRouteSnapshot:ActivatedRouteSnapshot):ActivatedRouteSnapshot\n    {\n        if(!isNullOrUndefined(activatedRouteSnapshot.firstChild))\n        {\n            return this.findActivatedRouteSnapshot(activatedRouteSnapshot.firstChild);\n        }\n\n        return activatedRouteSnapshot;\n    }\n\n    private findRoute(url:string, routeConfig:Routes):Route\n    {\n        let urlParts:Array<string> =  UrlHelper.removeLeadingSlash(url).split('/');\n        let urlPart:string = urlParts.shift();\n\n        let routes:Routes = routeConfig;\n        let route:Route = routeConfig.find((routeToFind:Route) =>\n        {\n            return routeToFind.path === urlPart;\n        });\n\n        while(!isNullOrUndefined(route) && urlParts.length > 0)\n        {\n            if(!isNullOrUndefined(route.children))\n            {\n                routes = route.children;\n                urlPart = urlParts.shift();\n            }\n            else\n            {\n                urlPart = urlPart + '/' + urlParts.shift();\n            }\n\n            route = routes.find((routeToFind:Route) =>\n            {\n                let splittedRoutePath:Array<string> = routeToFind.path.split('/');\n\n                let parameterisedRoutes:{ [key:string]:number } = {};\n\n                let splittedFlatPath:Array<string> = urlPart.split('/');\n\n                splittedRoutePath.forEach((path:string, index:number) =>\n                {\n                    if(path.startsWith(':'))\n                    {\n                        parameterisedRoutes[path] = index;\n                    }\n                });\n\n                Object.values(parameterisedRoutes).forEach((index:number) =>\n                {\n                    splittedRoutePath[index] = splittedFlatPath[index];\n                });\n\n                let gluedRoutePath:string = splittedRoutePath.join('/');\n\n                return !StringHelper.isNullUndefinedOrEmpty(routeToFind.path) &&\n                       urlPart === gluedRoutePath;\n            });\n        }\n\n        return route;\n    }\n\n    public checkActiveRoute(breadcrumb:TerraBreadcrumb):boolean\n    {\n        return this.router.isActive(breadcrumb.routerLink, true);\n    }\n\n    /**\n     * Close the breadcrumb by given url\n     * @param {string} url Url to close the breadcrumb.\n     */\n    public closeBreadcrumbByUrl(url:string):void\n    {\n        let breadcrumb:TerraBreadcrumb = this.findBreadcrumbByUrl(url);\n        let container:TerraBreadcrumbContainer = this.findBreadcrumbContainerByUrl(url);\n\n        if(!isNullOrUndefined(breadcrumb))\n        {\n            this.closeBreadcrumb(container, breadcrumb);\n        }\n    }\n\n    /**\n     * Update the breadcrumb name by given url\n     * @param {string} url Url to update the breadcrumb.\n     * @param {string} name If not given, it will be automatically update the name by the label of the route data.\n     */\n    public updateBreadcrumbNameByUrl(url:string, name?:string):void\n    {\n        let breadcrumb:TerraBreadcrumb = this.findBreadcrumbByUrl(url);\n\n        let shortUrlWithoutLeadingSlash:string = UrlHelper.removeLeadingSlash(url);\n        let route:Route = this.findRoute(shortUrlWithoutLeadingSlash, this.initialRoute.children);\n\n        if(!isNullOrUndefined(route) && !isNullOrUndefined(route.data) && !isNullOrUndefined(breadcrumb))\n        {\n            // you can set a name to update the breadcrumb name\n            if(!isNullOrUndefined(name))\n            {\n                breadcrumb.name = this.translation.translate(name);\n            }\n            // or it will be updated automatically from it's route data\n            else\n            {\n                breadcrumb.name = this.getBreadcrumbLabel(route);\n            }\n        }\n    }\n\n    private findBreadcrumbContainerByUrl(url:string):TerraBreadcrumbContainer\n    {\n        let urlPartsCount:number = url.split('/').length - 1;\n\n        let container:TerraBreadcrumbContainer = this._containers[urlPartsCount];\n\n        if(isNullOrUndefined(container))\n        {\n            console.error('No existing breadcrumb container found.');\n        }\n\n        return container;\n    }\n\n    private findBreadcrumbByUrl(url:string):TerraBreadcrumb\n    {\n        let container:TerraBreadcrumbContainer = this.findBreadcrumbContainerByUrl(url);\n\n        let routerLink:string = '/' + this._initialPath + url;\n\n        if(!isNullOrUndefined(container) &&\n           !isNullOrUndefined(container.currentSelectedBreadcrumb) &&\n           container.currentSelectedBreadcrumb.routerLink === routerLink)\n        {\n            return container.currentSelectedBreadcrumb;\n        }\n        else\n        {\n            return container.breadcrumbList.find((bc:TerraBreadcrumb) =>\n            {\n                return bc.routerLink === routerLink;\n            });\n        }\n    }\n\n    public closeBreadcrumb(breadcrumbContainer:TerraBreadcrumbContainer, breadcrumb:TerraBreadcrumb):void\n    {\n        let breadcrumbList:Array<TerraBreadcrumb> = breadcrumbContainer.breadcrumbList;\n        let breadcrumbIndex:number = breadcrumbList.indexOf(breadcrumb);\n\n        // current selected breadcrumb should be closed?\n        if(breadcrumbContainer.currentSelectedBreadcrumb === breadcrumb)\n        {\n            let currentUrl:string = this.router.url;\n\n            let currentSelectedContainer:TerraBreadcrumbContainer = this._containers.find((bcc:TerraBreadcrumbContainer) =>\n            {\n                return bcc.currentSelectedBreadcrumb.routerLink === currentUrl;\n            });\n\n            // get the first remaining breadcrumb\n            breadcrumbContainer.currentSelectedBreadcrumb = breadcrumbIndex === 0 ? breadcrumbList[1] : breadcrumbList[0];\n\n            let currentSelectedIndex:number = this._containers.indexOf(currentSelectedContainer);\n            let breadcrumbContainerIndex:number = this._containers.indexOf(breadcrumbContainer);\n\n            // container has no more breadcrumbs\n            if(isNullOrUndefined(breadcrumbContainer.currentSelectedBreadcrumb))\n            {\n                this.removeBreadcrumbContainer(breadcrumbContainer);\n            }\n            // check indexes to start routing\n            else if(currentSelectedIndex >= breadcrumbContainerIndex)\n            {\n                this.router.navigateByUrl(breadcrumbContainer.currentSelectedBreadcrumb.routerLink);\n            }\n        }\n\n        // delete all related breadcrumbs\n        let currentContainerIndex:number = this._containers.indexOf(breadcrumbContainer);\n        let nextContainer:TerraBreadcrumbContainer = this._containers[currentContainerIndex + 1];\n        this.removeBreadcrumbsByParent(nextContainer, breadcrumb);\n\n        // finally delete breadcrumb\n        breadcrumbList.splice(breadcrumbIndex, 1);\n    }\n\n    private removeBreadcrumbContainer(breadcrumbContainer:TerraBreadcrumbContainer):void\n    {\n        let index:number = this._containers.indexOf(breadcrumbContainer);\n\n        if(index >= 0)\n        {\n            // delete current breadcrumb container\n            this._containers.splice(index, 1);\n\n            // get next breadcrumb container with the same index\n            let nextContainer:TerraBreadcrumbContainer = this._containers[index];\n\n            // if no more next container, select previous container and route to breadcrumb\n            if(isNullOrUndefined(nextContainer))\n            {\n                let previousContainer:TerraBreadcrumbContainer = this._containers[index - 1];\n\n                if(!isNullOrUndefined(previousContainer) && !isNullOrUndefined(previousContainer.currentSelectedBreadcrumb))\n                {\n                    this.router.navigateByUrl(previousContainer.currentSelectedBreadcrumb.routerLink);\n                }\n            }\n            else\n            {\n                this.removeBreadcrumbContainer(nextContainer);\n            }\n        }\n    }\n\n    private removeBreadcrumbsByParent(container:TerraBreadcrumbContainer, parent:TerraBreadcrumb):void\n    {\n        if(isNullOrUndefined(container))\n        {\n            return;\n        }\n\n        let currentContainerIndex:number = this._containers.indexOf(container);\n        let nextContainer:TerraBreadcrumbContainer = this._containers[currentContainerIndex + 1];\n        let filteredBreadcrumbList:Array<TerraBreadcrumb> = container.breadcrumbList.filter((bc:TerraBreadcrumb) =>\n        {\n            if(bc.parent === parent && !isNullOrUndefined(nextContainer))\n            {\n                this.removeBreadcrumbsByParent(nextContainer, bc);\n            }\n\n            return bc.parent !== parent;\n        });\n\n        if(filteredBreadcrumbList.length === 0)\n        {\n            // remove container\n            this._containers.splice(currentContainerIndex, 1);\n        }\n        else\n        {\n            // update breadcrumb list\n            container.breadcrumbList = filteredBreadcrumbList;\n        }\n    }\n}\n"]}