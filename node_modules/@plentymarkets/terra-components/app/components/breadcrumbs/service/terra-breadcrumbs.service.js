"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_breadcrumb_1 = require("../terra-breadcrumb");
var router_1 = require("@angular/router");
var util_1 = require("util");
var angular_l10n_1 = require("angular-l10n");
var terra_breadcrumb_container_1 = require("../terra-breadcrumb-container");
var url_helper_1 = require("../../../helpers/url.helper");
var string_helper_1 = require("../../../helpers/string.helper");
var TerraBreadcrumbsService = /** @class */ (function () {
    function TerraBreadcrumbsService(router, translation) {
        var _this = this;
        this.router = router;
        this.translation = translation;
        this._containers = [];
        this.router.events.filter(function (event) {
            return event instanceof router_1.NavigationEnd // navigation is done
                && !util_1.isNullOrUndefined(_this._initialPath) // initialPath is set
                && event.urlAfterRedirects.startsWith('/' + _this._initialPath); // url starts with the initial path
        }).subscribe(function (event) {
            if (!util_1.isNullOrUndefined(_this.initialRoute.children)) {
                var shortUrl = event.urlAfterRedirects.replace('/' + _this._initialPath, '');
                var urlParts_1 = shortUrl.split('/');
                var urls = urlParts_1.map(function (urlPart, index) { return urlParts_1.slice(0, index + 1).join('/'); });
                urls.forEach(function (url) {
                    _this.handleBreadcrumbForUrl(url, '/' + _this._initialPath + url);
                });
                // update breadcrumb visibility for containers that have not been checked since the url is to short
                if (urlParts_1.length < _this._containers.length) {
                    for (var j = urlParts_1.length; j < _this._containers.length; j++) {
                        _this.updateBreadcrumbVisibilities(_this._containers[j], _this._containers[j - 1].currentSelectedBreadcrumb);
                    }
                }
            }
        });
    }
    Object.defineProperty(TerraBreadcrumbsService.prototype, "initialPath", {
        set: function (value) {
            this._containers = [];
            this._initialPath = value;
            this.initialRoute = this.findRoute(value, this.router.config);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraBreadcrumbsService.prototype, "containers", {
        get: function () {
            return this._containers;
        },
        enumerable: true,
        configurable: true
    });
    TerraBreadcrumbsService.prototype.handleBreadcrumbForUrl = function (shortUrl, fullUrl) {
        var shortUrlWithoutLeadingSlash = url_helper_1.UrlHelper.removeLeadingSlash(shortUrl);
        var route = this.findRoute(shortUrlWithoutLeadingSlash, this.initialRoute.children);
        this.handleBreadcrumb(route, fullUrl, shortUrl.split('/').length - 1);
    };
    TerraBreadcrumbsService.prototype.handleBreadcrumb = function (route, url, urlPartsCount) {
        if (util_1.isNullOrUndefined(route)) {
            return;
        }
        // search for existing container - create new container if not existing
        var container = this._containers[urlPartsCount];
        if (util_1.isNullOrUndefined(container)) {
            container = new terra_breadcrumb_container_1.TerraBreadcrumbContainer();
            this._containers.push(container);
        }
        // search for existing breadcrumb
        var breadcrumb = container.breadcrumbList.find(function (bc) {
            return bc.routerLink === url;
        });
        // breadcrumb not found
        if (util_1.isNullOrUndefined(breadcrumb)) {
            var label = this.getBreadcrumbLabel(route);
            var currentContainerIndex = this._containers.indexOf(container);
            var previousContainer = this._containers[currentContainerIndex - 1];
            var parentBreadcrumb = util_1.isNullOrUndefined(previousContainer) ? undefined : previousContainer.currentSelectedBreadcrumb;
            breadcrumb = new terra_breadcrumb_1.TerraBreadcrumb(label, parentBreadcrumb, url);
            container.breadcrumbList.push(breadcrumb);
        }
        // select breadcrumb and update visibilities
        container.currentSelectedBreadcrumb = breadcrumb;
        this.updateBreadcrumbVisibilities(container, breadcrumb.parent);
    };
    TerraBreadcrumbsService.prototype.getBreadcrumbLabel = function (route) {
        var label = '';
        if (!util_1.isNullOrUndefined(route.data)) {
            if (typeof route.data.label === 'function') {
                var activatedSnapshot = this.findActivatedRouteSnapshot(this.router.routerState.snapshot.root);
                label = route.data.label(this.translation, activatedSnapshot.params, activatedSnapshot.data);
            }
            else {
                label = this.translation.translate(route.data.label);
            }
        }
        return label;
    };
    TerraBreadcrumbsService.prototype.updateBreadcrumbVisibilities = function (breadcrumbContainer, parentBreadcrumb) {
        breadcrumbContainer.breadcrumbList.forEach(function (bc) {
            bc.isHidden = bc.parent !== parentBreadcrumb || !util_1.isNullOrUndefined(bc.parent) && bc.parent.isHidden;
        });
        // is the current selected breadcrumb now hidden?
        if (breadcrumbContainer.currentSelectedBreadcrumb.isHidden) {
            // search for another breadcrumb to be selected that is not hidden
            var foundBreadcrumb = breadcrumbContainer.breadcrumbList.find(function (bc) { return !bc.isHidden; });
            if (!util_1.isNullOrUndefined(foundBreadcrumb)) {
                breadcrumbContainer.currentSelectedBreadcrumb = foundBreadcrumb;
            }
        }
    };
    // same exists in TerraRouterHelper
    TerraBreadcrumbsService.prototype.findActivatedRouteSnapshot = function (activatedRouteSnapshot) {
        if (!util_1.isNullOrUndefined(activatedRouteSnapshot.firstChild)) {
            return this.findActivatedRouteSnapshot(activatedRouteSnapshot.firstChild);
        }
        return activatedRouteSnapshot;
    };
    TerraBreadcrumbsService.prototype.findRoute = function (url, routeConfig) {
        var urlParts = url_helper_1.UrlHelper.removeLeadingSlash(url).split('/');
        var urlPart = urlParts.shift();
        var routes = routeConfig;
        var route = routeConfig.find(function (routeToFind) {
            return routeToFind.path === urlPart;
        });
        while (!util_1.isNullOrUndefined(route) && urlParts.length > 0) {
            if (!util_1.isNullOrUndefined(route.children)) {
                routes = route.children;
                urlPart = urlParts.shift();
            }
            else {
                urlPart = urlPart + '/' + urlParts.shift();
            }
            route = routes.find(function (routeToFind) {
                var splittedRoutePath = routeToFind.path.split('/');
                var parameterisedRoutes = {};
                var splittedFlatPath = urlPart.split('/');
                splittedRoutePath.forEach(function (path, index) {
                    if (path.startsWith(':')) {
                        parameterisedRoutes[path] = index;
                    }
                });
                Object.values(parameterisedRoutes).forEach(function (index) {
                    splittedRoutePath[index] = splittedFlatPath[index];
                });
                var gluedRoutePath = splittedRoutePath.join('/');
                return !string_helper_1.StringHelper.isNullUndefinedOrEmpty(routeToFind.path) &&
                    urlPart === gluedRoutePath;
            });
        }
        return route;
    };
    TerraBreadcrumbsService.prototype.checkActiveRoute = function (breadcrumb) {
        return this.router.isActive(breadcrumb.routerLink, true);
    };
    /**
     * Close the breadcrumb by given url
     * @param {string} url Url to close the breadcrumb.
     */
    TerraBreadcrumbsService.prototype.closeBreadcrumbByUrl = function (url) {
        var breadcrumb = this.findBreadcrumbByUrl(url);
        var container = this.findBreadcrumbContainerByUrl(url);
        if (!util_1.isNullOrUndefined(breadcrumb)) {
            this.closeBreadcrumb(container, breadcrumb);
        }
    };
    /**
     * Update the breadcrumb name by given url
     * @param {string} url Url to update the breadcrumb.
     * @param {string} name If not given, it will be automatically update the name by the label of the route data.
     */
    TerraBreadcrumbsService.prototype.updateBreadcrumbNameByUrl = function (url, name) {
        var breadcrumb = this.findBreadcrumbByUrl(url);
        var shortUrlWithoutLeadingSlash = url_helper_1.UrlHelper.removeLeadingSlash(url);
        var route = this.findRoute(shortUrlWithoutLeadingSlash, this.initialRoute.children);
        if (!util_1.isNullOrUndefined(route) && !util_1.isNullOrUndefined(route.data) && !util_1.isNullOrUndefined(breadcrumb)) {
            // you can set a name to update the breadcrumb name
            if (!util_1.isNullOrUndefined(name)) {
                breadcrumb.name = this.translation.translate(name);
            }
            // or it will be updated automatically from it's route data
            else {
                breadcrumb.name = this.getBreadcrumbLabel(route);
            }
        }
    };
    TerraBreadcrumbsService.prototype.findBreadcrumbContainerByUrl = function (url) {
        var urlPartsCount = url.split('/').length - 1;
        var container = this._containers[urlPartsCount];
        if (util_1.isNullOrUndefined(container)) {
            console.error('No existing breadcrumb container found.');
        }
        return container;
    };
    TerraBreadcrumbsService.prototype.findBreadcrumbByUrl = function (url) {
        var container = this.findBreadcrumbContainerByUrl(url);
        var routerLink = '/' + this._initialPath + url;
        if (!util_1.isNullOrUndefined(container) &&
            !util_1.isNullOrUndefined(container.currentSelectedBreadcrumb) &&
            container.currentSelectedBreadcrumb.routerLink === routerLink) {
            return container.currentSelectedBreadcrumb;
        }
        else {
            return container.breadcrumbList.find(function (bc) {
                return bc.routerLink === routerLink;
            });
        }
    };
    TerraBreadcrumbsService.prototype.closeBreadcrumb = function (breadcrumbContainer, breadcrumb) {
        var breadcrumbList = breadcrumbContainer.breadcrumbList;
        var breadcrumbIndex = breadcrumbList.indexOf(breadcrumb);
        // current selected breadcrumb should be closed?
        if (breadcrumbContainer.currentSelectedBreadcrumb === breadcrumb) {
            var currentUrl_1 = this.router.url;
            var currentSelectedContainer = this._containers.find(function (bcc) {
                return bcc.currentSelectedBreadcrumb.routerLink === currentUrl_1;
            });
            // get the first remaining breadcrumb
            breadcrumbContainer.currentSelectedBreadcrumb = breadcrumbIndex === 0 ? breadcrumbList[1] : breadcrumbList[0];
            var currentSelectedIndex = this._containers.indexOf(currentSelectedContainer);
            var breadcrumbContainerIndex = this._containers.indexOf(breadcrumbContainer);
            // container has no more breadcrumbs
            if (util_1.isNullOrUndefined(breadcrumbContainer.currentSelectedBreadcrumb)) {
                this.removeBreadcrumbContainer(breadcrumbContainer);
            }
            // check indexes to start routing
            else if (currentSelectedIndex >= breadcrumbContainerIndex) {
                this.router.navigateByUrl(breadcrumbContainer.currentSelectedBreadcrumb.routerLink);
            }
        }
        // delete all related breadcrumbs
        var currentContainerIndex = this._containers.indexOf(breadcrumbContainer);
        var nextContainer = this._containers[currentContainerIndex + 1];
        this.removeBreadcrumbsByParent(nextContainer, breadcrumb);
        // finally delete breadcrumb
        breadcrumbList.splice(breadcrumbIndex, 1);
    };
    TerraBreadcrumbsService.prototype.removeBreadcrumbContainer = function (breadcrumbContainer) {
        var index = this._containers.indexOf(breadcrumbContainer);
        if (index >= 0) {
            // delete current breadcrumb container
            this._containers.splice(index, 1);
            // get next breadcrumb container with the same index
            var nextContainer = this._containers[index];
            // if no more next container, select previous container and route to breadcrumb
            if (util_1.isNullOrUndefined(nextContainer)) {
                var previousContainer = this._containers[index - 1];
                if (!util_1.isNullOrUndefined(previousContainer) && !util_1.isNullOrUndefined(previousContainer.currentSelectedBreadcrumb)) {
                    this.router.navigateByUrl(previousContainer.currentSelectedBreadcrumb.routerLink);
                }
            }
            else {
                this.removeBreadcrumbContainer(nextContainer);
            }
        }
    };
    TerraBreadcrumbsService.prototype.removeBreadcrumbsByParent = function (container, parent) {
        var _this = this;
        if (util_1.isNullOrUndefined(container)) {
            return;
        }
        var currentContainerIndex = this._containers.indexOf(container);
        var nextContainer = this._containers[currentContainerIndex + 1];
        var filteredBreadcrumbList = container.breadcrumbList.filter(function (bc) {
            if (bc.parent === parent && !util_1.isNullOrUndefined(nextContainer)) {
                _this.removeBreadcrumbsByParent(nextContainer, bc);
            }
            return bc.parent !== parent;
        });
        if (filteredBreadcrumbList.length === 0) {
            // remove container
            this._containers.splice(currentContainerIndex, 1);
        }
        else {
            // update breadcrumb list
            container.breadcrumbList = filteredBreadcrumbList;
        }
    };
    TerraBreadcrumbsService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [router_1.Router,
            angular_l10n_1.TranslationService])
    ], TerraBreadcrumbsService);
    return TerraBreadcrumbsService;
}());
exports.TerraBreadcrumbsService = TerraBreadcrumbsService;

//# sourceMappingURL=terra-breadcrumbs.service.js.map
