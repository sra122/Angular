"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var util_1 = require("util");
/**
 * @author mkunze
 */
var TerraAlertComponent = /** @class */ (function () {
    function TerraAlertComponent() {
        this.alerts = [];
        if (!TerraAlertComponent_1.isCreating) {
            throw new Error('You can\'t call new in Singleton instances! Call TerraAlertComponent.getInstance() instead.');
        }
    }
    TerraAlertComponent_1 = TerraAlertComponent;
    TerraAlertComponent.getInstance = function () {
        if (util_1.isNull(TerraAlertComponent_1.instance)) {
            TerraAlertComponent_1.isCreating = true;
            TerraAlertComponent_1.instance = new TerraAlertComponent_1();
            TerraAlertComponent_1.isCreating = false;
        }
        return TerraAlertComponent_1.instance;
    };
    TerraAlertComponent.prototype.closeAlert = function (i) {
        this.alerts.splice(i, 1);
    };
    TerraAlertComponent.prototype.addAlertForPlugin = function (alert) {
        if (util_1.isNullOrUndefined(alert.dismissOnTimeout)) {
            alert.dismissOnTimeout = 5000;
        }
        var event = new CustomEvent('status', {
            detail: {
                message: alert.msg,
                type: alert.type,
                dismissOnTimeout: alert.dismissOnTimeout,
                identifier: alert.identifier
            }
        });
        window.parent.window.dispatchEvent(event);
    };
    /** @description is used to add an alert*/
    TerraAlertComponent.prototype.addAlert = function (alert) {
        if (util_1.isNullOrUndefined(alert.dismissOnTimeout)) {
            alert.dismissOnTimeout = 5000;
        }
        this.alerts.push({
            msg: alert.msg,
            type: alert.type,
            dismissOnTimeout: alert.dismissOnTimeout,
            identifier: alert.identifier
        });
    };
    TerraAlertComponent.prototype.closeAlertByIdentifier = function (identifier) {
        for (var _i = 0, _a = this.alerts; _i < _a.length; _i++) {
            var alert_1 = _a[_i];
            if (alert_1.identifier === identifier) {
                var index = this.alerts.indexOf(alert_1);
                this.closeAlert(index);
            }
        }
    };
    TerraAlertComponent.instance = null;
    TerraAlertComponent.isCreating = false;
    TerraAlertComponent = TerraAlertComponent_1 = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], TerraAlertComponent);
    return TerraAlertComponent;
    var TerraAlertComponent_1;
}());
exports.TerraAlertComponent = TerraAlertComponent;

//# sourceMappingURL=terra-alert.component.js.map
