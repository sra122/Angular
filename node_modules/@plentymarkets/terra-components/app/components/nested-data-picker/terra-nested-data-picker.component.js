"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var angular_l10n_1 = require("angular-l10n");
var forms_1 = require("@angular/forms");
var nested_data_tree_config_1 = require("./config/nested-data-tree.config");
var util_1 = require("util");
var terra_nested_data_picker_base_service_1 = require("./service/terra-nested-data-picker-base.service");
var terra_node_tree_config_1 = require("../../components/tree/node-tree/data/terra-node-tree.config");
var TerraNestedDataPickerComponent = /** @class */ (function () {
    function TerraNestedDataPickerComponent(translation, nestedTreeConfig) {
        this.translation = translation;
        this.nestedTreeConfig = nestedTreeConfig;
        this.displayResetButton = false;
        this.displaySearch = false;
        this.toggleTree = false;
        this.onTouchedCallback = function () { return undefined; };
        this.onChangeCallback = function () { return undefined; };
        this.value = null;
        this.completeNestedData = {
            id: null,
            isActive: null,
            isOpen: null,
            isVisible: null,
            name: '',
            tooltip: '',
            tooltipPlacement: '',
        };
        this.nestedList = [];
        this.nestedDataName = '';
        this.isNotInitialCall = false;
    }
    TerraNestedDataPickerComponent_1 = TerraNestedDataPickerComponent;
    TerraNestedDataPickerComponent.prototype.ngAfterContentChecked = function () {
        if (this.nestedTreeConfig.list.length === 0) {
            this.nestedTreeConfig.list = this.nestedList;
        }
    };
    TerraNestedDataPickerComponent.prototype.ngOnInit = function () {
        if (util_1.isNullOrUndefined(this.inputName)) {
            this.inputName = this.translation.translate('terraNestedDataPicker.nested');
        }
        this.nestedTreeConfig.list = this.nestedList;
        this.getNestedDataByParent(null);
    };
    // From ControlValueAccessor interface
    TerraNestedDataPickerComponent.prototype.writeValue = function (value) {
        var _this = this;
        if (!util_1.isNullOrUndefined(value)) {
            this.inputNestedService.requestNestedDataById(value).subscribe(function (data) {
                if (util_1.isNullOrUndefined(_this.nestedTreeConfig.findNodeById(value))) {
                    _this.addNodes(data, null);
                }
                var nodeToSelect = _this.nestedTreeConfig.findNodeById(value);
                if (!util_1.isNullOrUndefined(nodeToSelect)) {
                    _this.nestedTreeConfig.currentSelectedNode = nodeToSelect;
                    _this.nestedDataName = _this.nestedTreeConfig.currentSelectedNode.name;
                }
                _this.value = value;
                if (_this.isNotInitialCall) {
                    _this.updateCompleteNestedData(nodeToSelect);
                    _this.onTouchedCallback();
                    _this.onChangeCallback(_this.value);
                }
            });
        }
    };
    TerraNestedDataPickerComponent.prototype.onSelectNode = function () {
        this.isNotInitialCall = true;
        if (!util_1.isNullOrUndefined(this.nestedTreeConfig.currentSelectedNode)) {
            this.nestedDataName = this.nestedTreeConfig.currentSelectedNode.name;
            this.writeValue(this.nestedTreeConfig.currentSelectedNode.id);
        }
        this.toggleTree = !this.toggleTree;
    };
    TerraNestedDataPickerComponent.prototype.reset = function () {
        this.nestedTreeConfig.currentSelectedNode = {
            id: null,
            isActive: null,
            isOpen: null,
            isVisible: null,
            name: '',
            tooltip: '',
            tooltipPlacement: '',
        };
        this.nestedDataName = '';
        this.value = 0;
        this.onTouchedCallback();
        this.onChangeCallback(this.value);
    };
    TerraNestedDataPickerComponent.prototype.updateCompleteNestedData = function (nested) {
        this.completeNestedData.id = +nested.id;
        this.completeNestedData.isActive = nested.isActive;
        this.completeNestedData.isOpen = nested.isOpen;
        this.completeNestedData.isVisible = nested.isVisible;
        this.completeNestedData.name = nested.name;
        this.completeNestedData.tooltip = nested.tooltip;
        this.completeNestedData.tooltipPlacement = nested.tooltipPlacement;
    };
    // Set touched on blur
    TerraNestedDataPickerComponent.prototype.onBlur = function () {
        this.onTouchedCallback();
    };
    // From ControlValueAccessor interface
    TerraNestedDataPickerComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    // From ControlValueAccessor interface
    TerraNestedDataPickerComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    TerraNestedDataPickerComponent.prototype.showTree = function () {
        this.toggleTree = !this.toggleTree;
    };
    TerraNestedDataPickerComponent.prototype.getNestedData = function (parentId) {
        var _this = this;
        var obs = this.inputNestedService.requestNestedData(parentId);
        obs.subscribe(function (data) {
            _this.addNodes(data, parentId);
        });
        return obs;
    };
    TerraNestedDataPickerComponent.prototype.getNestedDataByParent = function (parentNode) {
        var _this = this;
        var id = null;
        if (!util_1.isNullOrUndefined(parentNode)) {
            id = parentNode.id;
        }
        this.inputNestedService.requestNestedData(id).subscribe(function (data) {
            if (util_1.isNullOrUndefined(parentNode)) {
                _this.addNodes(data, id);
            }
            else {
                _this.addNodes(data, parentNode.id);
            }
        });
    };
    TerraNestedDataPickerComponent.prototype.getNestedDataByParentId = function (parentId) {
        var _this = this;
        return function () { return _this.getNestedData(parentId); };
    };
    TerraNestedDataPickerComponent.prototype.addNodes = function (nestedData, parentId) {
        var _this = this;
        // List of Categories which will be turned into Nodes to add to the node tree
        var entries = nestedData.entries;
        // Necessary for re-initializing of the Node Tree after data was loaded
        if (this.nestedTreeConfig.list.length === 1 && this.nestedTreeConfig.list[0] === this.nestedTreeConfig.currentSelectedNode) {
            this.nestedTreeConfig.removeNodeById(this.nestedTreeConfig.currentSelectedNode.id);
            this.nestedTreeConfig.list = [];
        }
        if (!util_1.isNullOrUndefined(entries)) {
            entries.forEach(function (entry) {
                var nestData = entry;
                var nestedDetail = null;
                // If the node hasn't already been added the routine will be started
                if (util_1.isNullOrUndefined(_this.nestedTreeConfig.findNodeById(nestData.id)) && nestData.details.length > 0) {
                    nestedDetail = nestData.details[0];
                    // Create Node to add to tree later
                    var childNode = {
                        id: entry.id,
                        name: nestedDetail.name,
                        isVisible: true,
                        tooltip: 'ID: ' + nestData.id,
                        tooltipPlacement: 'top',
                        value: {
                            data: nestData
                        }
                    };
                    var parentNode = void 0;
                    // If the category has a parent, the parent node is created from the parentId in the category data
                    if (!util_1.isNullOrUndefined(nestData.parentId)) {
                        parentNode = _this.nestedTreeConfig.findNodeById(nestData.parentId);
                    }
                    // If the parentNode is still null it is tried to create the parent node out of the given id
                    if (util_1.isNullOrUndefined(parentNode)) {
                        if (util_1.isNullOrUndefined(parentId)) {
                            parentNode = null;
                        }
                        else {
                            parentNode = _this.nestedTreeConfig.findNodeById(parentId);
                        }
                    }
                    // If the category has children the lazy-loading method will be added to the parent node
                    if (nestData.hasChildren) {
                        childNode.onLazyLoad = _this.getNestedDataByParentId(childNode.id);
                    }
                    // The finished node is added to the node tree
                    _this.nestedTreeConfig.addNode(childNode, parentNode);
                }
            });
        }
        // Current List is updated
        this.nestedList = this.nestedTreeConfig.list;
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", terra_nested_data_picker_base_service_1.TerraNestedDataPickerBaseService)
    ], TerraNestedDataPickerComponent.prototype, "inputNestedService", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraNestedDataPickerComponent.prototype, "inputIsDisabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraNestedDataPickerComponent.prototype, "inputTooltipText", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraNestedDataPickerComponent.prototype, "inputName", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraNestedDataPickerComponent.prototype, "displayResetButton", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraNestedDataPickerComponent.prototype, "displaySearch", void 0);
    TerraNestedDataPickerComponent = TerraNestedDataPickerComponent_1 = __decorate([
        core_1.Component({
            selector: 'terra-nested-data-picker',
            template: require('./terra-nested-data-picker.component.html'),
            styles: [require('./terra-nested-data-picker.component.scss')],
            providers: [
                {
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return TerraNestedDataPickerComponent_1; }),
                    multi: true
                },
                nested_data_tree_config_1.NestedDataTreeConfig,
                terra_node_tree_config_1.TerraNodeTreeConfig
            ]
        }),
        __metadata("design:paramtypes", [angular_l10n_1.TranslationService,
            terra_node_tree_config_1.TerraNodeTreeConfig])
    ], TerraNestedDataPickerComponent);
    return TerraNestedDataPickerComponent;
    var TerraNestedDataPickerComponent_1;
}());
exports.TerraNestedDataPickerComponent = TerraNestedDataPickerComponent;

//# sourceMappingURL=terra-nested-data-picker.component.js.map
