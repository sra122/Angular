"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var angular_l10n_1 = require("angular-l10n");
var forms_1 = require("@angular/forms");
var terra_base_editor_component_1 = require("../base-editor/terra-base-editor.component");
var terra_overlay_component_1 = require("../../layouts/overlay/terra-overlay.component");
var util_1 = require("util");
var html_linter_helper_1 = require("./helper/html-linter.helper");
var html_linter_rule_enum_1 = require("./helper/html-linter-rule.enum");
var TerraCodeEditorComponent = /** @class */ (function (_super) {
    __extends(TerraCodeEditorComponent, _super);
    function TerraCodeEditorComponent(translation, myElement) {
        var _this = _super.call(this, translation, myElement) || this;
        _this.translation = translation;
        _this.myElement = myElement;
        _this.showCodeView = false;
        _this.editorContent = '';
        _this.rawContent = '';
        _this.isValidMarkup = true;
        _this.invalidMarkupHint = '';
        _this.isInitialized = false;
        // initialize placeholder
        _this.placeholder = _this.translation.translate('terraNoteEditor.insertText');
        var self = _this;
        _this.modules = {
            toolbar: {
                container: [
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                    ['code-block']
                ],
                handlers: {
                    'code-block': function () {
                        // 'this' points to the toolbar instance of the quill editor.
                        if (!self.showCodeView) {
                            self.rawContent = self.value;
                            self.showCodeView = true;
                        }
                    }
                }
            }
        };
        _this.linter = new html_linter_helper_1.HtmlLinter([
            html_linter_rule_enum_1.HtmlLinterRule.attrUnsafeChars,
            html_linter_rule_enum_1.HtmlLinterRule.doctypeHtml5,
            html_linter_rule_enum_1.HtmlLinterRule.inlineScriptDisabled,
            html_linter_rule_enum_1.HtmlLinterRule.tagPair,
            html_linter_rule_enum_1.HtmlLinterRule.styleDisabled
        ]);
        return _this;
    }
    TerraCodeEditorComponent_1 = TerraCodeEditorComponent;
    TerraCodeEditorComponent.prototype.writeValue = function (value) {
        var _this = this;
        this.value = value;
        // check if value is assigned first (initially)
        if (!this.isInitialized) {
            this.editorContent = value;
            this.rawContent = value;
            setTimeout(function () {
                // check if editor will change the markup
                _this.checkCodeFormat()
                    .then(function (hasChanges) {
                    // show raw content if editor will change the markup
                    _this.showCodeView = hasChanges;
                    // wait until next tick to avoid emitting changes when initially assigning values
                    setTimeout(function () {
                        _this.isInitialized = true;
                    });
                });
            });
        }
    };
    TerraCodeEditorComponent.prototype.ngOnInit = function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        this.viewConfirmation = {
            primaryButton: {
                icon: 'icon-check',
                caption: this.translation.translate('terraCodeEditor.changeViewOverlay.primaryButton', localStorage.getItem('lang')),
                clickFunction: function () {
                    _this.closeCodeView(true);
                    _this.overlay.hideOverlay();
                }
            },
            secondaryButton: {
                icon: 'icon-cancel',
                caption: this.translation.translate('terraCodeEditor.changeViewOverlay.secondaryButton', localStorage.getItem('lang')),
                clickFunction: function () {
                    _this.overlay.hideOverlay();
                }
            }
        };
    };
    TerraCodeEditorComponent.prototype.emitChanges = function (isEditorContent) {
        if (isEditorContent === void 0) { isEditorContent = true; }
        if (!this.isInitialized) {
            return;
        }
        if (isEditorContent && !this.showCodeView) {
            this.value = this.editorContent;
            this.onChangeCallback(this.value);
        }
        else if (!isEditorContent && this.showCodeView) {
            if (this.validateMarkup()) {
                this.value = this.safeHtml(this.rawContent);
                this.onChangeCallback(this.value);
            }
        }
    };
    TerraCodeEditorComponent.prototype.closeCodeView = function (forceClose) {
        var _this = this;
        if (forceClose === void 0) { forceClose = false; }
        this.checkCodeFormat()
            .then(function (hasChanges) {
            if (hasChanges && !forceClose) {
                // editor has changed the content
                _this.overlay.showOverlay();
            }
            else {
                // no changes to content => show editor
                _this.showCodeView = false;
                // force switching to editor even if this will lead to changes of the markup
                if (forceClose) {
                    _this.emitChanges(true);
                }
            }
        });
    };
    TerraCodeEditorComponent.prototype.checkCodeFormat = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            // store current editor value temporarily
            var tmpValue = _this.editorContent;
            // assign raw content to editor
            _this.editorContent = _this.rawContent;
            // wait until change detection has been applied
            setTimeout(function () {
                // check if editor has changed the value by removing any tags or attributes
                // remove whitespaces before comparison to ignore code formattings
                if (!util_1.isNullOrUndefined(_this.editorContent) || !util_1.isNullOrUndefined(_this.rawContent)) {
                    if (_this.editorContent.replace(/\s/g, '') !== _this.rawContent.replace(/\s/g, '')) {
                        resolve(true);
                        // re-assign the original value
                        _this.editorContent = tmpValue;
                    }
                    else {
                        resolve(false);
                    }
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    TerraCodeEditorComponent.prototype.validateMarkup = function () {
        this.isValidMarkup = true;
        var errors = this.linter.verify('<div>' + this.rawContent + '</div>');
        if (errors.length > 0) {
            this.isValidMarkup = false;
            this.invalidMarkupHint = this.translation.translate('terraCodeEditor.linterMessage', {
                line: errors[0].line,
                col: errors[0].col,
                message: this.translation.translate('terraCodeEditor.linterRules.' + errors[0].rule)
            });
        }
        return this.isValidMarkup;
    };
    TerraCodeEditorComponent.prototype.safeHtml = function (input) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(input, 'text/html');
        return doc.body.innerHTML;
    };
    __decorate([
        core_1.ViewChild('viewConfirmationOverlay'),
        __metadata("design:type", terra_overlay_component_1.TerraOverlayComponent)
    ], TerraCodeEditorComponent.prototype, "overlay", void 0);
    TerraCodeEditorComponent = TerraCodeEditorComponent_1 = __decorate([
        core_1.Component({
            selector: 'terra-code-editor',
            template: require('./terra-code-editor.component.html'),
            styles: [
                require('./terra-code-editor.component.scss'),
                require('quill/dist/quill.bubble.css'),
                require('quill/dist/quill.snow.css'),
                require('./terra-code-editor.component.glob.scss').toString()
            ],
            providers: [{
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: TerraCodeEditorComponent_1,
                    multi: true
                }]
        }),
        __metadata("design:paramtypes", [angular_l10n_1.TranslationService, core_1.ElementRef])
    ], TerraCodeEditorComponent);
    return TerraCodeEditorComponent;
    var TerraCodeEditorComponent_1;
}(terra_base_editor_component_1.TerraBaseEditorComponent));
exports.TerraCodeEditorComponent = TerraCodeEditorComponent;

//# sourceMappingURL=terra-code-editor.component.js.map
