{"version":3,"sources":["app/components/editors/code-editor/terra-code-editor.component.ts"],"names":[],"mappings":"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","file":"terra-code-editor.component.js","sourcesContent":["import {\n    Component,\n    ElementRef,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport { TranslationService } from 'angular-l10n';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TerraBaseEditorComponent } from '../base-editor/terra-base-editor.component';\nimport { TerraOverlayComponent } from '../../layouts/overlay/terra-overlay.component';\nimport { TerraButtonInterface } from '../../../../';\nimport { isNullOrUndefined } from 'util';\nimport { HtmlLinter } from './helper/html-linter.helper';\nimport { HtmlLinterRule } from './helper/html-linter-rule.enum';\nimport { HtmlLinterMessageInterface } from './helper/html-linter-message.interface';\n\n@Component({\n    selector:  'terra-code-editor',\n    template:  require('./terra-code-editor.component.html'),\n    styles:    [\n        require('./terra-code-editor.component.scss'),\n        require('quill/dist/quill.bubble.css'),\n        require('quill/dist/quill.snow.css'),\n        require('./terra-code-editor.component.glob.scss').toString()\n    ],\n    providers: [{\n        provide:     NG_VALUE_ACCESSOR,\n        useExisting: TerraCodeEditorComponent,\n        multi:       true\n    }]\n})\nexport class TerraCodeEditorComponent extends TerraBaseEditorComponent implements OnInit\n{\n    public showCodeView:boolean = false;\n    public editorContent:string = '';\n    public rawContent:string = '';\n\n    @ViewChild('viewConfirmationOverlay')\n    public overlay:TerraOverlayComponent;\n\n    protected viewConfirmation:{primaryButton:TerraButtonInterface, secondaryButton:TerraButtonInterface};\n\n    protected isValidMarkup:boolean = true;\n\n    protected invalidMarkupHint:string = '';\n\n    private isInitialized:boolean = false;\n\n    private linter:HtmlLinter;\n\n    constructor(protected translation:TranslationService, protected myElement:ElementRef)\n    {\n        super(translation, myElement);\n        // initialize placeholder\n        this.placeholder = this.translation.translate('terraNoteEditor.insertText');\n\n        const self:TerraCodeEditorComponent = this;\n\n        this.modules = {\n            toolbar: {\n                container: [\n                    ['bold', 'italic', 'underline', 'strike'],\n                    [{'list': 'ordered'}, {'list': 'bullet'}],\n                    [{'header': [1, 2, 3, 4, 5, 6, false]}],\n                    ['code-block']\n                ],\n                handlers: {\n                    'code-block': function():void\n                    {\n                        // 'this' points to the toolbar instance of the quill editor.\n                        if (!self.showCodeView)\n                        {\n                            self.rawContent = self.value;\n                            self.showCodeView = true;\n                        }\n                    }\n                }\n            }\n        };\n\n        this.linter = new HtmlLinter([\n            HtmlLinterRule.attrUnsafeChars,\n            HtmlLinterRule.doctypeHtml5,\n            HtmlLinterRule.inlineScriptDisabled,\n            HtmlLinterRule.tagPair,\n            HtmlLinterRule.styleDisabled\n        ]);\n    }\n\n    public writeValue(value:string):void\n    {\n        this.value = value;\n        // check if value is assigned first (initially)\n        if (!this.isInitialized)\n        {\n            this.editorContent = value;\n            this.rawContent    = value;\n            setTimeout(() =>\n            {\n                // check if editor will change the markup\n                this.checkCodeFormat()\n                    .then((hasChanges:boolean) =>\n                    {\n                        // show raw content if editor will change the markup\n                        this.showCodeView   = hasChanges;\n\n                        // wait until next tick to avoid emitting changes when initially assigning values\n                        setTimeout(() =>\n                        {\n                            this.isInitialized  = true;\n                        });\n                    });\n            });\n        }\n    }\n\n    public ngOnInit():void\n    {\n        super.ngOnInit();\n        this.viewConfirmation = {\n            primaryButton: {\n                icon: 'icon-check',\n                caption: this.translation.translate('terraCodeEditor.changeViewOverlay.primaryButton',\n                         localStorage.getItem('lang')),\n                clickFunction: ():void =>\n                {\n                    this.closeCodeView(true);\n                    this.overlay.hideOverlay();\n                }\n            },\n            secondaryButton: {\n                icon: 'icon-cancel',\n                caption: this.translation.translate('terraCodeEditor.changeViewOverlay.secondaryButton',\n                         localStorage.getItem('lang')),\n                clickFunction: ():void =>\n                {\n                    this.overlay.hideOverlay();\n                }\n            }\n        };\n    }\n\n    protected emitChanges(isEditorContent:boolean = true):void\n    {\n        if ( !this.isInitialized )\n        {\n            return;\n        }\n\n        if ( isEditorContent && !this.showCodeView )\n        {\n            this.value = this.editorContent;\n            this.onChangeCallback(this.value);\n        }\n        else if ( !isEditorContent && this.showCodeView )\n        {\n            if ( this.validateMarkup() )\n            {\n                this.value = this.safeHtml(this.rawContent);\n                this.onChangeCallback(this.value);\n            }\n        }\n\n    }\n\n    protected closeCodeView(forceClose:boolean = false):void\n    {\n        this.checkCodeFormat()\n            .then((hasChanges:boolean) =>\n            {\n                if ( hasChanges && !forceClose )\n                {\n                    // editor has changed the content\n                    this.overlay.showOverlay();\n                }\n                else\n                {\n                    // no changes to content => show editor\n                    this.showCodeView = false;\n\n                    // force switching to editor even if this will lead to changes of the markup\n                    if ( forceClose )\n                    {\n                        this.emitChanges(true);\n                    }\n                }\n            });\n    }\n\n    private checkCodeFormat():Promise<boolean>\n    {\n        return new Promise((resolve:Function, reject:Function):void =>\n        {\n            // store current editor value temporarily\n            const tmpValue:string = this.editorContent;\n\n            // assign raw content to editor\n            this.editorContent = this.rawContent;\n\n            // wait until change detection has been applied\n            setTimeout(() =>\n            {\n                // check if editor has changed the value by removing any tags or attributes\n                // remove whitespaces before comparison to ignore code formattings\n                if(!isNullOrUndefined(this.editorContent) || !isNullOrUndefined(this.rawContent))\n                {\n                    if(this.editorContent.replace(/\\s/g, '') !== this.rawContent.replace(/\\s/g, ''))\n                    {\n                        resolve(true);\n\n                        // re-assign the original value\n                        this.editorContent = tmpValue;\n                    }\n                    else\n                    {\n                        resolve(false);\n                    }\n                }\n                else\n                {\n                    resolve(false);\n                }\n            });\n        });\n    }\n\n    private validateMarkup():boolean\n    {\n        this.isValidMarkup = true;\n\n        let errors:Array<HtmlLinterMessageInterface> = this.linter.verify(\n            '<div>' + this.rawContent + '</div>'\n        );\n\n        if ( errors.length > 0 )\n        {\n            this.isValidMarkup = false;\n            this.invalidMarkupHint = this.translation.translate(\n                'terraCodeEditor.linterMessage',\n                {\n                    line: errors[0].line,\n                    col: errors[0].col,\n                    message: this.translation.translate('terraCodeEditor.linterRules.' + errors[0].rule )\n                }\n            );\n        }\n\n        return this.isValidMarkup;\n    }\n\n    private safeHtml(input:string):string\n    {\n        let parser:DOMParser = new DOMParser();\n        let doc:HTMLDocument = parser.parseFromString(input, 'text/html');\n        return doc.body.innerHTML;\n    }\n}\n"]}