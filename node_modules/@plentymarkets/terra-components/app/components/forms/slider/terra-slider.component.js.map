{"version":3,"sources":["app/components/forms/slider/terra-slider.component.ts"],"names":[],"mappings":"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","file":"terra-slider.component.js","sourcesContent":["import {\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    ViewChild\n} from '@angular/core';\nimport { isNullOrUndefined } from 'util';\nimport { GridOptions } from '../../interactables/gridOptions.interface';\nimport { TerraSliderTick } from './data/terra-slider-tick';\nimport { InteractEvent } from 'interactjs';\n\n@Component({\n    selector: 'terra-slider',\n    template: require('./terra-slider.component.html'),\n    styles:   [require('./terra-slider.component.scss')]\n})\nexport class TerraSliderComponent implements OnInit\n{\n    @Input()\n    public inputValue:number;\n\n    @Output()\n    public inputValueChange:EventEmitter<number> = new EventEmitter<number>();\n\n    @Input()\n    public inputName:string;\n\n    @Input()\n    public inputMin:number = 0;\n\n    @Input()\n    public inputMax:number = 1;\n\n    @Input()\n    public inputInterval:number = 0;\n\n    @Input()\n    public inputPrecision:number = null;\n\n    @Input()\n    public inputShowMinMax:boolean = false;\n\n    @Input()\n    public inputShowTicks:boolean = false;\n\n    @Input()\n    public inputIsDisabled:boolean = false;\n\n    @ViewChild('sliderBar', {read: ElementRef})\n    private sliderBarElement:ElementRef;\n\n    constructor(private element:ElementRef, private changeDetector:ChangeDetectorRef)\n    {\n    }\n\n    public get handlePosition():number\n    {\n        let sliderWidth:number = this.sliderBarElement.nativeElement.getBoundingClientRect().width;\n        let percentage:number = Math.abs(this.inputMin - this.inputValue) / this.calculateRangeOfSlider();\n\n        if(percentage < 0)\n        {\n            return 0;\n        }\n\n        if(percentage > 1)\n        {\n            return sliderWidth;\n        }\n\n        return sliderWidth * percentage;\n    }\n\n    public set handlePosition(value:number)\n    {\n        let sliderWidth:number = this.sliderBarElement.nativeElement.getBoundingClientRect().width;\n        let percentage:number = (value / sliderWidth) * 100;\n        let valuePerPercent:number = this.calculateRangeOfSlider() / 100;\n        this.inputValue = this.inputMin + (percentage * valuePerPercent);\n\n        if(this.inputInterval > 0)\n        {\n            let diff:number = this.inputValue % this.inputInterval;\n            if(diff !== 0)\n            {\n                if(diff < this.inputInterval / 2)\n                {\n                    this.inputValue -= diff;\n                }\n                else\n                {\n                    this.inputValue += this.inputInterval - diff;\n                }\n            }\n        }\n\n        if(this.inputValue < this.inputMin)\n        {\n            this.inputValue = this.inputMin;\n        }\n\n        if(this.inputValue > this.inputMax)\n        {\n            this.inputValue = this.inputMax;\n        }\n\n        this.inputValueChange.emit(this.inputValue);\n\n        this.changeDetector.detectChanges();\n    }\n\n    private get grid():GridOptions\n    {\n        if(this.inputInterval > 0)\n        {\n            return {\n                x: this.element.nativeElement.getBoundingClientRect().width / this.calculateNumberOfSteps(),\n                y: 0\n            };\n        }\n\n        return null;\n    }\n\n    public ngOnInit():void\n    {\n        if(isNullOrUndefined(this.inputValue))\n        {\n            this.inputValue = this.inputMin + (this.calculateRangeOfSlider() / 2);\n        }\n\n        if(isNullOrUndefined(this.inputPrecision))\n        {\n            if(this.inputInterval > 0)\n            {\n                let stepSize:number = this.inputInterval;\n                let steps:Array<number> = [];\n                let current:number = this.inputMin;\n\n                while(current <= this.inputMax)\n                {\n                    steps.push(current);\n                    current += stepSize;\n                }\n\n                this.inputPrecision = Math.max(\n                    ...steps.map((step:number):number =>\n                    {\n                        let parts:Array<string> = ('' + step).split('.');\n\n                        if(!parts[1])\n                        {\n                            return 0;\n                        }\n                        else\n                        {\n                            let match:RegExpExecArray = /[1-9]/g.exec(parts[1].substr(0, 3));\n\n                            if(match)\n                            {\n                                return match.index;\n                            }\n                            else\n                            {\n                                return 0;\n                            }\n                        }\n                    })\n                );\n            }\n            else\n            {\n                this.inputPrecision = 5 - Math.max(('' + this.inputMin).length, ('' + this.inputMax).length);\n            }\n\n        }\n\n        if(this.inputPrecision > 3)\n        {\n            this.inputPrecision = 3;\n        }\n    }\n\n    public onDrag(event:InteractEvent):void\n    {\n        this.moveToPosition(event.pageX);\n    }\n\n    public onBarClicked(event:MouseEvent):void\n    {\n        this.moveToPosition(event.pageX);\n    }\n\n    private moveToPosition(position:number):void\n    {\n        if(!this.inputIsDisabled)\n        {\n            let sliderRect:any | ClientRect = this.sliderBarElement.nativeElement.getBoundingClientRect();\n            this.handlePosition = position - sliderRect.left;\n        }\n    }\n\n    public getTicks():Array<TerraSliderTick>\n    {\n        let ticks:Array<TerraSliderTick> = [];\n        let numberOfTicks:number = 10;\n\n        if(this.inputInterval > 0)\n        {\n            numberOfTicks = this.calculateNumberOfSteps();\n        }\n\n        for(let i:number = 1; i < numberOfTicks; i++)\n        {\n            let positionInPercent:number = i * (100 / numberOfTicks);\n\n            ticks.push(\n                new TerraSliderTick(\n                    positionInPercent,\n                    this.calculateValueFromPercent(positionInPercent)\n                )\n            );\n        }\n\n        return ticks;\n    }\n\n    private calculateRangeOfSlider():number\n    {\n        return Math.abs(this.inputMin - this.inputMax);\n    }\n\n    private calculateValueFromPercent(positionInPercent:number):number\n    {\n        return this.inputMin + (this.calculateRangeOfSlider() * (positionInPercent / 100));\n    }\n\n    private calculateNumberOfSteps():number\n    {\n        return this.calculateRangeOfSlider() / this.inputInterval;\n    }\n}\n"]}