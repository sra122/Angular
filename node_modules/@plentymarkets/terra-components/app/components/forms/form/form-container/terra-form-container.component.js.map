{"version":3,"sources":["app/components/forms/form/form-container/terra-form-container.component.ts"],"names":[],"mappings":"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","file":"terra-form-container.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    Type\n} from '@angular/core';\nimport { TerraFormScope } from '../model/terra-form-scope.data';\nimport {\n    isNullOrUndefined,\n    isString\n} from 'util';\nimport { TerraFormFieldInterface } from '../model/terra-form-field.interface';\nimport { TerraKeyValuePairInterface } from '../../../../models/terra-key-value-pair.interface';\n\n@Component({\n    selector: 'terra-form-container',\n    template: require('./terra-form-container.component.html'),\n    styles:   [require('./terra-form-container.component.scss')]\n})\nexport class TerraFormContainerComponent implements OnInit, OnChanges\n{\n    @Input()\n    public inputScope:TerraFormScope;\n\n    @Input()\n    public inputControlTypeMap:{ [key:string]:Type<any> } = {};\n\n    @Input()\n    public set inputValue(value:any)\n    {\n        if(isNullOrUndefined(value))\n        {\n            this.value = {};\n        }\n        else\n        {\n            this.value = value;\n        }\n    }\n\n    public get inputValue():any\n    {\n        return this.value;\n    }\n\n    @Input()\n    public set inputFormFields(fields:{ [key:string]:TerraFormFieldInterface })\n    {\n        this.formFields = Object.keys(fields)\n                                .map((key:string) =>\n                                {\n                                    return {\n                                        key:   key,\n                                        value: fields[key]\n                                    };\n                                });\n\n        this.updateFieldVisibility();\n    }\n\n    @Input()\n    public inputIsDisabled:boolean = false;\n\n    @Output()\n    public outputFormValueChanged:EventEmitter<TerraKeyValuePairInterface<any>> = new EventEmitter<TerraKeyValuePairInterface<any>>();\n\n    protected formFields:Array<TerraKeyValuePairInterface<TerraFormFieldInterface>> = [];\n    protected formFieldVisibility:{ [key:string]:boolean } = {};\n\n    private value:any = {};\n\n    public ngOnInit():void\n    {\n        this.inputScope.onDataChanged.subscribe((data:any) =>\n        {\n            this.updateFieldVisibility();\n        });\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if(changes.hasOwnProperty('inputScope'))\n        {\n            this.updateFieldVisibility();\n        }\n    }\n\n    protected onFormValueChanged(key:string, value:any):void\n    {\n        this.value[key] = value;\n        this.updateFieldVisibility();\n        this.outputFormValueChanged.next({\n            key:   key,\n            value: value\n        });\n    }\n\n    private updateFieldVisibility():void\n    {\n        this.formFields\n            .forEach((field:TerraKeyValuePairInterface<TerraFormFieldInterface>) =>\n            {\n                if(isString(field.value.isVisible))\n                {\n                    this.formFieldVisibility[field.key] = this.inputScope.evaluate(field.value.isVisible);\n                }\n                else\n                {\n                    this.formFieldVisibility[field.key] = isNullOrUndefined(field.value.isVisible) || field.value.isVisible;\n                }\n            });\n    }\n}\n"]}