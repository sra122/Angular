{"version":3,"sources":["app/components/forms/form/helper/terra-form-field.helper.ts"],"names":[],"mappings":"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","file":"terra-form-field.helper.js","sourcesContent":["import 'reflect-metadata';\nimport {\n    isArray,\n    isFunction,\n    isNullOrUndefined\n} from 'util';\nimport { TerraFormFieldBaseContainer } from '../../dynamic-form/data/terra-form-field-base-container';\nimport { TerraFormFieldCodeEditorOptions } from '../../dynamic-form/data/terra-form-field-code-editor';\nimport { TerraFormFieldInputDouble } from '../../dynamic-form/data/terra-form-field-input-double';\nimport { TerraFormFieldInputFile } from '../../dynamic-form/data/terra-form-field-input-file';\nimport { TerraFormFieldMultiCheckBox } from '../../dynamic-form/data/terra-form-field-multi-check-box';\nimport {\n    TERRA_FORM_PROPERTY_METADATA_KEY,\n    TerraControlTypeEnum,\n    TerraFormFieldBase,\n    TerraFormFieldInputText,\n    TerraFormFieldSelectBox,\n    TerraJsonToFormFieldService,\n    TerraFormFieldInterface\n} from '../../../../../';\n\nexport class TerraFormFieldHelper\n{\n    private static readonly CONTROL_TYPE_MAP:{ [key:string]:string } = {\n        checkBox:             'checkbox',\n        conditionalContainer: 'vertical',\n        datePicker:           'date',\n        horizontalContainer:  'horizontal',\n        inputFile:            'file',\n        inputText:            'text',\n        inputTextArea:        'textarea',\n        inputNumber:          'number',\n        inputDouble:          'double',\n        selectBox:            'select',\n        verticalContainer:    'vertical',\n        categoryPicker:       'category',\n        multiCheckBox:        'checkboxGroup',\n        noteEditor:           'noteEditor',\n        codeEditor:           'codeEditor'\n    };\n\n    public static extractFormFields(formModel:any):{ [key:string]:TerraFormFieldInterface }\n    {\n        let formFields:{ [key:string]:TerraFormFieldInterface }\n            = Reflect.getMetadata(TERRA_FORM_PROPERTY_METADATA_KEY, formModel.constructor);\n\n        if(!isNullOrUndefined(formFields))\n        {\n            Object.keys(formFields)\n                  .forEach((formFieldProperty:string) =>\n                  {\n                      let formField:TerraFormFieldInterface = formFields[formFieldProperty];\n                      if(isNullOrUndefined(formField.isList))\n                      {\n                          formField.isList = Reflect.getMetadata('design:type', formModel.constructor, formFieldProperty) === Array;\n                      }\n\n                      if(!isNullOrUndefined(formModel[formFieldProperty])\n                         && Reflect.hasMetadata(TERRA_FORM_PROPERTY_METADATA_KEY, formModel[formFieldProperty].constructor))\n                      {\n                          formField.children = TerraFormFieldHelper.extractFormFields(formModel[formFieldProperty]);\n                      }\n                  });\n        }\n        console.log(formFields);\n        return formFields;\n    }\n\n    public static injectOption(formFields:{ [key:string]:TerraFormFieldInterface },\n                               type:string,\n                               optionKey:string,\n                               optionValue:any):{ [key:string]:TerraFormFieldInterface }\n    {\n        Object.keys(formFields).forEach((key:string) =>\n        {\n            if(formFields[key].type === type)\n            {\n                formFields[key].options = formFields[key].options || {};\n                formFields[key].options[optionKey] = optionValue;\n            }\n            if(!isNullOrUndefined(formFields[key].children))\n            {\n                formFields[key].children = this.injectOption(formFields[key].children, type, optionKey, optionValue);\n            }\n        });\n\n        return formFields;\n    }\n\n    public static isLegacyFormFields(formFields:{ [key:string]:any } | Array<TerraFormFieldBase<any>>):boolean\n    {\n        return isArray(formFields) || Object.keys(formFields).some((key:string) => !isNullOrUndefined(formFields[key].label));\n    }\n\n    public static detectLegacyFormFields(formFields:{ [key:string]:any } | Array<TerraFormFieldBase<any>>):{ [key:string]:TerraFormFieldInterface }\n    {\n        if(isArray(formFields))\n        {\n            let transformedFields:{ [key:string]:TerraFormFieldInterface } = {};\n            formFields.forEach((field:TerraFormFieldBase<any>) =>\n            {\n                let transformedField:{ key:string, field:TerraFormFieldInterface } = this.transformLegacyFormField(field);\n                transformedFields[transformedField.key] = transformedField.field;\n            });\n            return transformedFields;\n        }\n        else if(TerraFormFieldHelper.isLegacyFormFields(formFields))\n        {\n            return this.detectLegacyFormFields(\n                TerraJsonToFormFieldService.generateFormFields(formFields)\n            );\n        }\n\n        return <{ [key:string]:TerraFormFieldInterface }> formFields;\n    }\n\n    private static transformLegacyFormField(field:TerraFormFieldBase<any>):{ key:string, field:TerraFormFieldInterface }\n    {\n        let result:{ key:string, field:TerraFormFieldInterface } = {\n            key:   field.key,\n            field: null\n        };\n        let type:string = this.CONTROL_TYPE_MAP[field.controlType];\n\n        result.field = {\n            type:    type,\n            options: {\n                name:             field.label,\n                tooltip:          field.tooltip,\n                tooltipPlacement: field.tooltipPlacement,\n                required:         field.required\n            }\n        };\n\n        let transformFn:string = 'transform' + type.charAt(0).toUpperCase() + type.substr(1) + 'Field';\n        if(isFunction(this[transformFn]))\n        {\n            result.field = this[transformFn](result.field, field);\n        }\n\n        if(!!field.pattern)\n        {\n            result.field.isValid = field.pattern.toString();\n        }\n        else\n        {\n            let validators:Array<string> = [];\n            if(field.minLength >= 0)\n            {\n                validators.push('this.length >= ' + field.minLength);\n            }\n            if(field.maxLength >= 0)\n            {\n                validators.push('this.length <= ' + field.maxLength);\n            }\n            if(!isNullOrUndefined(field.minValue))\n            {\n                validators.push('this >= ' + field.minValue);\n            }\n            if(!isNullOrUndefined(field.maxValue))\n            {\n                validators.push('this <= ' + field.maxValue);\n            }\n            result.field.isValid = validators.join(' && ');\n        }\n\n        if(field.controlType === TerraControlTypeEnum.CONDITIONAL_CONTAINER\n           || field.controlType === TerraControlTypeEnum.HORIZONTAL_CONTAINER\n           || field.controlType === TerraControlTypeEnum.VERTICAL_CONTAINER)\n        {\n            result.field.children = this.detectLegacyFormFields(\n                (<TerraFormFieldBaseContainer> field).containerEntries\n            );\n        }\n\n        return result;\n    }\n\n    private static transformCodeEditorField(result:TerraFormFieldInterface,\n                                            field:TerraFormFieldCodeEditorOptions):TerraFormFieldInterface\n    {\n        result.options.fixedHeight = field.fixedHeight;\n        return result;\n    }\n\n    private static transformDoubleField(result:TerraFormFieldInterface,\n                                        field:TerraFormFieldInputDouble):TerraFormFieldInterface\n    {\n        result.options.isPrice = field.isPrice;\n        result.options.decimalCount = field.decimalCount;\n        return result;\n    }\n\n    private static transformFileField(result:TerraFormFieldInterface,\n                                      field:TerraFormFieldInputFile):TerraFormFieldInterface\n    {\n        result.options.allowedExtensions = field.inputAllowedExtensions;\n        return result;\n    }\n\n    private static transformCheckboxGroupField(result:TerraFormFieldInterface,\n                                               field:TerraFormFieldMultiCheckBox):TerraFormFieldInterface\n    {\n        result.options.checkBoxValues = field.checkBoxValues;\n        return result;\n    }\n\n    private static transformTextField(result:TerraFormFieldInterface,\n                                      field:TerraFormFieldInputText):TerraFormFieldInterface\n    {\n        result.options.isPassword = field.isPassword;\n        result.options.isIBAN = field.isIBAN;\n        result.options.isReadOnly = field.isReadOnly;\n        return result;\n    }\n\n    private static transformSelectField(result:TerraFormFieldInterface,\n                                        field:TerraFormFieldSelectBox):TerraFormFieldInterface\n    {\n        result.options.listBoxValues = field.selectBoxValues;\n        return result;\n    }\n}\n"]}