{"version":3,"sources":["app/components/forms/form/terra-form.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAKuB;AACvB,wCAGwB;AACxB,6BAAyC;AACzC,uEAA+D;AAE/D,6EAAoE;AACpE,4EAAwE;AAcxE;IAZA;QA6CW,oBAAe,GAAW,KAAK,CAAC;QAE7B,UAAK,GAAkB,IAAI,sCAAc,EAAE,CAAC;QAE5C,WAAM,GAAO,EAAE,CAAC;QAyClB,qBAAgB,GAAmB,UAAC,CAAK,IAAU,OAAA,SAAS,EAAT,CAAS,CAAC;QAO7D,sBAAiB,GAAc,cAAW,OAAA,SAAS,EAAT,CAAS,CAAC;IAehE,CAAC;2BApGY,kBAAkB;IAG3B,sBAAW,+CAAe;aAK1B;YAEI,IAAG,wBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EACrC;gBACI,IAAI,CAAC,UAAU,GAAG,8CAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACzE;YACD,OAAO,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC;QACjC,CAAC;aAZD,UAA2B,MAA+C;YAEtE,IAAI,CAAC,UAAU,GAAG,8CAAoB,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;QAC1E,CAAC;;;OAAA;IAYD,sBAAW,mDAAmB;aAK9B;YAEI,IAAG,wBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,EACzC;gBACI,OAAO,IAAI,2CAAgB,EAAE,CAAC;aACjC;YACD,OAAO,IAAI,CAAC,cAAc,CAAC;QAC/B,CAAC;aAZD,UAA+B,GAAO;YAElC,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC;QAC9B,CAAC;;;OAAA;IAsBO,2CAAc,GAAtB,UAAuB,KAA6B;QAApD,iBAaC;QAXG,IAAG,CAAC,wBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,EACrC;YACI,IAAI,QAAM,GAAO,EAAE,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;iBACpB,OAAO,CAAC,UAAC,IAAW;gBAEjB,QAAM,CAAC,IAAI,CAAC,GAAG,KAAI,CAAC,cAAc,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC;YACT,OAAO,QAAM,CAAC;SACjB;QACD,OAAO,KAAK,CAAC,YAAY,IAAI,IAAI,CAAC;IACtC,CAAC;IAEM,uCAAU,GAAjB,UAAkB,MAAU;QAA5B,iBAkBC;QAhBG,IAAG,wBAAiB,CAAC,MAAM,CAAC,EAC5B;YACI,IAAI,eAAa,GAAO,EAAE,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;iBAC1B,OAAO,CAAC,UAAC,GAAU;gBAEhB,eAAa,CAAC,GAAG,CAAC,GAAG,KAAI,CAAC,cAAc,CAAC,KAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC;YACxE,CAAC,CAAC,CAAC;YACT,IAAI,CAAC,MAAM,GAAG,eAAa,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,eAAa,CAAC;SACnC;aACI,IAAG,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,MAAM,EAClC;YACI,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC;SAC5B;IACL,CAAC;IAIM,6CAAgB,GAAvB,UAAwB,QAAY;QAEhC,IAAI,CAAC,gBAAgB,GAAG,QAAQ,CAAC;IACrC,CAAC;IAIM,8CAAiB,GAAxB,UAAyB,QAAY;QAEjC,IAAI,CAAC,iBAAiB,GAAG,QAAQ,CAAC;IACtC,CAAC;IAES,2CAAc,GAAxB,UAAyB,GAAU,EAAE,KAAS;QAE1C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QAC7B,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACvC,CAAC;IA/FD;QADC,YAAK,EAAE;;;6DAIP;IAYD;QADC,YAAK,EAAE;;;iEAIP;IAYD;QADC,YAAK,EAAE;;+DAC+B;IAjC9B,kBAAkB;QAZ9B,gBAAS,CAAC;YACP,QAAQ,EAAG,YAAY;YACvB,QAAQ,EAAG,OAAO,CAAC,6BAA6B,CAAC;YACjD,MAAM,EAAK,CAAC,OAAO,CAAC,6BAA6B,CAAC,CAAC;YACnD,SAAS,EAAE;gBACP;oBACI,OAAO,EAAM,yBAAiB;oBAC9B,WAAW,EAAE,iBAAU,CAAC,cAAM,OAAA,oBAAkB,EAAlB,CAAkB,CAAC;oBACjD,KAAK,EAAQ,IAAI;iBACpB;aACJ;SACJ,CAAC;OACW,kBAAkB,CAoG9B;IAAD,yBAAC;;CApGD,AAoGC,IAAA;AApGY,gDAAkB","file":"terra-form.component.js","sourcesContent":["import {\n    Component,\n    forwardRef,\n    Input,\n    Type,\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    NG_VALUE_ACCESSOR\n} from '@angular/forms';\nimport { isNullOrUndefined } from 'util';\nimport { TerraFormScope } from './model/terra-form-scope.data';\nimport { TerraFormFieldInterface } from './model/terra-form-field.interface';\nimport { TerraFormTypeMap } from './model/terra-form-type-map.enum';\nimport { TerraFormFieldHelper } from './helper/terra-form-field.helper';\n\n@Component({\n    selector:  'terra-form',\n    template:  require('./terra-form.component.html'),\n    styles:    [require('./terra-form.component.scss')],\n    providers: [\n        {\n            provide:     NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TerraFormComponent),\n            multi:       true\n        }\n    ]\n})\nexport class TerraFormComponent implements ControlValueAccessor\n{\n    @Input()\n    public set inputFormFields(fields:{ [key:string]:TerraFormFieldInterface })\n    {\n        this.formFields = TerraFormFieldHelper.detectLegacyFormFields(fields);\n    }\n\n    public get inputFormFields():{ [key:string]:TerraFormFieldInterface }\n    {\n        if(isNullOrUndefined(this.formFields))\n        {\n            this.formFields = TerraFormFieldHelper.extractFormFields(this.values);\n        }\n        return this.formFields || {};\n    }\n\n    @Input()\n    public set inputControlTypeMap(map:any)\n    {\n        this.controlTypeMap = map;\n    }\n\n    public get inputControlTypeMap():any\n    {\n        if(isNullOrUndefined(this.controlTypeMap))\n        {\n            return new TerraFormTypeMap();\n        }\n        return this.controlTypeMap;\n    }\n\n    @Input()\n    public inputIsDisabled:boolean = false;\n\n    protected scope:TerraFormScope = new TerraFormScope();\n\n    protected values:any = {};\n\n    protected controlTypeMap:{ [key:string]:Type<any> };\n\n    private formFields:{ [key:string]:TerraFormFieldInterface };\n\n    private parseFormField(field:TerraFormFieldInterface):any\n    {\n        if(!isNullOrUndefined(field.children))\n        {\n            let result:any = {};\n            Object.keys(field.children)\n                  .forEach((fKey:string) =>\n                  {\n                      result[fKey] = this.parseFormField(field.children[fKey]);\n                  });\n            return result;\n        }\n        return field.defaultValue || null;\n    }\n\n    public writeValue(values:any):void\n    {\n        if(isNullOrUndefined(values))\n        {\n            let defaultValues:any = {};\n            Object.keys(this.inputFormFields)\n                  .forEach((key:string) =>\n                  {\n                      defaultValues[key] = this.parseFormField(this.inputFormFields[key]);\n                  });\n            this.values = defaultValues;\n            this.scope.data = defaultValues;\n        }\n        else if(this.scope.data !== values)\n        {\n            this.values = values;\n            this.scope.data = values;\n        }\n    }\n\n    private onChangeCallback:(_:any) => void = (_:any):void => undefined;\n\n    public registerOnChange(callback:any):void\n    {\n        this.onChangeCallback = callback;\n    }\n\n    private onTouchedCallback:() => void = ():void => undefined;\n\n    public registerOnTouched(callback:any):void\n    {\n        this.onTouchedCallback = callback;\n    }\n\n    protected onValueChanged(key:string, value:any):void\n    {\n        this.values[key] = value;\n        this.scope.data[key] = value;\n        this.scope.onDataChanged.next(this.scope.data);\n        this.onChangeCallback(this.values);\n    }\n\n}\n"]}