"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var util_1 = require("util");
var terra_form_scope_data_1 = require("../model/terra-form-scope.data");
var _1 = require("../../../../../");
var TerraFormEntryComponent = /** @class */ (function () {
    function TerraFormEntryComponent(componentFactory) {
        this.componentFactory = componentFactory;
        this.inputControlTypeMap = {};
        this.inputIsDisabled = false;
        this.outputFormValueChanged = new core_1.EventEmitter();
    }
    TerraFormEntryComponent.prototype.ngOnInit = function () {
        if (util_1.isNullOrUndefined(this.inputFormValue)) {
            this.inputFormValue = this.inputFormField.defaultValue || null;
        }
        this.containerClass = 'form-entry-' + this.inputFormField.type;
    };
    TerraFormEntryComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            if (!util_1.isNullOrUndefined(_this.container)) {
                var controlType = _1.TerraTextInputComponent;
                if (_this.inputControlTypeMap.hasOwnProperty(_this.inputFormField.type)) {
                    if (_this.inputControlTypeMap[_this.inputFormField.type] instanceof core_1.Type) {
                        controlType = _this.inputControlTypeMap[_this.inputFormField.type];
                    }
                    else {
                        controlType = _this.inputControlTypeMap[_this.inputFormField.type].component;
                    }
                }
                var component = _this.container.createComponent(_this.componentFactory.resolveComponentFactory(controlType));
                _this.componentInstance = component.instance;
                _this.bindInputProperties();
                if (util_1.isFunction(_this.componentInstance.registerOnChange) && util_1.isFunction(_this.componentInstance.writeValue)) {
                    _this.componentInstance.registerOnChange(function (value) {
                        _this.onValueChanged(value);
                    });
                    _this.componentInstance.writeValue(_this.inputFormValue);
                }
                else {
                    console.error('Cannot bind component ' + controlType.name + ' to dynamic form. ' +
                        'Bound components needs to implement the ControlValueAccessor interface.');
                }
            }
        });
    };
    TerraFormEntryComponent.prototype.ngOnChanges = function (changes) {
        this.bindInputProperties();
    };
    TerraFormEntryComponent.prototype.bindInputProperties = function () {
        var _this = this;
        if (!util_1.isNullOrUndefined(this.componentInstance)) {
            var inputMap_1 = {};
            if (!(this.inputControlTypeMap[this.inputFormField.type] instanceof core_1.Type)) {
                inputMap_1 = this.inputControlTypeMap[this.inputFormField.type].inputMap;
            }
            if (!util_1.isNullOrUndefined(this.inputFormField.options)) {
                Object.keys(this.inputFormField.options).forEach(function (optionKey) {
                    if (inputMap_1.hasOwnProperty(optionKey)) {
                        _this.componentInstance[inputMap_1[optionKey]] = _this.inputFormField.options[optionKey];
                    }
                    else {
                        _this.componentInstance[_this.transformInputPropertyName(optionKey)] = _this.inputFormField.options[optionKey];
                    }
                });
            }
            if (inputMap_1.hasOwnProperty('isDisabled')) {
                this.componentInstance[inputMap_1['isDisabled']] = this.inputIsDisabled;
            }
            else {
                this.componentInstance['inputIsDisabled'] = this.inputIsDisabled;
            }
        }
    };
    TerraFormEntryComponent.prototype.onValueChanged = function (value) {
        if (value !== this.inputFormValue) {
            this.inputFormValue = value;
            this.outputFormValueChanged.next(value);
        }
    };
    TerraFormEntryComponent.prototype.onChildValueChanged = function (key, value) {
        if (util_1.isNullOrUndefined(this.inputFormValue)) {
            this.inputFormValue = {};
        }
        this.inputFormValue[key] = value;
        this.outputFormValueChanged.next(this.inputFormValue);
    };
    Object.defineProperty(TerraFormEntryComponent.prototype, "hasChildren", {
        get: function () {
            return !util_1.isNullOrUndefined(this.inputFormField.children);
        },
        enumerable: true,
        configurable: true
    });
    TerraFormEntryComponent.prototype.transformInputPropertyName = function (propertyName) {
        return 'input' + propertyName.charAt(0).toUpperCase() + propertyName.substr(1);
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], TerraFormEntryComponent.prototype, "inputFormField", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], TerraFormEntryComponent.prototype, "inputFormValue", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", terra_form_scope_data_1.TerraFormScope)
    ], TerraFormEntryComponent.prototype, "inputScope", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], TerraFormEntryComponent.prototype, "inputControlTypeMap", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraFormEntryComponent.prototype, "inputIsDisabled", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraFormEntryComponent.prototype, "outputFormValueChanged", void 0);
    __decorate([
        core_1.ViewChild('formEntryContainer', { read: core_1.ViewContainerRef }),
        __metadata("design:type", core_1.ViewContainerRef)
    ], TerraFormEntryComponent.prototype, "container", void 0);
    TerraFormEntryComponent = __decorate([
        core_1.Component({
            selector: 'terra-form-entry',
            template: require('./terra-form-entry.component.html'),
            styles: [require('./terra-form-entry.component.scss')]
        }),
        __metadata("design:paramtypes", [core_1.ComponentFactoryResolver])
    ], TerraFormEntryComponent);
    return TerraFormEntryComponent;
}());
exports.TerraFormEntryComponent = TerraFormEntryComponent;

//# sourceMappingURL=terra-form-entry.component.js.map
