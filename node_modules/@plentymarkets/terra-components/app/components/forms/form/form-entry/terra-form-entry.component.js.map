{"version":3,"sources":["app/components/forms/form/form-entry/terra-form-entry.component.ts"],"names":[],"mappings":"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","file":"terra-form-entry.component.js","sourcesContent":["import {\n    AfterViewInit,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    Type,\n    ViewChild,\n    ViewContainerRef\n} from '@angular/core';\nimport { TerraFormFieldInterface } from '../model/terra-form-field.interface';\nimport {\n    isFunction,\n    isNullOrUndefined\n} from 'util';\nimport { TerraFormScope } from '../model/terra-form-scope.data';\nimport { TerraTextInputComponent } from '../../../../../';\nimport { TerraFormTypeInterface } from '../model/terra-form-type.interface';\n\n@Component({\n    selector: 'terra-form-entry',\n    template: require('./terra-form-entry.component.html'),\n    styles:   [require('./terra-form-entry.component.scss')]\n})\nexport class TerraFormEntryComponent implements OnInit, AfterViewInit, OnChanges\n{\n    @Input()\n    public inputFormField:TerraFormFieldInterface;\n\n    @Input()\n    public inputFormValue:any;\n\n    @Input()\n    public inputScope:TerraFormScope;\n\n    @Input()\n    public inputControlTypeMap:{ [key:string]:Type<any> | TerraFormTypeInterface } = {};\n\n    @Input()\n    public inputIsDisabled:boolean = false;\n\n    @Output()\n    public outputFormValueChanged:EventEmitter<any> = new EventEmitter<any>();\n\n    protected containerClass:string;\n\n    @ViewChild('formEntryContainer', {read: ViewContainerRef})\n    private container:ViewContainerRef;\n\n    private componentInstance:any;\n\n    public constructor(private componentFactory:ComponentFactoryResolver)\n    {\n    }\n\n    public ngOnInit():void\n    {\n        if(isNullOrUndefined(this.inputFormValue))\n        {\n            this.inputFormValue = this.inputFormField.defaultValue || null;\n        }\n        this.containerClass = 'form-entry-' + this.inputFormField.type;\n    }\n\n    public ngAfterViewInit():void\n    {\n        setTimeout(() =>\n        {\n            if(!isNullOrUndefined(this.container))\n            {\n                let controlType:Type<any> = TerraTextInputComponent;\n                if(this.inputControlTypeMap.hasOwnProperty(this.inputFormField.type))\n                {\n                    if(this.inputControlTypeMap[this.inputFormField.type] instanceof Type)\n                    {\n                        controlType = <Type<any>> this.inputControlTypeMap[this.inputFormField.type];\n                    }\n                    else\n                    {\n                        controlType = (<TerraFormTypeInterface> this.inputControlTypeMap[this.inputFormField.type]).component;\n                    }\n                }\n\n                let component:ComponentRef<any> = this.container.createComponent(\n                    this.componentFactory.resolveComponentFactory(controlType)\n                );\n\n                this.componentInstance = component.instance;\n\n                this.bindInputProperties();\n\n                if(isFunction(this.componentInstance.registerOnChange) && isFunction(this.componentInstance.writeValue))\n                {\n                    this.componentInstance.registerOnChange((value:any):void =>\n                    {\n                        this.onValueChanged(value);\n                    });\n                    this.componentInstance.writeValue(this.inputFormValue);\n                }\n                else\n                {\n                    console.error(\n                        'Cannot bind component ' + controlType.name + ' to dynamic form. ' +\n                        'Bound components needs to implement the ControlValueAccessor interface.'\n                    );\n                }\n            }\n        });\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        this.bindInputProperties();\n    }\n\n    protected bindInputProperties():void\n    {\n        if(!isNullOrUndefined(this.componentInstance))\n        {\n            let inputMap:{ [key:string]:string } = {};\n            if(!(this.inputControlTypeMap[this.inputFormField.type] instanceof Type))\n            {\n                inputMap = (<TerraFormTypeInterface> this.inputControlTypeMap[this.inputFormField.type]).inputMap;\n            }\n\n            if(!isNullOrUndefined(this.inputFormField.options))\n            {\n                Object.keys(this.inputFormField.options).forEach((optionKey:string) =>\n                {\n                    if(inputMap.hasOwnProperty(optionKey))\n                    {\n                        this.componentInstance[inputMap[optionKey]] = this.inputFormField.options[optionKey];\n                    }\n                    else\n                    {\n                        this.componentInstance[this.transformInputPropertyName(optionKey)] = this.inputFormField.options[optionKey];\n                    }\n                });\n            }\n\n            if(inputMap.hasOwnProperty('isDisabled'))\n            {\n                this.componentInstance[inputMap['isDisabled']] = this.inputIsDisabled;\n            }\n            else\n            {\n                this.componentInstance['inputIsDisabled'] = this.inputIsDisabled;\n            }\n        }\n    }\n\n    protected onValueChanged(value:any):void\n    {\n        if(value !== this.inputFormValue)\n        {\n            this.inputFormValue = value;\n            this.outputFormValueChanged.next(value);\n        }\n    }\n\n    protected onChildValueChanged(key:string, value:any):void\n    {\n        if(isNullOrUndefined(this.inputFormValue))\n        {\n            this.inputFormValue = {};\n        }\n        this.inputFormValue[key] = value;\n        this.outputFormValueChanged.next(this.inputFormValue);\n    }\n\n    protected get hasChildren():boolean\n    {\n        return !isNullOrUndefined(this.inputFormField.children);\n    }\n\n    private transformInputPropertyName(propertyName:string):string\n    {\n        return 'input' + propertyName.charAt(0).toUpperCase() + propertyName.substr(1);\n    }\n}\n"]}