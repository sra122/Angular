"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @author mfrank
 */
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var util_1 = require("util");
var angular_l10n_1 = require("angular-l10n");
var TerraTagSelectComponent = /** @class */ (function () {
    function TerraTagSelectComponent() {
        this.isDisabled = false;
        this.isReadOnly = false;
        this.suggestionValues = [];
        this.selectedTags = [];
        this.onTouchedCallback = function () { return undefined; };
        this.onChangeCallback = function (selectedTagsList) { return undefined; };
    }
    TerraTagSelectComponent_1 = TerraTagSelectComponent;
    TerraTagSelectComponent.prototype.ngOnInit = function () {
        this.generateSuggestionValues(this.tagList);
    };
    TerraTagSelectComponent.prototype.ngOnChanges = function (changes) {
        if (changes.hasOwnProperty('tags')) {
            var tags = changes['tags'].currentValue;
            tags.forEach(function (tag) { return tag.isClosable = true; });
            this.tagList = tags;
            this.generateSuggestionValues(tags);
        }
    };
    TerraTagSelectComponent.prototype.writeValue = function (selectedTags) {
        this.selectedTags = selectedTags;
        this.onTouchedCallback();
        this.onChangeCallback(selectedTags);
    };
    TerraTagSelectComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    TerraTagSelectComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * Writes the selected tag into the model of the component.
     * @param {TerraTagInterface} selectedTag
     */
    TerraTagSelectComponent.prototype.addSelectedTag = function (selectedTag) {
        if (!this.isReadOnly && !util_1.isNullOrUndefined(selectedTag) && !this.selectedTags.find(function (tag) { return tag === selectedTag; })) {
            this.writeValue(this.selectedTags.concat(selectedTag));
        }
    };
    /**
     * Remove the specific tag id and updates the model of the component.
     * @param {number} tagId
     */
    TerraTagSelectComponent.prototype.closeTag = function (tagId) {
        this.selectedTags.splice(this.selectedTags.findIndex(function (tag) { return tag.id === tagId; }), 1);
        this.writeValue(this.selectedTags);
    };
    /**
     * Generates the values for the TerraSuggestionsBox from a array of TerraTagInterface.
     * @param {Array<TerraTagInterface>} tagList
     */
    TerraTagSelectComponent.prototype.generateSuggestionValues = function (tagList) {
        var _this = this;
        this.suggestionValues = tagList.map(function (tag) {
            return {
                value: tag,
                caption: _this.getTranslatedName(tag),
            };
        });
        this.suggestionValues.unshift({ value: null, caption: '' });
    };
    /**
     * Returns the name. If the names attribute of the tag is set it returns the name for the current language.
     * @param {TerraTagInterface} tag
     * @return {string}
     */
    TerraTagSelectComponent.prototype.getTranslatedName = function (tag) {
        var _this = this;
        // Fallback if names or this.lang is not set
        if (util_1.isNullOrUndefined(tag.names) || util_1.isNullOrUndefined(this.lang)) {
            return tag.name;
        }
        else {
            var tagName = tag.names.find(function (name) { return name.language === _this.lang; });
            // Fallback if no name for this.lang is set
            if (util_1.isNullOrUndefined(tagName)) {
                return tag.name;
            }
            else {
                return tagName.name;
            }
        }
    };
    __decorate([
        angular_l10n_1.Language(),
        __metadata("design:type", String)
    ], TerraTagSelectComponent.prototype, "lang", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraTagSelectComponent.prototype, "name", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraTagSelectComponent.prototype, "tags", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraTagSelectComponent.prototype, "isDisabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraTagSelectComponent.prototype, "isReadOnly", void 0);
    TerraTagSelectComponent = TerraTagSelectComponent_1 = __decorate([
        core_1.Component({
            selector: 'terra-tag-select',
            styles: [require('./terra-tag-select.component.scss')],
            template: require('./terra-tag-select.component.html'),
            providers: [
                {
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return TerraTagSelectComponent_1; }),
                    multi: true
                }
            ]
        })
    ], TerraTagSelectComponent);
    return TerraTagSelectComponent;
    var TerraTagSelectComponent_1;
}());
exports.TerraTagSelectComponent = TerraTagSelectComponent;

//# sourceMappingURL=terra-tag-select.component.js.map
