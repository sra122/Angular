{"version":3,"sources":["app/components/forms/suggestion-box/terra-suggestion-box.component.ts"],"names":[],"mappings":"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","file":"terra-suggestion-box.component.js","sourcesContent":["import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    QueryList,\n    SimpleChanges,\n    ViewChildren\n} from '@angular/core';\nimport { TerraSuggestionBoxValueInterface } from './data/terra-suggestion-box.interface';\nimport {\n    ControlValueAccessor,\n    NG_VALUE_ACCESSOR\n} from '@angular/forms';\nimport {\n    isNull,\n    isNullOrUndefined\n} from 'util';\nimport { TerraPlacementEnum } from '../../../helpers/enums/terra-placement.enum';\nimport { TerraBaseData } from '../../data/terra-base.data';\n\nconst MAX_LASTLY_USED_ENTRIES:number = 5;\n\n@Component({\n    selector:  'terra-suggestion-box',\n    styles:    [require('./terra-suggestion-box.component.scss')],\n    template:  require('./terra-suggestion-box.component.html'),\n    providers: [\n        {\n            provide:     NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TerraSuggestionBoxComponent),\n            multi:       true\n        }\n    ]\n})\nexport class TerraSuggestionBoxComponent implements OnInit, OnChanges, ControlValueAccessor\n{\n    @Input()\n    public inputName:string;\n\n    @Input()\n    public inputIsRequired:boolean;\n\n    @Input()\n    public inputIsDisabled:boolean;\n\n    @Input()\n    public inputTooltipText:string;\n\n    @Input()\n    public inputTooltipPlacement:TerraPlacementEnum = TerraPlacementEnum.TOP;\n\n    @Input()\n    public inputListBoxValues:Array<TerraSuggestionBoxValueInterface> = [];\n\n    @Input()\n    public inputWithRecentlyUsed:boolean;\n\n    /**\n     * @deprecated since it notifies the user at exactly the same time as ngModelChange <-> onChangeCallback\n     */\n    @Output()\n    public outputValueChanged:EventEmitter<TerraSuggestionBoxValueInterface> = new EventEmitter<TerraSuggestionBoxValueInterface>();\n\n    @Output()\n    public outputClicked:EventEmitter<Event> = new EventEmitter<Event>();\n\n    @Output()\n    public textInputValueChange:EventEmitter<string> = new EventEmitter<string>();\n\n    public isValid:boolean = true;\n\n    protected displayListBoxValues:Array<TerraSuggestionBoxValueInterface> = [];\n    protected lastSelectedValues:Array<TerraSuggestionBoxValueInterface> = [];\n    protected listBoxHeadingKey:string = '';\n    protected noEntriesTextKey:string;\n    protected _selectedValue:TerraSuggestionBoxValueInterface = null;\n    protected tmpSelectedValue:TerraSuggestionBoxValueInterface = null;\n    protected _textInputValue:string = '';\n    protected _toggleOpen:boolean = false;\n\n    private hasLabel:boolean;\n\n    private clickListener:(event:Event) => void;\n\n    @ViewChildren('renderedListBoxValues')\n    private renderedListBoxValues:QueryList<ElementRef>;\n\n    constructor(private elementRef:ElementRef)\n    {\n    }\n\n    public ngOnInit():void\n    {\n        this.clickListener = (event:Event):void =>\n        {\n            this.clickedOutside(event);\n        };\n\n        this.inputTooltipPlacement = TerraPlacementEnum.TOP;\n        this.tmpSelectedValue = null;\n\n        this.isValid = true;\n        this._toggleOpen = false;\n        this.hasLabel = !isNull(this.inputName);\n        this.lastSelectedValues = [];\n        this.listBoxHeadingKey = '';\n        this.noEntriesTextKey = this.inputWithRecentlyUsed ? 'terraSuggestionBox.noRecentlyUsed' : 'terraSuggestionBox.noSuggestions';\n\n        if(!this.inputWithRecentlyUsed)\n        {\n            // initialize the displayed list with all possible values\n            this.displayListBoxValues = this.inputListBoxValues;\n        }\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if(changes['inputListBoxValues'])\n        {\n            this.displayListBoxValues = this.inputListBoxValues;\n            if(changes['inputListBoxValues'].currentValue.length > 0 &&\n                !isNullOrUndefined(this.selectedValue) &&\n                !this.inputListBoxValues.find((x:TerraSuggestionBoxValueInterface):boolean => this.selectedValue.value === x.value))\n            {\n                // reset selected value if the value does not exists or the list is empty\n                this.selectedValue = null;\n            }\n        }\n    }\n\n    public registerOnChange(fn:(_:any) => void):void\n    {\n        this.onChangeCallback = fn;\n    }\n\n    public registerOnTouched(fn:() => void):void\n    {\n        this.onTouchedCallback = fn;\n    }\n\n    private onTouchedCallback:() => void = ():void => undefined;\n\n    private onChangeCallback:(_:any) => void = (_:any):void => undefined;\n\n    public writeValue(value:any):void\n    {\n        this.value = value;\n    }\n\n    public get value():number | string | TerraBaseData\n    {\n        return !isNullOrUndefined(this.selectedValue) ? this.selectedValue.value : null;\n    }\n\n    public set value(value:number | string | TerraBaseData)\n    {\n        if(isNullOrUndefined(this.inputListBoxValues) || isNullOrUndefined(value))\n        {\n            this.selectedValue = null;\n        }\n        else\n        {\n            this.selectedValue = this.inputListBoxValues.find((item:TerraSuggestionBoxValueInterface) => item.value === value);\n        }\n\n        this.tmpSelectedValue = this.selectedValue;\n    }\n\n    protected onClick(evt:Event):void\n    {\n        evt.stopPropagation(); // prevents the click listener on the document to be fired right after\n        this.toggleOpen = !this.toggleOpen;\n    }\n\n    public set toggleOpen(value:boolean)\n    {\n        if(this._toggleOpen !== value && value === true)\n        {\n            document.addEventListener('click', this.clickListener, true);\n            this.focusSelectedElement();\n        }\n        else if(this._toggleOpen !== value && value === false)\n        {\n            document.removeEventListener('click', this.clickListener);\n        }\n\n        this._toggleOpen = value;\n    }\n\n    public get toggleOpen():boolean\n    {\n        return this._toggleOpen;\n    }\n\n    private clickedOutside(event:Event):void\n    {\n        if(!this.elementRef.nativeElement.contains(event.target))\n        {\n            this.toggleOpen = false;\n        }\n    }\n\n    private select(value:TerraSuggestionBoxValueInterface):void\n    {\n        // check if value is available\n        if(!this.displayListBoxValues.find((elem:TerraSuggestionBoxValueInterface):boolean => elem === value))\n        {\n            return;\n        }\n\n        // update selected value\n        this.selectedValue = value;\n\n        // update last selected values\n        if(this.inputWithRecentlyUsed)\n        {\n            this.updateLastSelectedValues();\n        }\n\n        // update temp selected value\n        this.tmpSelectedValue = this.selectedValue;\n    }\n\n    private updateLastSelectedValues():void\n    {\n        // check if newly selected value has been selected lastly\n        let valueSelected:TerraSuggestionBoxValueInterface =\n            this.lastSelectedValues.find((value:TerraSuggestionBoxValueInterface) =>\n                value.caption === this.selectedValue.caption &&\n                value.value === this.selectedValue.value\n            );\n\n        // add value to the last selected values, if it is not already added\n        if(isNullOrUndefined(valueSelected))\n        {\n            let length:number = this.lastSelectedValues.unshift(\n                {\n                    caption: this.selectedValue.caption,\n                    value:   this.selectedValue.value\n                }\n            );\n\n            // check if length of the array exceeds the maximum amount of \"lastly used\" entries\n            if(length > MAX_LASTLY_USED_ENTRIES)\n            {\n                // remove last element of the array\n                this.lastSelectedValues.pop();\n            }\n        }\n    }\n\n    public onChange():void\n    {\n        let searchString:any = this.textInputValue;\n        this.toggleOpen = true;\n\n        if(!isNullOrUndefined(searchString) && searchString.length >= 3)\n        {\n            this.listBoxHeadingKey = 'terraSuggestionBox.suggestions';\n            this.noEntriesTextKey = 'terraSuggestionBox.noSuggestions';\n            if(!isNullOrUndefined(this.inputListBoxValues))\n            {\n                this.displayListBoxValues = this.inputListBoxValues.filter((value:TerraSuggestionBoxValueInterface) =>\n                {\n                    // check if search string has a full match\n                    if(value.caption.toUpperCase().includes(searchString.toUpperCase()))\n                    {\n                        return true;\n                    }\n\n                    // search for partial strings\n                    let searchStringIncluded:boolean = true;\n                    searchString.split(' ').forEach((word:string) =>\n                    {\n                        searchStringIncluded = searchStringIncluded && value.caption.toUpperCase().includes(word.toUpperCase());\n                    });\n                    return searchStringIncluded;\n                });\n            }\n        }\n        else if(this.inputWithRecentlyUsed)\n        {\n            this.listBoxHeadingKey = 'terraSuggestionBox.recentlyUsed';\n            this.noEntriesTextKey = 'terraSuggestionBox.noRecentlyUsed';\n            this.displayListBoxValues = this.lastSelectedValues;\n        }\n        else if(!isNullOrUndefined(this.inputListBoxValues))\n        {\n            this.displayListBoxValues = this.inputListBoxValues;\n        }\n\n        // update selected value\n        this.setSelectedValue(this.displayListBoxValues.find((val:TerraSuggestionBoxValueInterface) => val.caption === searchString), true);\n    }\n\n    /**\n     * @deprecated use ngModel instead to reset the selected value\n     */\n    public resetComponentValue():void\n    {\n        this.value = null;\n\n        this.selectedValue = null;\n\n        this.tmpSelectedValue = null;\n    }\n\n    protected onKeyDown(event:KeyboardEvent):void\n    {\n        // check if one of the dedicated keys has been pressed\n        if(!(event.key === 'ArrowDown' || event.key === 'ArrowUp' || event.key === 'Enter' || event.key === 'Escape'))\n        {\n            return;\n        }\n\n        // check if there is any selected value yet\n        if(isNullOrUndefined(this.tmpSelectedValue))\n        {\n            this.tmpSelectedValue = this.displayListBoxValues[0];\n        }\n        else\n        {\n            // get the array index of the selected value\n            let index:number = this.displayListBoxValues.findIndex((item:TerraSuggestionBoxValueInterface) =>\n                item.value === this.tmpSelectedValue.value\n            );\n\n            // check if element has been found\n            if(index >= 0)\n            {\n                // determine the key, that has been pressed\n                switch(event.key)\n                {\n                    case 'ArrowDown': // mark the succeeding list element\n                        if(index + 1 < this.displayListBoxValues.length)\n                        {\n                            // open dropdown if not already opened\n                            if(!this.toggleOpen)\n                            {\n                                this.toggleOpen = true;\n                            }\n                            // mark next element for selection\n                            this.tmpSelectedValue = this.displayListBoxValues[index + 1];\n                            // adjust scrolling viewport\n                            this.focusSelectedElement();\n                        }\n                        break;\n                    case 'ArrowUp': // mark the preceding list element\n                        if(index - 1 >= 0)\n                        {\n                            // open dropdown if not already opened\n                            if(!this.toggleOpen)\n                            {\n                                this.toggleOpen = true;\n                            }\n                            // mark previous element for selection\n                            this.tmpSelectedValue = this.displayListBoxValues[index - 1];\n                            // adjust scrolling viewport\n                            this.focusSelectedElement();\n                        }\n                        break;\n                    case 'Enter': // select the marked element\n                        // check if element is really available\n                        if(this.displayListBoxValues.find((item:TerraSuggestionBoxValueInterface) => item === this.tmpSelectedValue))\n                        {\n                            this.select(this.tmpSelectedValue); // select the chosen element\n                            this.toggleOpen = false; // close the dropdown\n                        }\n                        break;\n                    case 'Escape': // close the dropdown\n                        this.toggleOpen = false; // close the dropdown\n                        break;\n                }\n            }\n            else\n            {\n                this.tmpSelectedValue = this.displayListBoxValues[0];\n            }\n        }\n\n        // stop event bubbling\n        event.stopPropagation();\n    }\n\n    private focusSelectedElement():void\n    {\n        // get the temporary selected DOM element\n        const selectedElementRef:ElementRef = this.renderedListBoxValues.find((value:ElementRef) =>\n        {\n            return value.nativeElement.classList.contains('selected');\n        });\n\n        // check if the element has been found\n        if(selectedElementRef)\n        {\n            const spanElement:HTMLSpanElement = selectedElementRef.nativeElement;\n\n            // scroll to the selected element\n            spanElement.parentElement.scrollTop = spanElement.offsetTop - spanElement.parentElement.offsetTop;\n        }\n    }\n\n    /**\n     * workaround to prevent calling the select() method on the label click\n     * @param event\n     */\n    protected onInputClick(event:any):void\n    {\n        this.outputClicked.emit(event);\n\n        // check if the input has been clicked\n        if(event.target.nodeName === 'INPUT')\n        {\n            // select the input text <-> mark all\n            event.target.select();\n        }\n    }\n\n    protected get textInputValue():string\n    {\n        return this._textInputValue;\n    }\n\n    protected set textInputValue(value:string)\n    {\n        if(this._textInputValue !== value)\n        {\n            this.textInputValueChange.emit(value);\n        }\n        this._textInputValue = value;\n    }\n\n    public set selectedValue(value:TerraSuggestionBoxValueInterface)\n    {\n        this.setSelectedValue(value);\n    }\n\n    private setSelectedValue(value:TerraSuggestionBoxValueInterface, onChange?:boolean):void\n    {\n        // does not do anything if the value changes from undefined to null or reverse\n        if(isNullOrUndefined(this._selectedValue) && isNullOrUndefined(value))\n        {\n            return;\n        }\n        // the value has changed?\n        if(this._selectedValue !== value)\n        {\n            // update local model\n            this._selectedValue = value;\n            this.tmpSelectedValue = this._selectedValue;\n\n            // execute callback functions\n            this.onTouchedCallback(); // this may be called when the text input value changes instead!?\n            this.onChangeCallback(this.value);\n            this.outputValueChanged.emit(this._selectedValue);\n\n            // finally update text input value\n            if(!onChange)\n            {\n                this.textInputValue = !isNullOrUndefined(this._selectedValue) ? this._selectedValue.caption : '';\n            }\n        }\n    }\n\n    public get selectedValue():TerraSuggestionBoxValueInterface\n    {\n        return this._selectedValue;\n    }\n}\n"]}