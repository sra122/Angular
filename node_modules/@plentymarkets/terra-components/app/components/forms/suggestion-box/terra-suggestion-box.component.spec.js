"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/common/http");
var forms_1 = require("@angular/forms");
var testing_1 = require("@angular/core/testing");
var ngx_bootstrap_1 = require("ngx-bootstrap");
var angular_l10n_1 = require("angular-l10n");
var l10n_config_1 = require("../../../translation/l10n.config");
var terra_suggestion_box_component_1 = require("./terra-suggestion-box.component");
var __1 = require("../../../..");
var mock_element_ref_1 = require("../../../testing/mock-element-ref");
var platform_browser_1 = require("@angular/platform-browser");
describe('TerraSuggestionBoxComponent', function () {
    var component;
    var fixture;
    var suggestion = { caption: '1', value: 1 };
    beforeEach(testing_1.async(function () {
        testing_1.TestBed.configureTestingModule({
            declarations: [
                terra_suggestion_box_component_1.TerraSuggestionBoxComponent,
                __1.TerraTextInputComponent
            ],
            imports: [
                ngx_bootstrap_1.TooltipModule.forRoot(),
                forms_1.FormsModule,
                http_1.HttpModule,
                http_2.HttpClientModule,
                angular_l10n_1.LocalizationModule.forRoot(l10n_config_1.l10nConfig)
            ],
            providers: [
                { provide: core_1.ElementRef, useClass: mock_element_ref_1.MockElementRef }
            ]
        }).compileComponents();
    }));
    beforeEach(function () {
        fixture = testing_1.TestBed.createComponent(terra_suggestion_box_component_1.TerraSuggestionBoxComponent);
        component = fixture.componentInstance;
        component.inputListBoxValues = []; // this also resets the selectedValue to null
        component.value = null;
        fixture.detectChanges();
    });
    it('should create', function () {
        expect(component).toBeTruthy();
    });
    it('should toggle open', function () {
        component.toggleOpen = true;
        expect(component.toggleOpen).toBe(true);
        component.toggleOpen = false;
        expect(component.toggleOpen).toBe(false);
    });
    it('Clicking on the .select-box-wrapper toggles the dropdown', function () {
        component.toggleOpen = false; // close the dropdown
        var debugElement = fixture.debugElement;
        var selectBoxWrapperDe = debugElement.query(platform_browser_1.By.css('.select-box-wrapper'));
        selectBoxWrapperDe.triggerEventHandler('click', new Event('click'));
        expect(component.toggleOpen).toEqual(true);
        selectBoxWrapperDe.triggerEventHandler('click', new Event('click'));
        expect(component.toggleOpen).toEqual(false);
    });
    it('`selectedValue` and `value` to be initialised with `null`', function () {
        expect(component.selectedValue).toEqual(null);
        expect(component.value).toEqual(null);
    });
    it('should update `value` and `selectedValue` if the `value` is set to a value that is included in `inputListBoxValues`', function () {
        component.inputListBoxValues = [suggestion];
        component.value = suggestion.value;
        // check expectations after setting the value
        expect(component.value).toEqual(suggestion.value);
        expect(component.selectedValue).toEqual(suggestion);
    });
    it('should set `selectedValue` to `null` if the `value` is set to a `value` that is not included in `inputListBoxValues`', function () {
        component.inputListBoxValues = [suggestion];
        component.value = 2;
        // check expectations after setting the value
        expect(component.value).toEqual(null); // TODO: Don't we expect the value to be the value that we have just set here?
        expect(component.selectedValue).toEqual(null);
    });
    it('Calling `resetComponentValue` should set `selectedValue` and `value` to `null`', function () {
        component.inputListBoxValues = [suggestion];
        component.value = suggestion.value;
        // check expectations after setting the value
        expect(component.value).toEqual(suggestion.value);
        expect(component.selectedValue).toEqual(suggestion);
        component.resetComponentValue();
        expect(component.value).toEqual(null);
        expect(component.selectedValue).toEqual(null);
    });
    it('set #selectedValue should update #value and the displayed text in the input', function () {
        var suggestionBoxElement = fixture.nativeElement;
        var inputElement = suggestionBoxElement.querySelector('input');
        component.inputListBoxValues = [suggestion];
        component.selectedValue = suggestion;
        fixture.detectChanges();
        expect(component.selectedValue).toEqual(suggestion);
        expect(component.value).toEqual(suggestion.value);
        // expect(inputElement.value).toEqual(suggestion.caption); // TODO: The value is not updated..
    });
    it('#onChange() should open the dropdown (set #toggleOpen to "true")', function () {
        component.toggleOpen = true;
        component.onChange();
        expect(component.toggleOpen).toEqual(true);
        component.toggleOpen = false;
        expect(component.toggleOpen).toEqual(false);
        component.onChange();
        expect(component.toggleOpen).toEqual(true);
    });
    it('Entering text should call #onChange() and update #selectedValue and #value', function () {
        component.inputListBoxValues = [suggestion];
        var suggestionBoxElement = fixture.nativeElement;
        var inputElement = suggestionBoxElement.querySelector('input');
        var spy = spyOn(component, 'onChange').and.callThrough();
        // simulate user entering a new value into the input box
        // a value that is included in the suggestions
        inputElement.value = suggestion.caption;
        inputElement.dispatchEvent(new Event('input'));
        expect(component.selectedValue).toEqual(suggestion);
        expect(component.value).toEqual(suggestion.value);
        // empty input
        inputElement.value = '';
        inputElement.dispatchEvent(new Event('input'));
        expect(component.selectedValue).toEqual(undefined);
        expect(component.value).toEqual(null);
        // input that is not included in the suggestions
        inputElement.value = '123';
        inputElement.dispatchEvent(new Event('input'));
        expect(component.selectedValue).toEqual(undefined);
        expect(component.value).toEqual(null);
        // check if the onChange()-Method has been called every time the text has changed
        expect(spy).toHaveBeenCalledTimes(3);
    });
    it('should auto-select a suggestion if the entered text matches the caption of the suggestion', function () {
        component.inputListBoxValues = [suggestion];
        var suggestionBoxElement = fixture.nativeElement;
        var inputElement = suggestionBoxElement.querySelector('input');
        expect(component.selectedValue).toBeNull(); // TODO: unify.. selectedValue should be undefined or set to a specific value, not null
        inputElement.value = suggestion.caption;
        inputElement.dispatchEvent(new Event('input'));
        expect(component.selectedValue).toEqual(suggestion);
        inputElement.value = 'hasdh';
        inputElement.dispatchEvent(new Event('input'));
        expect(component.selectedValue).toBeUndefined();
    });
    it('#textValueChanged should emit if a text has been entered', function () {
        var suggestionBoxElement = fixture.nativeElement;
        var inputElement = suggestionBoxElement.querySelector('input');
        var enteredText = '123';
        var text = '';
        component.textInputValueChange.subscribe(function (eventText) { return text = eventText; });
        inputElement.value = enteredText;
        inputElement.dispatchEvent(new Event('input'));
        expect(text).toEqual(enteredText);
    });
    it('#outputValueChanged should emit if #selectedValue changes', function () {
        var value;
        component.outputValueChanged.subscribe(function (eventValue) { return value = eventValue; });
        // changing the value from undefined to null should not cause outputValueChanged to emit
        component.selectedValue = null;
        expect(value).toEqual(undefined);
        // changing the value
        component.selectedValue = suggestion;
        expect(value).toEqual(suggestion);
    });
});

//# sourceMappingURL=terra-suggestion-box.component.spec.js.map
