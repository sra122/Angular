{"version":3,"sources":["app/components/forms/suggestion-box/terra-suggestion-box.component.spec.ts"],"names":[],"mappings":"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","file":"terra-suggestion-box.component.spec.js","sourcesContent":["import {\n    DebugElement,\n    ElementRef\n} from '@angular/core';\nimport { HttpModule } from '@angular/http';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport {\n    async,\n    ComponentFixture,\n    TestBed\n} from '@angular/core/testing';\n\nimport { TooltipModule } from 'ngx-bootstrap';\nimport { LocalizationModule } from 'angular-l10n';\nimport { l10nConfig } from '../../../translation/l10n.config';\n\nimport { TerraSuggestionBoxComponent } from './terra-suggestion-box.component';\nimport {\n    TerraSuggestionBoxValueInterface,\n    TerraTextInputComponent\n} from '../../../..';\n\nimport { MockElementRef } from '../../../testing/mock-element-ref';\nimport Spy = jasmine.Spy;\nimport { By } from '@angular/platform-browser';\n\ndescribe('TerraSuggestionBoxComponent', () =>\n{\n    let component:TerraSuggestionBoxComponent;\n    let fixture:ComponentFixture<TerraSuggestionBoxComponent>;\n    const suggestion:TerraSuggestionBoxValueInterface = {caption: '1', value: 1};\n\n    beforeEach(async(() =>\n    {\n        TestBed.configureTestingModule({\n            declarations: [\n                TerraSuggestionBoxComponent,\n                TerraTextInputComponent\n            ],\n            imports:      [\n                TooltipModule.forRoot(),\n                FormsModule,\n                HttpModule,\n                HttpClientModule,\n                LocalizationModule.forRoot(l10nConfig)\n            ],\n            providers: [\n                { provide: ElementRef, useClass: MockElementRef }\n            ]\n        }).compileComponents();\n    }));\n\n    beforeEach(() =>\n    {\n        fixture = TestBed.createComponent(TerraSuggestionBoxComponent);\n        component = fixture.componentInstance;\n\n        component.inputListBoxValues = []; // this also resets the selectedValue to null\n        component.value = null;\n\n        fixture.detectChanges();\n    });\n\n    it('should create', () =>\n    {\n        expect(component).toBeTruthy();\n    });\n\n    it('should toggle open', () =>\n    {\n        component.toggleOpen = true;\n\n        expect(component.toggleOpen).toBe(true);\n\n        component.toggleOpen = false;\n\n        expect(component.toggleOpen).toBe(false);\n    });\n\n    it('Clicking on the .select-box-wrapper toggles the dropdown', () =>\n    {\n        component.toggleOpen = false; // close the dropdown\n\n        let debugElement:DebugElement = fixture.debugElement;\n        let selectBoxWrapperDe:DebugElement = debugElement.query(By.css('.select-box-wrapper'));\n\n        selectBoxWrapperDe.triggerEventHandler('click', new Event('click'));\n\n        expect(component.toggleOpen).toEqual(true);\n\n        selectBoxWrapperDe.triggerEventHandler('click', new Event('click'));\n\n        expect(component.toggleOpen).toEqual(false);\n    });\n\n    it('`selectedValue` and `value` to be initialised with `null`', () =>\n    {\n        expect(component.selectedValue).toEqual(null);\n        expect(component.value).toEqual(null);\n    });\n\n    it('should update `value` and `selectedValue` if the `value` is set to a value that is included in `inputListBoxValues`', () =>\n    {\n        component.inputListBoxValues = [suggestion];\n        component.value = suggestion.value;\n\n        // check expectations after setting the value\n        expect(component.value).toEqual(suggestion.value);\n        expect(component.selectedValue).toEqual(suggestion);\n    });\n\n    it('should set `selectedValue` to `null` if the `value` is set to a `value` that is not included in `inputListBoxValues`', () =>\n    {\n        component.inputListBoxValues = [suggestion];\n        component.value = 2;\n\n        // check expectations after setting the value\n        expect(component.value).toEqual(null); // TODO: Don't we expect the value to be the value that we have just set here?\n        expect(component.selectedValue).toEqual(null);\n    });\n\n    it('Calling `resetComponentValue` should set `selectedValue` and `value` to `null`', () =>\n    {\n        component.inputListBoxValues = [suggestion];\n        component.value = suggestion.value;\n\n        // check expectations after setting the value\n        expect(component.value).toEqual(suggestion.value);\n        expect(component.selectedValue).toEqual(suggestion);\n\n        component.resetComponentValue();\n\n        expect(component.value).toEqual(null);\n        expect(component.selectedValue).toEqual(null);\n    });\n\n    it('set #selectedValue should update #value and the displayed text in the input', () =>\n    {\n        let suggestionBoxElement:HTMLElement = fixture.nativeElement;\n        let inputElement:HTMLInputElement = suggestionBoxElement.querySelector('input');\n        component.inputListBoxValues = [suggestion];\n        component.selectedValue = suggestion;\n\n        fixture.detectChanges();\n\n        expect(component.selectedValue).toEqual(suggestion);\n        expect(component.value).toEqual(suggestion.value);\n        // expect(inputElement.value).toEqual(suggestion.caption); // TODO: The value is not updated..\n    });\n\n    it('#onChange() should open the dropdown (set #toggleOpen to \"true\")', () =>\n    {\n        component.toggleOpen = true;\n        component.onChange();\n        expect(component.toggleOpen).toEqual(true);\n\n\n        component.toggleOpen = false;\n        expect(component.toggleOpen).toEqual(false);\n        component.onChange();\n\n        expect(component.toggleOpen).toEqual(true);\n    });\n\n    it('Entering text should call #onChange() and update #selectedValue and #value', () =>\n    {\n        component.inputListBoxValues = [suggestion];\n\n        let suggestionBoxElement:HTMLElement = fixture.nativeElement;\n        let inputElement:HTMLInputElement = suggestionBoxElement.querySelector('input');\n\n        let spy:Spy = spyOn(component, 'onChange').and.callThrough();\n\n        // simulate user entering a new value into the input box\n        // a value that is included in the suggestions\n        inputElement.value = suggestion.caption as string;\n        inputElement.dispatchEvent(new Event('input'));\n\n        expect(component.selectedValue).toEqual(suggestion);\n        expect(component.value).toEqual(suggestion.value);\n\n        // empty input\n        inputElement.value = '';\n        inputElement.dispatchEvent(new Event('input'));\n\n        expect(component.selectedValue).toEqual(undefined);\n        expect(component.value).toEqual(null);\n\n        // input that is not included in the suggestions\n        inputElement.value = '123';\n        inputElement.dispatchEvent(new Event('input'));\n\n        expect(component.selectedValue).toEqual(undefined);\n        expect(component.value).toEqual(null);\n\n        // check if the onChange()-Method has been called every time the text has changed\n        expect(spy).toHaveBeenCalledTimes(3);\n    });\n\n\n    it('should auto-select a suggestion if the entered text matches the caption of the suggestion', () =>\n    {\n        component.inputListBoxValues = [suggestion];\n        let suggestionBoxElement:HTMLElement = fixture.nativeElement;\n        let inputElement:HTMLInputElement = suggestionBoxElement.querySelector('input');\n\n        expect(component.selectedValue).toBeNull(); // TODO: unify.. selectedValue should be undefined or set to a specific value, not null\n\n        inputElement.value = suggestion.caption as string;\n        inputElement.dispatchEvent(new Event('input'));\n\n        expect(component.selectedValue).toEqual(suggestion);\n\n        inputElement.value = 'hasdh';\n        inputElement.dispatchEvent(new Event('input'));\n\n        expect(component.selectedValue).toBeUndefined();\n\n    });\n\n    it('#textValueChanged should emit if a text has been entered', () =>\n    {\n        let suggestionBoxElement:HTMLElement = fixture.nativeElement;\n        let inputElement:HTMLInputElement = suggestionBoxElement.querySelector('input');\n\n        const enteredText:string = '123';\n        let text:string = '';\n        component.textInputValueChange.subscribe((eventText:string) => text = eventText);\n\n        inputElement.value = enteredText;\n        inputElement.dispatchEvent(new Event('input'));\n\n        expect(text).toEqual(enteredText);\n    });\n\n    it('#outputValueChanged should emit if #selectedValue changes', () =>\n    {\n        let value:TerraSuggestionBoxValueInterface;\n        component.outputValueChanged.subscribe((eventValue:TerraSuggestionBoxValueInterface) => value = eventValue);\n\n        // changing the value from undefined to null should not cause outputValueChanged to emit\n        component.selectedValue = null;\n        expect(value).toEqual(undefined);\n\n        // changing the value\n        component.selectedValue = suggestion;\n        expect(value).toEqual(suggestion);\n    });\n});\n"]}