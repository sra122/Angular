{"version":3,"sources":["app/components/forms/dynamic-form/dynamic-switch/terra-dynamic-switch.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAGuB;AACvB,wCAA2C;AAG3C,2EAAuE;AAEvE;;GAEG;AAMH;IA0BI;QAHA,mCAAmC;QACzB,oBAAe,GAAO,8CAAoB,CAAC;QAIjD,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IAChC,CAAC;IAED,4CAA4C;IACpC,wDAAkB,GAA1B,UAA2B,SAA4C;QAEnE,6EAA6E;QAC7E,IAAI;QACJ,gEAAgE;QAChE,QAAQ;QACR,4EAA4E;QAC5E,YAAY;QACZ,oFAAoF;QACpF,gBAAgB;QAChB,4GAA4G;QAC5G,oBAAoB;QACpB,kEAAkE;QAClE,2CAA2C;QAC3C,0CAA0C;QAC1C,0BAA0B;QAC1B,sBAAsB;QACtB,gBAAgB;QAChB,mBAAmB;QACnB,gBAAgB;QAChB,4GAA4G;QAC5G,oBAAoB;QACpB,mEAAmE;QACnE,2CAA2C;QAC3C,0CAA0C;QAC1C,0BAA0B;QAC1B,sBAAsB;QACtB,gBAAgB;QAChB,YAAY;QACZ,QAAQ;QACR,MAAM;IACV,CAAC;IAzDD;QADC,YAAK,EAAE;kCACe,KAAK;wEAA0B;IAGtD;QADC,YAAK,EAAE;kCACc,iBAAS;uEAAC;IAGhC;QADC,YAAK,EAAE;;uEACsB;IAG9B;QADC,YAAK,EAAE;;wEACuB;IAG/B;QADC,YAAK,EAAE;;2EACyB;IAGjC;QADC,YAAK,EAAE;;wEACuB;IArBtB,2BAA2B;QALvC,gBAAS,CAAC;YACP,QAAQ,EAAE,sBAAsB;YAChC,QAAQ,EAAE,OAAO,CAAC,uCAAuC,CAAC;YAC1D,MAAM,EAAI,CAAC,OAAO,CAAC,uCAAuC,CAAC,CAAC;SAC/D,CAAC;;OACW,2BAA2B,CAgEvC;IAAD,kCAAC;CAhED,AAgEC,IAAA;AAhEY,kEAA2B","file":"terra-dynamic-switch.component.js","sourcesContent":["import {\n    Component,\n    Input\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { TerraFormFieldBase } from '../data/terra-form-field-base';\nimport { TerraFormFieldConditionalContainer } from '../data/terra-form-field-conditional-container';\nimport { TerraControlTypeEnum } from '../enum/terra-control-type.enum';\n\n/**\n * @author mfrank\n */\n@Component({\n    selector: 'terra-dynamic-switch',\n    template: require('./terra-dynamic-switch.component.html'),\n    styles:   [require('./terra-dynamic-switch.component.scss')]\n})\nexport class TerraDynamicSwitchComponent\n{\n    // Auf TerraFormFieldConditionalBean umbauen\n    // private readonly DELAY_FOR_CHANGE_DETECTION:number = 1;\n\n    @Input()\n    public inputFormFields:Array<TerraFormFieldBase<any>>;\n\n    @Input()\n    public inputFormGroup:FormGroup;\n\n    @Input()\n    public inputSubSwitch:boolean;\n\n    @Input()\n    public inputIsDisabled:boolean;\n\n    @Input()\n    public inputPortletHeader:string;\n\n    @Input()\n    public inputUsePortlet:boolean;\n\n    // Necessary for using enum in html\n    protected controlTypeEnum:any = TerraControlTypeEnum;\n\n    constructor()\n    {\n        this.inputSubSwitch = false;\n    }\n\n    // Auf TerraFormFieldConditionalBean umbauen\n    private onConditionChanged(formField:TerraFormFieldConditionalContainer):void\n    {\n        // Observable.of(null).delay(this.DELAY_FOR_CHANGE_DETECTION).subscribe(() =>\n        // {\n        //     for(let conditionalEntry in formField.conditionalEntries)\n        //     {\n        //         if(formField.conditionalEntries.hasOwnProperty(conditionalEntry))\n        //         {\n        //             if(this.inputFormGroup.get(formField.key).value === conditionalEntry)\n        //             {\n        //                 formField.conditionalEntries[conditionalEntry].forEach((entry:TerraFormFieldBase<any>) =>\n        //                 {\n        //                     this.inputFormGroup.get(entry.key).enable({\n        //                         onlySelf:  true,\n        //                         emitEvent: true\n        //                     });\n        //                 });\n        //             }\n        //             else\n        //             {\n        //                 formField.conditionalEntries[conditionalEntry].forEach((entry:TerraFormFieldBase<any>) =>\n        //                 {\n        //                     this.inputFormGroup.get(entry.key).disable({\n        //                         onlySelf:  true,\n        //                         emitEvent: true\n        //                     });\n        //                 });\n        //             }\n        //         }\n        //     }\n        // });\n    }\n}\n"]}