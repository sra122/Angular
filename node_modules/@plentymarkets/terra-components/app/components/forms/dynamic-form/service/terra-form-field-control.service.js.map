{"version":3,"sources":["app/components/forms/dynamic-form/service/terra-form-field-control.service.ts"],"names":[],"mappings":"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","file":"terra-form-field-control.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TerraFormFieldBase } from '../data/terra-form-field-base';\nimport {\n    FormBuilder,\n    FormControl,\n    FormGroup,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { isNullOrUndefined } from 'util';\nimport { TerraFormFieldConditionalContainer } from '../data/terra-form-field-conditional-container';\nimport { TerraFormFieldBaseContainer } from '../data/terra-form-field-base-container';\n\n/**\n * @author mfrank\n */\n@Injectable()\nexport class TerraFormFieldControlService\n{\n    public dynamicFormGroup:FormGroup;\n    public defaultValues:{ [key:string]:string | number | boolean };\n    public translationMapping:{ [key:string]:string };\n\n    private formFieldsToGroup:{ [key:string]:any };\n\n    constructor(private formBuilder:FormBuilder)\n    {\n        this.formFieldsToGroup = {};\n        this.defaultValues = {};\n        this.translationMapping = {};\n    }\n\n    /**\n     * Creates a new FormGroup\n     *\n     * @param formFields\n     */\n    public createFormGroup(formFields:Array<TerraFormFieldBase<any>>):void\n    {\n        this.formFieldsToGroup = this.initFormGroupHelper(formFields, {}, false);\n        this.dynamicFormGroup = this.formBuilder.group(this.formFieldsToGroup);\n    }\n\n    /**\n     * Resets the form to default values\n     */\n    public resetForm():void\n    {\n        this.dynamicFormGroup.reset(this.defaultValues);\n    }\n\n    /**\n     * Resets the form to default values\n     */\n    public updateDefaultValues(values:any):void\n    {\n        this.defaultValues = values;\n        this.dynamicFormGroup.patchValue(this.defaultValues, {emitEvent: true});\n    }\n\n    private initFormGroupHelper(formFields:Array<TerraFormFieldBase<any>>,\n                                toGroup:{ [key:string]:any },\n                                isDisabled:boolean = false):{ [key:string]:any }\n    {\n        formFields.forEach((formField:TerraFormFieldBase<any>) =>\n        {\n            if(formField instanceof TerraFormFieldBaseContainer && !isNullOrUndefined(formField.containerEntries))\n            {\n                toGroup[formField.key] = this.formBuilder.group(this.initFormGroupHelper(formField.containerEntries, {}, false));\n            }\n            else if(formField instanceof TerraFormFieldConditionalContainer && !isNullOrUndefined(formField.conditionalEntries))\n            {\n                // TODO extract into own component  or condition refactoring\n                // let subGroup:{ [key:string]:any } = {};\n                //\n                // subGroup[formField.key] = new FormControl(formField.value, this.generateValidators(formField));\n                //\n                // this.defaultValues[formField.key] = formField.value;\n                //\n                // for(let key in formField.conditionalEntries)\n                // {\n                //    if(formField.conditionalEntries.hasOwnProperty(key))\n                //    {\n                //        subGroup[key] = this._formBuilder.group(this.initFormGroupHelper(formField.conditionalEntries[key], {}, true));\n                //    }\n                // }\n                //\n                // toGroup[formField.key] = this._formBuilder.group(subGroup);\n            }\n            else\n            {\n                toGroup[formField.key] = new FormControl(formField.defaultValue, this.generateValidators(formField));\n                if(isDisabled)\n                {\n                    toGroup[formField.key].disable({\n                        onlySelf:  true,\n                        emitEvent: false\n                    });\n                }\n                this.defaultValues[formField.key] = formField.defaultValue;\n                this.translationMapping[formField.key] = formField.label;\n            }\n        });\n\n        return toGroup;\n    }\n\n    private generateValidators(formField:TerraFormFieldBase<any>):Array<ValidatorFn>\n    {\n        let validators:Array<ValidatorFn> = [];\n\n        if(formField.required)\n        {\n            validators.push(Validators.required);\n        }\n\n        if(formField.minLength >= 0)\n        {\n            validators.push(Validators.minLength(formField.minLength));\n        }\n\n        if(formField.maxLength >= 0)\n        {\n            validators.push(Validators.maxLength(formField.maxLength));\n        }\n\n        // TODO implement, if Angular version is or higher 4.4\n        // if(!isNull(formField.minValue))\n        // {\n        //    validators.push(Validators.minValue(formField.minValue));\n        // }\n        //\n        // if(!isNull(formField.maxValue))\n        // {\n        //    validators.push(Validators.maxValue(formField.maxValue));\n        // }\n\n        if(formField.pattern !== '')\n        {\n            validators.push(Validators.pattern(formField.pattern));\n        }\n\n        return validators;\n    }\n}\n"]}