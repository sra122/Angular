"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var util_1 = require("util");
var terra_form_field_conditional_container_1 = require("../data/terra-form-field-conditional-container");
var terra_form_field_base_container_1 = require("../data/terra-form-field-base-container");
/**
 * @author mfrank
 */
var TerraFormFieldControlService = /** @class */ (function () {
    function TerraFormFieldControlService(formBuilder) {
        this.formBuilder = formBuilder;
        this.formFieldsToGroup = {};
        this.defaultValues = {};
        this.translationMapping = {};
    }
    /**
     * Creates a new FormGroup
     *
     * @param formFields
     */
    TerraFormFieldControlService.prototype.createFormGroup = function (formFields) {
        this.formFieldsToGroup = this.initFormGroupHelper(formFields, {}, false);
        this.dynamicFormGroup = this.formBuilder.group(this.formFieldsToGroup);
    };
    /**
     * Resets the form to default values
     */
    TerraFormFieldControlService.prototype.resetForm = function () {
        this.dynamicFormGroup.reset(this.defaultValues);
    };
    /**
     * Resets the form to default values
     */
    TerraFormFieldControlService.prototype.updateDefaultValues = function (values) {
        this.defaultValues = values;
        this.dynamicFormGroup.patchValue(this.defaultValues, { emitEvent: true });
    };
    TerraFormFieldControlService.prototype.initFormGroupHelper = function (formFields, toGroup, isDisabled) {
        var _this = this;
        if (isDisabled === void 0) { isDisabled = false; }
        formFields.forEach(function (formField) {
            if (formField instanceof terra_form_field_base_container_1.TerraFormFieldBaseContainer && !util_1.isNullOrUndefined(formField.containerEntries)) {
                toGroup[formField.key] = _this.formBuilder.group(_this.initFormGroupHelper(formField.containerEntries, {}, false));
            }
            else if (formField instanceof terra_form_field_conditional_container_1.TerraFormFieldConditionalContainer && !util_1.isNullOrUndefined(formField.conditionalEntries)) {
                // TODO extract into own component  or condition refactoring
                // let subGroup:{ [key:string]:any } = {};
                //
                // subGroup[formField.key] = new FormControl(formField.value, this.generateValidators(formField));
                //
                // this.defaultValues[formField.key] = formField.value;
                //
                // for(let key in formField.conditionalEntries)
                // {
                //    if(formField.conditionalEntries.hasOwnProperty(key))
                //    {
                //        subGroup[key] = this._formBuilder.group(this.initFormGroupHelper(formField.conditionalEntries[key], {}, true));
                //    }
                // }
                //
                // toGroup[formField.key] = this._formBuilder.group(subGroup);
            }
            else {
                toGroup[formField.key] = new forms_1.FormControl(formField.defaultValue, _this.generateValidators(formField));
                if (isDisabled) {
                    toGroup[formField.key].disable({
                        onlySelf: true,
                        emitEvent: false
                    });
                }
                _this.defaultValues[formField.key] = formField.defaultValue;
                _this.translationMapping[formField.key] = formField.label;
            }
        });
        return toGroup;
    };
    TerraFormFieldControlService.prototype.generateValidators = function (formField) {
        var validators = [];
        if (formField.required) {
            validators.push(forms_1.Validators.required);
        }
        if (formField.minLength >= 0) {
            validators.push(forms_1.Validators.minLength(formField.minLength));
        }
        if (formField.maxLength >= 0) {
            validators.push(forms_1.Validators.maxLength(formField.maxLength));
        }
        // TODO implement, if Angular version is or higher 4.4
        // if(!isNull(formField.minValue))
        // {
        //    validators.push(Validators.minValue(formField.minValue));
        // }
        //
        // if(!isNull(formField.maxValue))
        // {
        //    validators.push(Validators.maxValue(formField.maxValue));
        // }
        if (formField.pattern !== '') {
            validators.push(forms_1.Validators.pattern(formField.pattern));
        }
        return validators;
    };
    TerraFormFieldControlService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [forms_1.FormBuilder])
    ], TerraFormFieldControlService);
    return TerraFormFieldControlService;
}());
exports.TerraFormFieldControlService = TerraFormFieldControlService;

//# sourceMappingURL=terra-form-field-control.service.js.map
