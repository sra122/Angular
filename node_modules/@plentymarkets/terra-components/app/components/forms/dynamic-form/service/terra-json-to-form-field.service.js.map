{"version":3,"sources":["app/components/forms/dynamic-form/service/terra-json-to-form-field.service.ts"],"names":[],"mappings":"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","file":"terra-json-to-form-field.service.js","sourcesContent":["import { TerraFormFieldBase } from '../data/terra-form-field-base';\nimport { TerraControlTypeEnum } from '../enum/terra-control-type.enum';\nimport { TerraFormFieldInputText } from '../data/terra-form-field-input-text';\nimport { TerraFormFieldInputNumber } from '../data/terra-form-field-input-number';\nimport { TerraFormFieldInputDouble } from '../data/terra-form-field-input-double';\nimport { TerraFormFieldTextArea } from '../data/terra-form-field-text-area';\nimport { TerraFormFieldDatePicker } from '../data/terra-form-field-date-picker';\nimport { TerraFormFieldSelectBox } from '../data/terra-form-field-select-box';\nimport { TerraFormFieldCheckBox } from '../data/terra-form-field-check-box';\nimport { TerraFormFieldBaseContainer } from '../data/terra-form-field-base-container';\nimport { TerraFormFieldCategoryPicker } from '../data/terra-form-field-category-picker';\nimport { TerraFormFieldInputFile } from '../data/terra-form-field-input-file';\nimport { TerraFormFieldColorPicker } from '../data/terra-form-field-color-picker';\nimport { TerraFormFieldMultiCheckBox } from '../data/terra-form-field-multi-check-box';\nimport { TerraFormFieldNoteEditor } from '../data/terra-form-field-note-editor';\nimport { TerraFormFieldCodeEditor } from '../data/terra-form-field-code-editor';\n\n/**\n * @author mfrank\n *\n */\nexport class TerraJsonToFormFieldService\n{\n    public static generateFormFields(formFieldsJSON:{ [key:string]:any }):Array<TerraFormFieldBase<any>>\n    {\n        let formFields:Array<TerraFormFieldBase<any>> = [];\n\n        Object.keys(formFieldsJSON).forEach((formFieldKey:string):void =>\n        {\n            formFields.push(this.createFormField(formFieldKey, formFieldsJSON[formFieldKey]));\n        });\n\n        return formFields;\n    }\n\n    private static createFormField(formFieldKey:string, formFieldData:{ [key:string]:any }):TerraFormFieldBase<any>\n    {\n        let formField:TerraFormFieldBase<any>;\n\n        switch(formFieldData.type)\n        {\n            case TerraControlTypeEnum.INPUT_TEXT:\n                formField = new TerraFormFieldInputText(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.INPUT_FILE:\n                formField = new TerraFormFieldInputFile(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.INPUT_NUMBER:\n                formField = new TerraFormFieldInputNumber(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.INPUT_DOUBLE:\n                formField = new TerraFormFieldInputDouble(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.INPUT_TEXT_AREA:\n                formField = new TerraFormFieldTextArea(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.DATE_PICKER:\n                formField = new TerraFormFieldDatePicker(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.SELECT_BOX:\n                formField = new TerraFormFieldSelectBox(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.CHECK_BOX:\n                formField = new TerraFormFieldCheckBox(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.NOTE_EDITOR:\n                formField = new TerraFormFieldNoteEditor(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.CODE_EDITOR:\n                formField = new TerraFormFieldCodeEditor(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.CATEGORY_PICKER:\n                formField = new TerraFormFieldCategoryPicker(formFieldKey,\n                    formFieldData.label,\n                    formFieldData.required,\n                    formFieldData.options);\n                break;\n            case TerraControlTypeEnum.COLOR_PICKER:\n                formField = new TerraFormFieldColorPicker(formFieldKey, formFieldData.label, formFieldData.required, formFieldData.options);\n                break;\n            case TerraControlTypeEnum.MULTI_CHECK_BOX:\n                formField = new TerraFormFieldMultiCheckBox(formFieldKey,\n                    formFieldData.label,\n                    formFieldData.required,\n                    formFieldData.options);\n                break;\n            case TerraControlTypeEnum.VERTICAL_CONTAINER:\n                formField = this.createContainerFormField(formFieldKey, formFieldData, TerraControlTypeEnum.VERTICAL_CONTAINER);\n                break;\n            case TerraControlTypeEnum.HORIZONTAL_CONTAINER:\n                formField = this.createContainerFormField(formFieldKey, formFieldData, TerraControlTypeEnum.HORIZONTAL_CONTAINER);\n                break;\n            default:\n                formField = new TerraFormFieldBase(\n                    formFieldKey,\n                    formFieldData.type,\n                    formFieldData.label,\n                    formFieldData.required,\n                    formFieldData.options\n                );\n                break;\n        }\n\n        return formField;\n    }\n\n    private static createContainerFormField(formFieldKey:string,\n                                            formFieldData:{ [key:string]:any },\n                                            containerType:TerraControlTypeEnum):TerraFormFieldBaseContainer\n    {\n        let containerFormField:TerraFormFieldBaseContainer = new TerraFormFieldBaseContainer(formFieldKey,\n            containerType,\n            formFieldData.label);\n\n        containerFormField.containerEntries = this.generateFormFields(formFieldData.options.containerEntries);\n\n        return containerFormField;\n    }\n}\n"]}