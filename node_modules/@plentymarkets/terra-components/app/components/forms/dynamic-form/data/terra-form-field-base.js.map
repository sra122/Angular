{"version":3,"sources":["app/components/forms/dynamic-form/data/terra-form-field-base.ts"],"names":[],"mappings":";;AAAA,6BAGc;AAkBd;;GAEG;AACH;IAoBI,4BAAY,GAAU,EAAE,WAAgC,EAAE,KAAY,EAAE,QAAgB,EAAE,OAAyC;QAAzC,wBAAA,EAAA,YAAyC;QAE/H,IAAG,aAAM,CAAC,GAAG,CAAC,EACd;YACI,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;SAC1C;QAED,IAAG,aAAM,CAAC,WAAW,CAAC,EACtB;YACI,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAE/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAEzB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,IAAI,IAAI,CAAC;QACjD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC;QACvC,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,IAAI,KAAK,CAAC;QAC1D,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC;QACzC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC;QACzC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IACzC,CAAC;IACL,yBAAC;AAAD,CA/CA,AA+CC,IAAA;AA/CY,gDAAkB","file":"terra-form-field-base.js","sourcesContent":["import {\n    isNull,\n    isNullOrUndefined\n} from 'util';\nimport { TerraControlTypeEnum } from '../enum/terra-control-type.enum';\n\n/**\n * @author mfrank\n */\nexport interface TerraFormFieldBaseOptions<T>\n{\n    defaultValue?:T;\n    tooltip?:string;\n    tooltipPlacement?:string;\n    minLength?:number;\n    maxLength?:number;\n    minValue?:number;\n    maxValue?:number;\n    pattern?:string | RegExp;\n}\n\n/**\n *\n */\nexport class TerraFormFieldBase<T>\n{\n    public defaultValue:T;\n    public key:string;\n    public label:string;\n\n    // Tooltip\n    public tooltip:string;\n    public tooltipPlacement:string;\n\n    // Validator\n    public required:boolean;\n    public minLength:number;\n    public maxLength:number;\n    public minValue:number;\n    public maxValue:number;\n    public pattern:string | RegExp;\n\n    public readonly controlType:TerraControlTypeEnum;\n\n    constructor(key:string, controlType:TerraControlTypeEnum, label:string, required:boolean, options:TerraFormFieldBaseOptions<T> = {})\n    {\n        if(isNull(key))\n        {\n            throw new Error('key can not be null');\n        }\n\n        if(isNull(controlType))\n        {\n            throw new Error('controlType can not be null');\n        }\n\n        this.key = key;\n        this.controlType = controlType;\n\n        this.label = label;\n        this.required = required;\n\n        this.defaultValue = options.defaultValue ||Â null;\n        this.tooltip = options.tooltip || null;\n        this.tooltipPlacement = options.tooltipPlacement || 'top';\n        this.minLength = options.minLength || -1;\n        this.maxLength = options.maxLength || -1;\n        this.minValue = options.minValue || null;\n        this.maxValue = options.maxValue || null;\n        this.pattern = options.pattern || '';\n    }\n}\n"]}