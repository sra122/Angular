{"version":3,"sources":["app/components/forms/dynamic-form/handler/terra-dynamic-form-functions.handler.ts"],"names":[],"mappings":";;AAIA;;GAEG;AACH;IAiCI,0CAAY,YAAiC,EACjC,aAAgD,EAChD,aAAuF,EACvF,sBAA0C,EAC1C,mBAAiC;QAAjC,oCAAA,EAAA,0BAAiC;QAEzC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;QACrD,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACnD,CAAC;IAEM,iDAAM,GAAb,UAAc,UAAY;QAEtB,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;IAClE,CAAC;IAED,sBAAW,qEAAuB;aAAlC,UAAmC,uBAAoD;YAEnF,IAAI,CAAC,wBAAwB,GAAG,uBAAuB,CAAC;QAC5D,CAAC;;;OAAA;IACL,uCAAC;AAAD,CAvDA,AAuDC,IAAA;AAvDY,4EAAgC","file":"terra-dynamic-form-functions.handler.js","sourcesContent":["import { FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs/Observable';\nimport { TerraFormFieldControlService } from '../service/terra-form-field-control.service';\n\n/**\n * @author mfrank\n */\nexport class TerraDynamicFormFunctionsHandler<D>\n{\n    /**\n     * Called after valid form validation.\n     *\n     * @param formData\n     */\n    public saveCallback:(formData:D) => void;\n\n    /**\n     * Called after valid form validation and when a REST URL is set.\n     *\n     * @param observable\n     */\n    public savedCallback:(observable:Observable<D>) => void;\n\n    /**\n     * Called after invalid form validation.\n     *\n     * @param formGroup\n     * @param translationMapping\n     */\n    public errorCallback:(formGroup:FormGroup, translationMapping:{ [key:string]:string }) => void;\n\n    /**\n     * Called after a form value has changed\n     */\n    public onValueChangedCallback:(value:any) => void;\n\n    public valueChangeDebounce:number;\n\n    private _formFieldControlService?:TerraFormFieldControlService;\n\n    constructor(saveCallback:(formData:D) => void,\n                savedCallback:(observable:Observable<D>) => void,\n                errorCallback:(formGroup:FormGroup, translationMapping:{ [key:string]:string }) => void,\n                onValueChangedCallback:(value:any) => void,\n                valueChangeDebounce:number = 1000)\n    {\n        this.saveCallback = saveCallback;\n        this.savedCallback = savedCallback;\n        this.errorCallback = errorCallback;\n        this.onValueChangedCallback = onValueChangedCallback;\n        this.valueChangeDebounce = valueChangeDebounce;\n    }\n\n    public update(formValues:D):void\n    {\n        this._formFieldControlService.updateDefaultValues(formValues);\n    }\n\n    public set formFieldControlService(formFieldControlService:TerraFormFieldControlService)\n    {\n        this._formFieldControlService = formFieldControlService;\n    }\n}\n"]}