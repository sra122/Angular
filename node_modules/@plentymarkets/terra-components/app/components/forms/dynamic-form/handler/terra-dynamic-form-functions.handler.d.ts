import { FormGroup } from '@angular/forms';
import { Observable } from 'rxjs/Observable';
import { TerraFormFieldControlService } from '../service/terra-form-field-control.service';
/**
 * @author mfrank
 */
export declare class TerraDynamicFormFunctionsHandler<D> {
    /**
     * Called after valid form validation.
     *
     * @param formData
     */
    saveCallback: (formData: D) => void;
    /**
     * Called after valid form validation and when a REST URL is set.
     *
     * @param observable
     */
    savedCallback: (observable: Observable<D>) => void;
    /**
     * Called after invalid form validation.
     *
     * @param formGroup
     * @param translationMapping
     */
    errorCallback: (formGroup: FormGroup, translationMapping: {
        [key: string]: string;
    }) => void;
    /**
     * Called after a form value has changed
     */
    onValueChangedCallback: (value: any) => void;
    valueChangeDebounce: number;
    private _formFieldControlService?;
    constructor(saveCallback: (formData: D) => void, savedCallback: (observable: Observable<D>) => void, errorCallback: (formGroup: FormGroup, translationMapping: {
        [key: string]: string;
    }) => void, onValueChangedCallback: (value: any) => void, valueChangeDebounce?: number);
    update(formValues: D): void;
    formFieldControlService: TerraFormFieldControlService;
}
