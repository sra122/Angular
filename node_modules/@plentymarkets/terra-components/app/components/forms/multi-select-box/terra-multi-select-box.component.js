"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_checkbox_component_1 = require("../checkbox/terra-checkbox.component");
var angular_l10n_1 = require("angular-l10n");
var util_1 = require("util");
/** @deprecated - please use `TerraMultiCheckBoxComponent` instead */
var TerraMultiSelectBoxComponent = /** @class */ (function () {
    function TerraMultiSelectBoxComponent(translation) {
        this.translation = translation;
        this.inputSelectedValueListChange = new core_1.EventEmitter();
        this.selectedValueList = [];
        this.langPrefix = 'terraMultiSelectBox';
        console.warn('TerraMultiSelectBoxComponent is deprecated. It will be removed in one of the upcoming releases' +
            'Please use TerraMultiCheckBoxComponent instead.');
    }
    Object.defineProperty(TerraMultiSelectBoxComponent.prototype, "inputSelectedValueList", {
        set: function (value) {
            var _this = this;
            if (!util_1.isNullOrUndefined(value)) {
                var valueCopy_1 = value.slice(0);
                if (valueCopy_1.length === 0) {
                    this.viewChildHeaderCheckbox.value = false;
                }
                else if (this.selectedValueList.length > 0 && this.inputValueList.length === this.selectedValueList.length) {
                    this.viewChildHeaderCheckbox.value = true;
                }
                else {
                    this.viewChildHeaderCheckbox.isIndeterminate = true;
                }
                for (var i = this.selectedValueList.length; i >= 0; i--) {
                    this.selectedValueList.pop();
                }
                this.inputValueList
                    .forEach(function (item) {
                    item.selected = false;
                    valueCopy_1.forEach(function (key) {
                        if (item.value === key) {
                            item.selected = true;
                            _this.selectedValueList.push(item.value);
                            return;
                        }
                    });
                });
                setTimeout(function () { return _this.inputSelectedValueListChange.emit(_this.selectedValueList); }, 0);
            }
        },
        enumerable: true,
        configurable: true
    });
    TerraMultiSelectBoxComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.inputName) {
            this.inputName = this.translation.translate(this.langPrefix + '.selectAll');
            // this is necessary for language switch
            this.translation.translationChanged().subscribe(function () {
                _this.inputName = _this.translation.translate(_this.langPrefix + '.selectAll');
            });
        }
        this.isInit = true;
    };
    /**
     *
     * @param changes
     */
    TerraMultiSelectBoxComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.isInit === true && changes['inputValueList'] && changes['inputValueList'].currentValue.length > 0) {
            var temp_1 = [];
            changes['inputValueList'].currentValue.forEach(function (item) {
                if (item.selected && item.selected === true) {
                    temp_1.push(item.value);
                }
            });
            setTimeout(function () { return _this.inputSelectedValueList = temp_1; }, 0);
        }
    };
    TerraMultiSelectBoxComponent.prototype.primaryClicked = function () {
        this.onHeaderCheckboxChange(!this.viewChildHeaderCheckbox.value);
    };
    TerraMultiSelectBoxComponent.prototype.onHeaderCheckboxChange = function (isChecked) {
        var _this = this;
        this.viewChildHeaderCheckbox.value = isChecked;
        this.inputValueList.forEach(function (value) {
            _this.changeValueState(isChecked, value);
        });
        this.inputSelectedValueList = this.selectedValueList;
    };
    TerraMultiSelectBoxComponent.prototype.onValueCheckboxChange = function (isChecked, value) {
        this.changeValueState(isChecked, value);
        this.inputSelectedValueList = this.selectedValueList;
        if (this.selectedValueList.length === 0) {
            this.viewChildHeaderCheckbox.value = false;
        }
        else if (this.selectedValueList.length > 0 && this.inputValueList.length === this.selectedValueList.length) {
            this.viewChildHeaderCheckbox.value = true;
        }
        else {
            this.viewChildHeaderCheckbox.isIndeterminate = true;
        }
    };
    TerraMultiSelectBoxComponent.prototype.changeValueState = function (isChecked, valueToChange) {
        valueToChange.selected = isChecked;
        var valueFound = false;
        var index = this.selectedValueList.indexOf(valueToChange.value);
        // check if value exists in list
        if (index === -1) {
            valueFound = false;
        }
        else {
            valueFound = !util_1.isNull(this.selectedValueList[index]);
        }
        if (valueToChange.selected) {
            if (!valueFound) {
                this.selectedValueList.push(valueToChange.value);
            }
        }
        else {
            index = this.selectedValueList.indexOf(valueToChange.value);
            this.selectedValueList.splice(index, 1);
        }
    };
    TerraMultiSelectBoxComponent.prototype.extractSelectedValues = function (valueList) {
        var result = [];
        if (valueList && valueList.length > 0) {
            valueList.forEach(function (item) {
                if (item.selected === true) {
                    result.push(item.value);
                }
            });
        }
        return result;
    };
    __decorate([
        core_1.ViewChild('viewChildHeaderCheckbox'),
        __metadata("design:type", terra_checkbox_component_1.TerraCheckboxComponent)
    ], TerraMultiSelectBoxComponent.prototype, "viewChildHeaderCheckbox", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraMultiSelectBoxComponent.prototype, "inputIsDisabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraMultiSelectBoxComponent.prototype, "inputIsError", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraMultiSelectBoxComponent.prototype, "inputValueList", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraMultiSelectBoxComponent.prototype, "inputName", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraMultiSelectBoxComponent.prototype, "inputIsRequired", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraMultiSelectBoxComponent.prototype, "inputSelectedValueListChange", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array),
        __metadata("design:paramtypes", [Array])
    ], TerraMultiSelectBoxComponent.prototype, "inputSelectedValueList", null);
    TerraMultiSelectBoxComponent = __decorate([
        core_1.Component({
            selector: 'terra-multi-select-box',
            styles: [require('./terra-multi-select-box.component.scss')],
            template: require('./terra-multi-select-box.component.html')
        }),
        __metadata("design:paramtypes", [angular_l10n_1.TranslationService])
    ], TerraMultiSelectBoxComponent);
    return TerraMultiSelectBoxComponent;
}());
exports.TerraMultiSelectBoxComponent = TerraMultiSelectBoxComponent;

//# sourceMappingURL=terra-multi-select-box.component.js.map
