{"version":3,"sources":["app/components/forms/multi-select-box/terra-multi-select-box.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCASuB;AAEvB,iFAA8E;AAC9E,6CAAkD;AAClD,6BAGc;AAEd,qEAAqE;AAMrE;IAyEI,sCAAmB,WAA8B;QAA9B,gBAAW,GAAX,WAAW,CAAmB;QApD1C,iCAA4B,GAA4B,IAAI,mBAAY,EAAc,CAAC;QA+CtF,sBAAiB,GAAc,EAAE,CAAC;QAGlC,eAAU,GAAU,qBAAqB,CAAC;QAI9C,OAAO,CAAC,IAAI,CAAC,gGAAgG;YAChG,iDAAiD,CAAC,CAAC;IACpE,CAAC;IArDD,sBAAW,gEAAsB;aAAjC,UAAkC,KAAgB;YADlD,iBA2CC;YAxCG,IAAG,CAAC,wBAAiB,CAAC,KAAK,CAAC,EAC5B;gBACI,IAAI,WAAS,GAAO,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAEnC,IAAG,WAAS,CAAC,MAAM,KAAK,CAAC,EACzB;oBACI,IAAI,CAAC,uBAAuB,CAAC,KAAK,GAAG,KAAK,CAAC;iBAC9C;qBACI,IAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,IAAI,CAAC,iBAAiB,CAAC,MAAM,EACzG;oBACI,IAAI,CAAC,uBAAuB,CAAC,KAAK,GAAG,IAAI,CAAC;iBAC7C;qBAED;oBACI,IAAI,CAAC,uBAAuB,CAAC,eAAe,GAAG,IAAI,CAAC;iBACvD;gBAED,KAAI,IAAI,CAAC,GAAU,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAC7D;oBACI,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,CAAC;iBAChC;gBAED,IAAI,CAAC,cAAc;qBACd,OAAO,CAAC,UAAC,IAAsC;oBAE5C,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;oBAEtB,WAAS,CAAC,OAAO,CAAC,UAAC,GAAO;wBAEtB,IAAG,IAAI,CAAC,KAAK,KAAK,GAAG,EACrB;4BACI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;4BACrB,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;4BACxC,OAAO;yBACV;oBACL,CAAC,CAAC,CAAC;gBACP,CAAC,CAAC,CAAC;gBAEP,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAI,CAAC,iBAAiB,CAAC,EAA9D,CAA8D,EAAE,CAAC,CAAC,CAAC;aACvF;QACL,CAAC;;;OAAA;IAaM,+CAAQ,GAAf;QAAA,iBAcC;QAZG,IAAG,CAAC,IAAI,CAAC,SAAS,EAClB;YACI,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC;YAE5E,wCAAwC;YACxC,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC,SAAS,CAAC;gBAE5C,KAAI,CAAC,SAAS,GAAG,KAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAI,CAAC,UAAU,GAAG,YAAY,CAAC,CAAC;YAChF,CAAC,CAAC,CAAC;SACN;QAED,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IAED;;;OAGG;IACI,kDAAW,GAAlB,UAAmB,OAAqB;QAAxC,iBAgBC;QAdG,IAAG,IAAI,CAAC,MAAM,KAAK,IAAI,IAAI,OAAO,CAAC,gBAAgB,CAAC,IAAI,OAAO,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EACzG;YACI,IAAI,MAAI,GAAc,EAAE,CAAC;YAEzB,OAAO,CAAC,gBAAgB,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,UAAC,IAAsC;gBAElF,IAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,IAAI,EAC1C;oBACI,MAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACzB;YACL,CAAC,CAAC,CAAC;YAEH,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,sBAAsB,GAAG,MAAI,EAAlC,CAAkC,EAAE,CAAC,CAAC,CAAC;SAC3D;IACL,CAAC;IAEO,qDAAc,GAAtB;QAEI,IAAI,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IACrE,CAAC;IAEO,6DAAsB,GAA9B,UAA+B,SAAiB;QAAhD,iBAUC;QARG,IAAI,CAAC,uBAAuB,CAAC,KAAK,GAAG,SAAS,CAAC;QAE/C,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAC,KAAuC;YAEhE,KAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,CAAC;IACzD,CAAC;IAEO,4DAAqB,GAA7B,UAA8B,SAAiB,EAAE,KAAuC;QAEpF,IAAI,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QACxC,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAErD,IAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,EACtC;YACI,IAAI,CAAC,uBAAuB,CAAC,KAAK,GAAG,KAAK,CAAC;SAC9C;aACI,IAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,IAAI,CAAC,iBAAiB,CAAC,MAAM,EACzG;YACI,IAAI,CAAC,uBAAuB,CAAC,KAAK,GAAG,IAAI,CAAC;SAC7C;aAED;YACI,IAAI,CAAC,uBAAuB,CAAC,eAAe,GAAG,IAAI,CAAC;SACvD;IACL,CAAC;IAEO,uDAAgB,GAAxB,UAAyB,SAAiB,EAAE,aAA+C;QAEvF,aAAa,CAAC,QAAQ,GAAG,SAAS,CAAC;QAEnC,IAAI,UAAU,GAAW,KAAK,CAAC;QAE/B,IAAI,KAAK,GAAU,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAEvE,gCAAgC;QAChC,IAAG,KAAK,KAAK,CAAC,CAAC,EACf;YACI,UAAU,GAAG,KAAK,CAAC;SACtB;aAED;YACI,UAAU,GAAG,CAAC,aAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;SACvD;QAED,IAAG,aAAa,CAAC,QAAQ,EACzB;YACI,IAAG,CAAC,UAAU,EACd;gBACI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aACpD;SACJ;aAED;YACI,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAE5D,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SAC3C;IACL,CAAC;IAEO,4DAAqB,GAA7B,UAA8B,SAAkD;QAE5E,IAAI,MAAM,GAAc,EAAE,CAAC;QAE3B,IAAG,SAAS,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EACpC;YACI,SAAS,CAAC,OAAO,CAAC,UAAC,IAAsC;gBAErD,IAAG,IAAI,CAAC,QAAQ,KAAK,IAAI,EACzB;oBACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC3B;YACL,CAAC,CAAC,CAAC;SACN;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;IAvMD;QADC,gBAAS,CAAC,yBAAyB,CAAC;kCACN,iDAAsB;iFAAC;IAGtD;QADC,YAAK,EAAE;;yEACuB;IAG/B;QADC,YAAK,EAAE;;sEACoB;IAG5B;QADC,YAAK,EAAE;kCACc,KAAK;wEAAoC;IAG/D;QADC,YAAK,EAAE;;mEACgB;IAGxB;QADC,YAAK,EAAE;;yEACuB;IAG/B;QADC,aAAM,EAAE;kCAC2B,mBAAY;sFAA8C;IAG9F;QADC,YAAK,EAAE;kCACgC,KAAK;yCAAL,KAAK;8EA0C5C;IAlEQ,4BAA4B;QALxC,gBAAS,CAAC;YACP,QAAQ,EAAE,wBAAwB;YAClC,MAAM,EAAI,CAAC,OAAO,CAAC,yCAAyC,CAAC,CAAC;YAC9D,QAAQ,EAAE,OAAO,CAAC,yCAAyC,CAAC;SAC/D,CAAC;yCA0EiC,iCAAkB;OAzExC,4BAA4B,CA2MxC;IAAD,mCAAC;CA3MD,AA2MC,IAAA;AA3MY,oEAA4B","file":"terra-multi-select-box.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { TerraMultiSelectBoxValueInterface } from './data/terra-multi-select-box-value.interface';\nimport { TerraCheckboxComponent } from '../checkbox/terra-checkbox.component';\nimport { TranslationService } from 'angular-l10n';\nimport {\n    isNull,\n    isNullOrUndefined\n} from 'util';\n\n/** @deprecated - please use `TerraMultiCheckBoxComponent` instead */\n@Component({\n    selector: 'terra-multi-select-box',\n    styles:   [require('./terra-multi-select-box.component.scss')],\n    template: require('./terra-multi-select-box.component.html')\n})\nexport class TerraMultiSelectBoxComponent implements OnInit, OnChanges\n{\n    @ViewChild('viewChildHeaderCheckbox')\n    public viewChildHeaderCheckbox:TerraCheckboxComponent;\n\n    @Input()\n    public inputIsDisabled:boolean;\n\n    @Input()\n    public inputIsError:boolean;\n\n    @Input()\n    public inputValueList:Array<TerraMultiSelectBoxValueInterface>;\n\n    @Input()\n    public inputName:string;\n\n    @Input()\n    public inputIsRequired:boolean;\n\n    @Output()\n    public inputSelectedValueListChange:EventEmitter<Array<any>> = new EventEmitter<Array<any>>();\n\n    @Input()\n    public set inputSelectedValueList(value:Array<any>)\n    {\n        if(!isNullOrUndefined(value))\n        {\n            let valueCopy:any = value.slice(0);\n\n            if(valueCopy.length === 0)\n            {\n                this.viewChildHeaderCheckbox.value = false;\n            }\n            else if(this.selectedValueList.length > 0 && this.inputValueList.length === this.selectedValueList.length)\n            {\n                this.viewChildHeaderCheckbox.value = true;\n            }\n            else\n            {\n                this.viewChildHeaderCheckbox.isIndeterminate = true;\n            }\n\n            for(let i:number = this.selectedValueList.length; i >= 0; i--)\n            {\n                this.selectedValueList.pop();\n            }\n\n            this.inputValueList\n                .forEach((item:TerraMultiSelectBoxValueInterface) =>\n                {\n                    item.selected = false;\n\n                    valueCopy.forEach((key:any) =>\n                    {\n                        if(item.value === key)\n                        {\n                            item.selected = true;\n                            this.selectedValueList.push(item.value);\n                            return;\n                        }\n                    });\n                });\n\n            setTimeout(() => this.inputSelectedValueListChange.emit(this.selectedValueList), 0);\n        }\n    }\n\n    private selectedValueList:Array<any> = [];\n    private isInit:boolean;\n\n    private langPrefix:string = 'terraMultiSelectBox';\n\n    constructor(public translation:TranslationService)\n    {\n        console.warn('TerraMultiSelectBoxComponent is deprecated. It will be removed in one of the upcoming releases' +\n                     'Please use TerraMultiCheckBoxComponent instead.');\n    }\n\n    public ngOnInit():void\n    {\n        if(!this.inputName)\n        {\n            this.inputName = this.translation.translate(this.langPrefix + '.selectAll');\n\n            // this is necessary for language switch\n            this.translation.translationChanged().subscribe(() =>\n            {\n                this.inputName = this.translation.translate(this.langPrefix + '.selectAll');\n            });\n        }\n\n        this.isInit = true;\n    }\n\n    /**\n     *\n     * @param changes\n     */\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if(this.isInit === true && changes['inputValueList'] && changes['inputValueList'].currentValue.length > 0)\n        {\n            let temp:Array<any> = [];\n\n            changes['inputValueList'].currentValue.forEach((item:TerraMultiSelectBoxValueInterface) =>\n            {\n                if(item.selected && item.selected === true)\n                {\n                    temp.push(item.value);\n                }\n            });\n\n            setTimeout(() => this.inputSelectedValueList = temp, 0);\n        }\n    }\n\n    private primaryClicked():void\n    {\n        this.onHeaderCheckboxChange(!this.viewChildHeaderCheckbox.value);\n    }\n\n    private onHeaderCheckboxChange(isChecked:boolean):void\n    {\n        this.viewChildHeaderCheckbox.value = isChecked;\n\n        this.inputValueList.forEach((value:TerraMultiSelectBoxValueInterface) =>\n        {\n            this.changeValueState(isChecked, value);\n        });\n\n        this.inputSelectedValueList = this.selectedValueList;\n    }\n\n    private onValueCheckboxChange(isChecked:boolean, value:TerraMultiSelectBoxValueInterface):void\n    {\n        this.changeValueState(isChecked, value);\n        this.inputSelectedValueList = this.selectedValueList;\n\n        if(this.selectedValueList.length === 0)\n        {\n            this.viewChildHeaderCheckbox.value = false;\n        }\n        else if(this.selectedValueList.length > 0 && this.inputValueList.length === this.selectedValueList.length)\n        {\n            this.viewChildHeaderCheckbox.value = true;\n        }\n        else\n        {\n            this.viewChildHeaderCheckbox.isIndeterminate = true;\n        }\n    }\n\n    private changeValueState(isChecked:boolean, valueToChange:TerraMultiSelectBoxValueInterface):void\n    {\n        valueToChange.selected = isChecked;\n\n        let valueFound:boolean = false;\n\n        let index:number = this.selectedValueList.indexOf(valueToChange.value);\n\n        // check if value exists in list\n        if(index === -1)\n        {\n            valueFound = false;\n        }\n        else\n        {\n            valueFound = !isNull(this.selectedValueList[index]);\n        }\n\n        if(valueToChange.selected)\n        {\n            if(!valueFound)\n            {\n                this.selectedValueList.push(valueToChange.value);\n            }\n        }\n        else\n        {\n            index = this.selectedValueList.indexOf(valueToChange.value);\n\n            this.selectedValueList.splice(index, 1);\n        }\n    }\n\n    private extractSelectedValues(valueList:Array<TerraMultiSelectBoxValueInterface>):Array<any>\n    {\n        let result:Array<any> = [];\n\n        if(valueList && valueList.length > 0)\n        {\n            valueList.forEach((item:TerraMultiSelectBoxValueInterface) =>\n            {\n                if(item.selected === true)\n                {\n                    result.push(item.value);\n                }\n            });\n        }\n\n        return result;\n    }\n}\n"]}