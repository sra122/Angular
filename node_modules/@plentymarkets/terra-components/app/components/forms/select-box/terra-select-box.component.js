"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var util_1 = require("util");
var string_helper_1 = require("../../../helpers/string.helper");
var TerraSelectBoxComponent = /** @class */ (function () {
    /**
     *
     * @param elementRef
     */
    function TerraSelectBoxComponent(elementRef) {
        var _this = this;
        this.elementRef = elementRef;
        /**
         * @deprecated
         */
        this.outputValueChanged = new core_1.EventEmitter();
        this.inputSelectedValueChange = new core_1.EventEmitter();
        /**
         *
         * Two way data binding by ngModel
         */
        this.onTouchedCallback = function () { return undefined; };
        this.onChangeCallback = function (_) { return undefined; };
        this.clickListener = function (event) {
            _this.clickedOutside(event);
        };
        this.isInit = false;
        this.inputTooltipPlacement = 'top';
        this.inputIsSmall = false;
        this.inputOpenOnTop = false;
    }
    TerraSelectBoxComponent_1 = TerraSelectBoxComponent;
    Object.defineProperty(TerraSelectBoxComponent.prototype, "inputSelectedValue", {
        get: function () {
            return this.selectedValue.value;
        },
        /**
         * @deprecated
         * @param value
         */
        set: function (value) {
            var _this = this;
            console.warn('inputSelectedValue is deprecated. It will be removed in one of the upcoming releases. Please use ngModel instead.');
            if (!util_1.isNullOrUndefined(value)) {
                this.inputListBoxValues
                    .forEach(function (item) {
                    if (item.value === value) {
                        _this.selectedValue = item;
                    }
                });
                this.inputSelectedValueChange.emit(this.selectedValue.value);
            }
        },
        enumerable: true,
        configurable: true
    });
    TerraSelectBoxComponent.prototype.ngOnInit = function () {
        this.isValid = true;
        this._toggleOpen = false;
        this.hasLabel = !util_1.isNull(this.inputName);
        this.isInit = true;
    };
    /**
     *
     * @param changes
     */
    TerraSelectBoxComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (this.isInit === true
            && changes['inputListBoxValues']
            && changes['inputListBoxValues'].currentValue.length > 0
            && !this.inputListBoxValues.find(function (x) { return _this.selectedValue === x; })) {
            this.select(this.inputListBoxValues[0]);
        }
    };
    TerraSelectBoxComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    TerraSelectBoxComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    TerraSelectBoxComponent.prototype.writeValue = function (value) {
        this.value = value;
    };
    Object.defineProperty(TerraSelectBoxComponent.prototype, "emptyValueSelected", {
        get: function () {
            return util_1.isNullOrUndefined(this.selectedValue) ||
                (string_helper_1.StringHelper.isNullUndefinedOrEmpty(this.selectedValue.caption.toString()) &&
                    string_helper_1.StringHelper.isNullUndefinedOrEmpty(this.selectedValue.icon));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraSelectBoxComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            var _this = this;
            this._value = value;
            if (!util_1.isNullOrUndefined(value)) {
                this.inputListBoxValues
                    .forEach(function (item) {
                    if (item.value === value) {
                        _this.selectedValue = item;
                    }
                });
            }
            else if (!util_1.isNullOrUndefined(this.inputListBoxValues[0])) {
                this.selectedValue = this.inputListBoxValues[0];
                this.onTouchedCallback();
                this.onChangeCallback(this.inputListBoxValues[0].value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraSelectBoxComponent.prototype, "toggleOpen", {
        get: function () {
            return this._toggleOpen;
        },
        set: function (value) {
            if (this._toggleOpen !== value && value === true) {
                document.addEventListener('click', this.clickListener, true);
            }
            else if (this._toggleOpen !== value && value === false) {
                document.removeEventListener('click', this.clickListener);
            }
            this._toggleOpen = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     * @param event
     */
    TerraSelectBoxComponent.prototype.clickedOutside = function (event) {
        if (!this.elementRef.nativeElement.contains(event.target)) {
            this.toggleOpen = false;
        }
    };
    TerraSelectBoxComponent.prototype.onClick = function (evt) {
        evt.stopPropagation(); // prevents the click listener on the document to be fired right after
        this.toggleOpen = !this.toggleOpen;
    };
    /**
     *
     * @param value
     */
    TerraSelectBoxComponent.prototype.select = function (value) {
        if (util_1.isNullOrUndefined(this.selectedValue) || this.selectedValue.value !== value.value) {
            this.onChangeCallback(value.value);
            this.outputValueChanged.emit(value);
        }
        this.selectedValue = value;
        this.onTouchedCallback();
    };
    TerraSelectBoxComponent.prototype.validate = function (formControl) {
        if (formControl.valid) {
            this.isValid = true;
        }
        else {
            if (!this.inputIsDisabled) {
                this.isValid = false;
                // if(this.inputIsRequired && (isNullOrUndefined(this.value) || this.value.length == 0))
                // {
                //    let emptyMessage:string;
                //
                //    if(!this.inputEmptyMessage || this.inputEmptyMessage.length == 0)
                //    {
                //        //// TODO i18n
                //        // emptyMessage = 'Mach eine Eingabe!';
                //
                //    }
                //    else
                //    {
                //        emptyMessage = this.inputEmptyMessage;
                //
                //        this.alert.addAlert({
                //                                 msg:              emptyMessage,
                //                                 closable:         true,
                //                                 type:             'danger',
                //                                 dismissOnTimeout: 0
                //                             });
                //    }
                // }
                // else if(!isNullOrUndefined(this.value) && this.value.length > 0)
                // {
                //    let invalidMessage:string;
                //
                //    if(!this.inputInvalidMessage || this.inputInvalidMessage.length == 0)
                //    {
                //        //// TODO i18n
                //        // invalidMessage = 'Eingabe ung√ºltig!';
                //    }
                //    else
                //    {
                //        invalidMessage = this.inputInvalidMessage;
                //
                //        this.alert.addAlert({
                //                                 msg:              invalidMessage,
                //                                 closable:         true,
                //                                 type:             'danger',
                //                                 dismissOnTimeout: 0
                //                             });
                //    }
                // }
            }
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraSelectBoxComponent.prototype, "inputName", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSelectBoxComponent.prototype, "inputIsRequired", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSelectBoxComponent.prototype, "inputIsDisabled", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSelectBoxComponent.prototype, "inputIsSmall", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraSelectBoxComponent.prototype, "inputOpenOnTop", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraSelectBoxComponent.prototype, "inputTooltipText", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraSelectBoxComponent.prototype, "inputTooltipPlacement", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraSelectBoxComponent.prototype, "inputListBoxValues", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraSelectBoxComponent.prototype, "outputValueChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraSelectBoxComponent.prototype, "inputSelectedValueChange", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], TerraSelectBoxComponent.prototype, "inputSelectedValue", null);
    TerraSelectBoxComponent = TerraSelectBoxComponent_1 = __decorate([
        core_1.Component({
            selector: 'terra-select-box',
            styles: [require('./terra-select-box.component.scss')],
            template: require('./terra-select-box.component.html'),
            providers: [
                {
                    provide: forms_1.NG_VALUE_ACCESSOR,
                    useExisting: core_1.forwardRef(function () { return TerraSelectBoxComponent_1; }),
                    multi: true
                }
            ]
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], TerraSelectBoxComponent);
    return TerraSelectBoxComponent;
    var TerraSelectBoxComponent_1;
}());
exports.TerraSelectBoxComponent = TerraSelectBoxComponent;

//# sourceMappingURL=terra-select-box.component.js.map
