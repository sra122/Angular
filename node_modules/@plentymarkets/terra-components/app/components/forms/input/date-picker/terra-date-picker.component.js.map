{"version":3,"sources":["app/components/forms/input/date-picker/terra-date-picker.component.ts"],"names":[],"mappings":"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","file":"terra-date-picker.component.js","sourcesContent":["import {\n    Component,\n    forwardRef,\n    Input,\n    OnChanges,\n    ViewChild\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    NG_VALUE_ACCESSOR\n} from '@angular/forms';\nimport {\n    IMyDateModel,\n    IMyOptions,\n    MyDatePicker\n} from 'mydatepicker';\nimport moment = require('moment');\nimport {\n    isNullOrUndefined\n} from 'util';\n\nlet nextId:number = 0;\n\n/**\n * @author mfrank\n */\n@Component({\n    selector:  'terra-date-picker',\n    styles:    [\n        require('./terra-date-picker.component.scss'),\n        require('./terra-date-picker.component.glob.scss').toString()\n    ],\n    template:  require('./terra-date-picker.component.html'),\n    providers: [\n        {\n            provide:     NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => TerraDatePickerComponent),\n            multi:       true\n        }\n    ]\n})\nexport class TerraDatePickerComponent implements OnChanges, ControlValueAccessor\n{\n    /**\n     * @description Set the label.\n     */\n    @Input()\n    public inputName:string;\n\n    /**\n     * @description If true, a * indicates that the value is required. Default false.\n     */\n    @Input()\n    public inputIsRequired:boolean;\n\n    /**\n     * @description If false, the input will appear with a red border to indicate that the entered value is not valid. Default true.\n     */\n    @Input()\n    public inputIsValid:boolean;\n\n    /**\n     * @description If true, the input will be disabled. Default false.\n     */\n    @Input()\n    public inputIsDisabled:boolean;\n\n    /**\n     * @description If true, the calendar will be opened on top. Default false.\n     */\n    @Input()\n    public inputOpenCalendarTop:boolean;\n\n    /**\n     * @description Set the date format. Default 'dd.mm.yyyy'.\n     */\n    @Input()\n    public inputDisplayDateFormat:string;\n\n    @ViewChild('viewChildMyDatePicker') public viewChildMyDatePicker:MyDatePicker;\n\n    /**\n     * @description a unique string identifier for the specific input instance.\n     */\n\n    protected currentLocale:string;\n    protected id:string;\n    protected datePickerOptions:IMyOptions;\n\n    private _value:IMyDateModel;\n\n    constructor()\n    {\n        this.inputIsRequired = false;\n        this.inputIsDisabled = false;\n        this.inputIsValid = true;\n        this.inputOpenCalendarTop = false;\n        this.inputDisplayDateFormat = 'dd.mm.yyyy';\n\n        this.currentLocale = localStorage.getItem('plentymarkets_lang_');\n\n        // generate the id of the input instance\n        this.id = `date-picker_#${nextId++}`;\n    }\n\n    public ngOnChanges():void\n    {\n        this.updateDatePickerOptions();\n    }\n\n    public registerOnChange(fn:any):void\n    {\n        this.onChangeCallback = fn;\n    }\n\n    public registerOnTouched(fn:any):void\n    {\n        this.onTouchedCallback = fn;\n    }\n\n    public writeValue(value:any):void\n    {\n        if(!isNullOrUndefined(value) && typeof (value) === 'string' && isNaN(Date.parse(value)) === false)\n        {\n            let newDate:Date = new Date(value);\n\n            this.value = {\n                date:      {\n                    year:  newDate.getFullYear(),\n                    month: newDate.getMonth() + 1,\n                    day:   newDate.getDate()\n                },\n                jsdate:    newDate,\n                formatted: null,\n                epoc:      null\n            };\n        }\n        else\n        {\n            this.clearDate();\n        }\n    }\n\n    public get value():IMyDateModel\n    {\n        return this._value;\n    }\n\n    public set value(value:IMyDateModel)\n    {\n        if(!isNullOrUndefined(value) && typeof(value) === 'object')\n        {\n            this._value = value;\n\n            this.onTouchedCallback();\n            this.onChangeCallback(moment(value.jsdate).format());\n        }\n        else\n        {\n            this._value = null;\n\n            this.onTouchedCallback();\n            this.onChangeCallback(null);\n        }\n    }\n\n    public clearDate():void\n    {\n        this.viewChildMyDatePicker.clearDate();\n    }\n\n    private updateDatePickerOptions():void\n    {\n        this.datePickerOptions = {\n            height:                   'inherit',\n            componentDisabled:        this.inputIsDisabled,\n            openSelectorTopOfInput:   this.inputOpenCalendarTop,\n            showSelectorArrow:        !this.inputOpenCalendarTop,\n            inline:                   false,\n            editableDateField:        true,\n            openSelectorOnInputClick: false,\n            dateFormat:               this.inputDisplayDateFormat,\n        };\n    }\n\n    private onTouchedCallback:() => void = () =>\n    {\n        /* */\n    }\n\n    private onChangeCallback:(_:any) => void = (_) =>\n    {\n        /* */\n    }\n}\n"]}