{"version":3,"sources":["app/components/forms/input/color-picker/color.helper.ts"],"names":[],"mappings":"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","file":"color.helper.js","sourcesContent":["/**\n * Defines RGB-formatted colors.\n * @package modules/helpers\n */\nimport { isUndefined } from 'util';\n\nexport type ColorRGB = { r:number, g:number, b:number };\n\n/**\n * Defines HSL-formatted colors.\n * @package modules/helpers\n */\nexport type ColorHSL = { h:number, s:number, l:number };\n\n/**\n * Handles transformation of colors between hexadecimal representation and RGB and HSL representation.\n * Providers functions to decide if a color is dark enough to read white text on it\n * or light enough to read white text.\n *\n * @package modules/helpers\n */\nexport class Color\n{\n    public static random():Color\n    {\n        let rgb:ColorRGB = {\n            r: Math.floor(Math.random() * 255),\n            g: Math.floor(Math.random() * 255),\n            b: Math.floor(Math.random() * 255)\n        };\n\n        return new Color(rgb);\n    }\n\n    private r:number = 0;\n    private g:number = 0;\n    private b:number = 0;\n\n    /**\n     * Construct a new color instance. Accepts hexadecimal formatted colors as string or colors formatted as RGB or HSL.\n     * @param color string|ColorRGB|ColorHSL\n     */\n    constructor(color?:string | ColorRGB | ColorHSL)\n    {\n        if(color)\n        {\n            if(this.isHEX(color))\n            {\n                this.readHEX(<string> color);\n                return;\n            }\n\n            if(this.isRGB(color))\n            {\n                this.readRGB(<ColorRGB> color);\n                return;\n            }\n\n            if(this.isHSL(color))\n            {\n                this.readHSL(<ColorHSL> color);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Checks if a given color is formatted as a string containing a hexadecimal\n     * representation of a color\n     * @param color string|ColorRGB|ColorHSL The color\n     * @returns boolean\n     */\n    private isHEX(color:string | ColorRGB | ColorHSL):boolean\n    {\n        let hexExp:RegExp = /^#[a-f0-9]{3}$|#[a-f0-9]{6}$/i;\n        return typeof color === 'string' && hexExp.test(color);\n    }\n\n    /**\n     * Checks if a given color is given in a RGB-representation.\n     * @param color string|ColorRGB|ColorHSL The color\n     * @returns boolean\n     */\n    private isRGB(color:string | ColorRGB | ColorHSL):boolean\n    {\n        return !isUndefined((<ColorRGB> color).r);\n    }\n\n    /**\n     * Checks if a given color is given in a HSL-representation.\n     * @param color string|ColorRGB|ColorHSL The color\n     * @returns boolean\n     */\n    private isHSL(color:string | ColorRGB | ColorHSL):boolean\n    {\n        return !isUndefined((<ColorHSL> color).h);\n    }\n\n    /**\n     * Converts a string representation of a color to a RGB representation.\n     * @param color string The hexadecimal representation of a color\n     */\n    private readHEX(color:string):void\n    {\n        color = color.replace('#', '');\n        if(color.length === 3)\n        {\n            color += color;\n        }\n\n        this.r = parseInt(color.substr(0, 2), 16);\n        this.g = parseInt(color.substr(2, 2), 16);\n        this.b = parseInt(color.substr(4, 2), 16);\n    }\n\n    /**\n     * Read a color formatted as RGB. No transformation required because colors are stored as RGB internally.\n     * @param color ColorRGB The color formatted as RGB.\n     */\n    private readRGB(color:ColorRGB):void\n    {\n        this.r = color.r;\n        this.g = color.g;\n        this.b = color.b;\n    }\n\n    /**\n     * Read a color formatted as HSL.\n     * @param color ColorHSL The color formatted as HSL\n     */\n    private readHSL(color:ColorHSL):void\n    {\n        let r:number = color.l;\n        let g:number = color.l;\n        let b:number = color.l;\n\n        if(color.s !== 0)\n        {\n            let q:number;\n            if(color.l < 0.5)\n            {\n                q = color.l * (1 + color.s);\n            }\n            else\n            {\n                q = color.l + color.s - color.l * color.s;\n            }\n\n            let p:number = 2 * color.l - q;\n\n            r = this.hue2rgb(p, q, color.h + (1 / 3));\n            g = this.hue2rgb(p, q, color.h);\n            b = this.hue2rgb(p, q, color.h - (1 / 3));\n        }\n\n        this.r = Math.round(r * 255);\n        this.g = Math.round(g * 255);\n        this.b = Math.round(b * 255);\n    }\n\n    private hue2rgb(p:number, q:number, t:number):number\n    {\n        if(t < 0)\n        {\n            t += 1;\n        }\n        if(t > 1)\n        {\n            t -= 1;\n        }\n        if(t < (1 / 6))\n        {\n            return p + (q - p) * 6 * t;\n        }\n        if(t < (1 / 2))\n        {\n            return q;\n        }\n        if(t < (2 / 3))\n        {\n            return p + (q - p) * ((2 / 3) - t) * 6;\n        }\n        return p;\n    }\n\n    /**\n     * Converts this color to a hexadecimal string.\n     * @returns string\n     */\n    public toHEX():string\n    {\n        return '#' +\n               ((this.r < 16) ? '0' : '') + this.r.toString(16) +\n               ((this.g < 16) ? '0' : '') + this.g.toString(16) +\n               ((this.b < 16) ? '0' : '') + this.b.toString(16);\n    }\n\n    /**\n     * Converts this color to a RGB formatted representation.\n     * @returns ColorRGB\n     */\n    public toRGB():ColorRGB\n    {\n        return {\n            r: this.r,\n            g: this.g,\n            b: this.b\n        };\n    }\n\n    /**\n     * Converts this color to a HSL formatted representation.\n     * @returns ColorHSL\n     */\n    public toHSL():ColorHSL\n    {\n        let r:number = this.r / 255;\n        let g:number = this.g / 255;\n        let b:number = this.b / 255;\n        let max:number = Math.max(r, g, b);\n        let min:number = Math.min(r, g, b);\n\n        let h:number = (max + min) / 2;\n        let s:number = (max + min) / 2;\n        let l:number = (max + min) / 2;\n\n        if(max === min)\n        {\n            h = 0;\n            s = 0;\n        }\n        else\n        {\n            let diff:number = max - min;\n            if(l > 0.5)\n            {\n                s = diff / (2 - max - min);\n            }\n            else\n            {\n                s = diff / (max + min);\n            }\n\n            switch(max)\n            {\n                case r:\n                    h = (g - b) / diff + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / diff + 2;\n                    break;\n                case b:\n                    h = (r - g) / diff + 4;\n                    break;\n                default:\n                    throw new Error('This should never be reached!');\n            }\n\n            h = h / 6;\n        }\n\n        return {\n            h,\n            s,\n            l\n        };\n    }\n\n    /**\n     * Calculate the grayscale of this color.\n     * @returns number\n     */\n    public getGrayscale():number\n    {\n        return (this.r * 0.299) + (this.g * 0.587) + (this.b * 0.114);\n    }\n\n    /**\n     * Decide if this color is dark enough so white text could be read.\n     * @returns boolean\n     */\n    public isDark():boolean\n    {\n        return this.getGrayscale() < 186;\n    }\n\n    /**\n     * Decide if this color is light enough so black text could be read.\n     * @returns boolean\n     */\n    public isLight():boolean\n    {\n        return this.getGrayscale() >= 186;\n    }\n}\n"]}