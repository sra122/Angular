export declare type ColorRGB = {
    r: number;
    g: number;
    b: number;
};
/**
 * Defines HSL-formatted colors.
 * @package modules/helpers
 */
export declare type ColorHSL = {
    h: number;
    s: number;
    l: number;
};
/**
 * Handles transformation of colors between hexadecimal representation and RGB and HSL representation.
 * Providers functions to decide if a color is dark enough to read white text on it
 * or light enough to read white text.
 *
 * @package modules/helpers
 */
export declare class Color {
    static random(): Color;
    private r;
    private g;
    private b;
    /**
     * Construct a new color instance. Accepts hexadecimal formatted colors as string or colors formatted as RGB or HSL.
     * @param color string|ColorRGB|ColorHSL
     */
    constructor(color?: string | ColorRGB | ColorHSL);
    /**
     * Checks if a given color is formatted as a string containing a hexadecimal
     * representation of a color
     * @param color string|ColorRGB|ColorHSL The color
     * @returns boolean
     */
    private isHEX(color);
    /**
     * Checks if a given color is given in a RGB-representation.
     * @param color string|ColorRGB|ColorHSL The color
     * @returns boolean
     */
    private isRGB(color);
    /**
     * Checks if a given color is given in a HSL-representation.
     * @param color string|ColorRGB|ColorHSL The color
     * @returns boolean
     */
    private isHSL(color);
    /**
     * Converts a string representation of a color to a RGB representation.
     * @param color string The hexadecimal representation of a color
     */
    private readHEX(color);
    /**
     * Read a color formatted as RGB. No transformation required because colors are stored as RGB internally.
     * @param color ColorRGB The color formatted as RGB.
     */
    private readRGB(color);
    /**
     * Read a color formatted as HSL.
     * @param color ColorHSL The color formatted as HSL
     */
    private readHSL(color);
    private hue2rgb(p, q, t);
    /**
     * Converts this color to a hexadecimal string.
     * @returns string
     */
    toHEX(): string;
    /**
     * Converts this color to a RGB formatted representation.
     * @returns ColorRGB
     */
    toRGB(): ColorRGB;
    /**
     * Converts this color to a HSL formatted representation.
     * @returns ColorHSL
     */
    toHSL(): ColorHSL;
    /**
     * Calculate the grayscale of this color.
     * @returns number
     */
    getGrayscale(): number;
    /**
     * Decide if this color is dark enough so white text could be read.
     * @returns boolean
     */
    isDark(): boolean;
    /**
     * Decide if this color is light enough so black text could be read.
     * @returns boolean
     */
    isLight(): boolean;
}
