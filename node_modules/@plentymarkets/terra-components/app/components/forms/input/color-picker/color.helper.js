"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Defines RGB-formatted colors.
 * @package modules/helpers
 */
var util_1 = require("util");
/**
 * Handles transformation of colors between hexadecimal representation and RGB and HSL representation.
 * Providers functions to decide if a color is dark enough to read white text on it
 * or light enough to read white text.
 *
 * @package modules/helpers
 */
var Color = /** @class */ (function () {
    /**
     * Construct a new color instance. Accepts hexadecimal formatted colors as string or colors formatted as RGB or HSL.
     * @param color string|ColorRGB|ColorHSL
     */
    function Color(color) {
        this.r = 0;
        this.g = 0;
        this.b = 0;
        if (color) {
            if (this.isHEX(color)) {
                this.readHEX(color);
                return;
            }
            if (this.isRGB(color)) {
                this.readRGB(color);
                return;
            }
            if (this.isHSL(color)) {
                this.readHSL(color);
                return;
            }
        }
    }
    Color.random = function () {
        var rgb = {
            r: Math.floor(Math.random() * 255),
            g: Math.floor(Math.random() * 255),
            b: Math.floor(Math.random() * 255)
        };
        return new Color(rgb);
    };
    /**
     * Checks if a given color is formatted as a string containing a hexadecimal
     * representation of a color
     * @param color string|ColorRGB|ColorHSL The color
     * @returns boolean
     */
    Color.prototype.isHEX = function (color) {
        var hexExp = /^#[a-f0-9]{3}$|#[a-f0-9]{6}$/i;
        return typeof color === 'string' && hexExp.test(color);
    };
    /**
     * Checks if a given color is given in a RGB-representation.
     * @param color string|ColorRGB|ColorHSL The color
     * @returns boolean
     */
    Color.prototype.isRGB = function (color) {
        return !util_1.isUndefined(color.r);
    };
    /**
     * Checks if a given color is given in a HSL-representation.
     * @param color string|ColorRGB|ColorHSL The color
     * @returns boolean
     */
    Color.prototype.isHSL = function (color) {
        return !util_1.isUndefined(color.h);
    };
    /**
     * Converts a string representation of a color to a RGB representation.
     * @param color string The hexadecimal representation of a color
     */
    Color.prototype.readHEX = function (color) {
        color = color.replace('#', '');
        if (color.length === 3) {
            color += color;
        }
        this.r = parseInt(color.substr(0, 2), 16);
        this.g = parseInt(color.substr(2, 2), 16);
        this.b = parseInt(color.substr(4, 2), 16);
    };
    /**
     * Read a color formatted as RGB. No transformation required because colors are stored as RGB internally.
     * @param color ColorRGB The color formatted as RGB.
     */
    Color.prototype.readRGB = function (color) {
        this.r = color.r;
        this.g = color.g;
        this.b = color.b;
    };
    /**
     * Read a color formatted as HSL.
     * @param color ColorHSL The color formatted as HSL
     */
    Color.prototype.readHSL = function (color) {
        var r = color.l;
        var g = color.l;
        var b = color.l;
        if (color.s !== 0) {
            var q = void 0;
            if (color.l < 0.5) {
                q = color.l * (1 + color.s);
            }
            else {
                q = color.l + color.s - color.l * color.s;
            }
            var p = 2 * color.l - q;
            r = this.hue2rgb(p, q, color.h + (1 / 3));
            g = this.hue2rgb(p, q, color.h);
            b = this.hue2rgb(p, q, color.h - (1 / 3));
        }
        this.r = Math.round(r * 255);
        this.g = Math.round(g * 255);
        this.b = Math.round(b * 255);
    };
    Color.prototype.hue2rgb = function (p, q, t) {
        if (t < 0) {
            t += 1;
        }
        if (t > 1) {
            t -= 1;
        }
        if (t < (1 / 6)) {
            return p + (q - p) * 6 * t;
        }
        if (t < (1 / 2)) {
            return q;
        }
        if (t < (2 / 3)) {
            return p + (q - p) * ((2 / 3) - t) * 6;
        }
        return p;
    };
    /**
     * Converts this color to a hexadecimal string.
     * @returns string
     */
    Color.prototype.toHEX = function () {
        return '#' +
            ((this.r < 16) ? '0' : '') + this.r.toString(16) +
            ((this.g < 16) ? '0' : '') + this.g.toString(16) +
            ((this.b < 16) ? '0' : '') + this.b.toString(16);
    };
    /**
     * Converts this color to a RGB formatted representation.
     * @returns ColorRGB
     */
    Color.prototype.toRGB = function () {
        return {
            r: this.r,
            g: this.g,
            b: this.b
        };
    };
    /**
     * Converts this color to a HSL formatted representation.
     * @returns ColorHSL
     */
    Color.prototype.toHSL = function () {
        var r = this.r / 255;
        var g = this.g / 255;
        var b = this.b / 255;
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h = (max + min) / 2;
        var s = (max + min) / 2;
        var l = (max + min) / 2;
        if (max === min) {
            h = 0;
            s = 0;
        }
        else {
            var diff = max - min;
            if (l > 0.5) {
                s = diff / (2 - max - min);
            }
            else {
                s = diff / (max + min);
            }
            switch (max) {
                case r:
                    h = (g - b) / diff + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / diff + 2;
                    break;
                case b:
                    h = (r - g) / diff + 4;
                    break;
                default:
                    throw new Error('This should never be reached!');
            }
            h = h / 6;
        }
        return {
            h: h,
            s: s,
            l: l
        };
    };
    /**
     * Calculate the grayscale of this color.
     * @returns number
     */
    Color.prototype.getGrayscale = function () {
        return (this.r * 0.299) + (this.g * 0.587) + (this.b * 0.114);
    };
    /**
     * Decide if this color is dark enough so white text could be read.
     * @returns boolean
     */
    Color.prototype.isDark = function () {
        return this.getGrayscale() < 186;
    };
    /**
     * Decide if this color is light enough so black text could be read.
     * @returns boolean
     */
    Color.prototype.isLight = function () {
        return this.getGrayscale() >= 186;
    };
    return Color;
}());
exports.Color = Color;

//# sourceMappingURL=color.helper.js.map
