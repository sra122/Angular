"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Interact = require("interactjs");
var TerraDropzoneDirective = /** @class */ (function () {
    function TerraDropzoneDirective(el) {
        this.el = el;
        this.accept = '';
        this.overlap = 'pointer';
        this.disabled = false;
        this.onDropActivate = new core_1.EventEmitter();
        this.onDropDeactivate = new core_1.EventEmitter();
        this.onDragEnter = new core_1.EventEmitter();
        this.onDragLeave = new core_1.EventEmitter();
        this.onDropMove = new core_1.EventEmitter();
        this.onDrop = new core_1.EventEmitter();
        this.interactable = null;
        this.init();
    }
    TerraDropzoneDirective.prototype.ngOnChanges = function (changes) {
        this.init();
    };
    TerraDropzoneDirective.prototype.init = function () {
        var _this = this;
        var createDropEvent = function (event) {
            event.dropData = event.relatedTarget.IA_DRAG_DATA;
            return event;
        };
        var config = {
            enabled: !this.disabled,
            ondropactivate: function (event) {
                _this.onDropActivate.emit(createDropEvent(event));
            },
            ondropdeactivate: function (event) {
                _this.onDropDeactivate.emit(createDropEvent(event));
            },
            ondragenter: function (event) {
                _this.onDragEnter.emit(createDropEvent(event));
            },
            ondragleave: function (event) {
                _this.onDragLeave.emit(createDropEvent(event));
            },
            ondropmove: function (event) {
                _this.onDropMove.emit(createDropEvent(event));
            },
            ondrop: function (event) {
                _this.onDrop.emit(createDropEvent(event));
            }
        };
        if (typeof this.overlap === 'string'
            && parseFloat(this.overlap) >= 0
            && parseFloat(this.overlap) <= 1) {
            config.overlap = parseFloat(this.overlap);
        }
        else {
            config.overlap = this.overlap;
        }
        if (typeof this.accept === 'string' && this.accept.length > 0) {
            config.accept = this.accept;
        }
        else if (this.accept instanceof Function) {
            config.checker = function (interactEvent, event, isDropable, dropzone, dropElement, draggable, dragElement) {
                if (isDropable) {
                    return _this.accept({
                        interactEvent: interactEvent,
                        event: event,
                        isDropable: isDropable,
                        dropzone: dropzone,
                        dropzoneElement: dropElement,
                        draggable: draggable,
                        draggableElement: dragElement,
                        dragData: interactEvent.target.IA_DRAG_DATA
                    });
                }
                return false;
            };
        }
        if (!this.interactable) {
            this.interactable = Interact(this.el.nativeElement);
        }
        this.interactable.dropzone(config);
    };
    __decorate([
        core_1.Input('terra-dropzone-accept'),
        __metadata("design:type", Object)
    ], TerraDropzoneDirective.prototype, "accept", void 0);
    __decorate([
        core_1.Input('terra-dropzone-overlap'),
        __metadata("design:type", Object)
    ], TerraDropzoneDirective.prototype, "overlap", void 0);
    __decorate([
        core_1.Input('terra-dropzone-disabled'),
        __metadata("design:type", Boolean)
    ], TerraDropzoneDirective.prototype, "disabled", void 0);
    __decorate([
        core_1.Output('terra-dropzone-onDropActivate'),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraDropzoneDirective.prototype, "onDropActivate", void 0);
    __decorate([
        core_1.Output('terra-dropzone-onDropDeactivate'),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraDropzoneDirective.prototype, "onDropDeactivate", void 0);
    __decorate([
        core_1.Output('terra-dropzone-onDragEnter'),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraDropzoneDirective.prototype, "onDragEnter", void 0);
    __decorate([
        core_1.Output('terra-dropzone-onDragLeave'),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraDropzoneDirective.prototype, "onDragLeave", void 0);
    __decorate([
        core_1.Output('terra-dropzone-onDropMove'),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraDropzoneDirective.prototype, "onDropMove", void 0);
    __decorate([
        core_1.Output('terra-dropzone-onDrop'),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraDropzoneDirective.prototype, "onDrop", void 0);
    TerraDropzoneDirective = __decorate([
        core_1.Directive({
            selector: '[terraDropzone]'
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], TerraDropzoneDirective);
    return TerraDropzoneDirective;
}());
exports.TerraDropzoneDirective = TerraDropzoneDirective;

//# sourceMappingURL=dropzone.directive.js.map
