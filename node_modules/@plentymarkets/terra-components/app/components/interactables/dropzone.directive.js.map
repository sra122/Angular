{"version":3,"sources":["app/components/interactables/dropzone.directive.ts"],"names":[],"mappings":"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","file":"dropzone.directive.js","sourcesContent":["import {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport * as Interact from 'interactjs';\nimport { DropEvent } from './dropEvent.interface';\n\nexport type AcceptFn = (args:{\n    interactEvent:Interact.InteractEvent,\n    event:MouseEvent,\n    isDropable:boolean,\n    dropzone:Interact.Interactable,\n    dropzoneElement:HTMLElement,\n    draggable:Interact.Interactable,\n    draggableElement:HTMLElement,\n    dragData:any\n}) => boolean;\n\n@Directive({\n    selector: '[terraDropzone]'\n})\nexport class TerraDropzoneDirective implements OnChanges\n{\n    @Input('terra-dropzone-accept')\n    public accept:AcceptFn | string = '';\n\n    @Input('terra-dropzone-overlap')\n    public overlap:'pointer' | 'center' | number = 'pointer';\n\n    @Input('terra-dropzone-disabled')\n    public disabled:boolean = false;\n\n    @Output('terra-dropzone-onDropActivate')\n    public onDropActivate:EventEmitter<DropEvent> = new EventEmitter<DropEvent>();\n\n    @Output('terra-dropzone-onDropDeactivate')\n    public onDropDeactivate:EventEmitter<DropEvent> = new EventEmitter<DropEvent>();\n\n    @Output('terra-dropzone-onDragEnter')\n    public onDragEnter:EventEmitter<DropEvent> = new EventEmitter<DropEvent>();\n\n    @Output('terra-dropzone-onDragLeave')\n    public onDragLeave:EventEmitter<DropEvent> = new EventEmitter<DropEvent>();\n\n    @Output('terra-dropzone-onDropMove')\n    public onDropMove:EventEmitter<DropEvent> = new EventEmitter<DropEvent>();\n\n    @Output('terra-dropzone-onDrop')\n    public onDrop:EventEmitter<DropEvent> = new EventEmitter<DropEvent>();\n\n    private interactable:Interact.Interactable = null;\n\n    constructor(private el:ElementRef)\n    {\n        this.init();\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        this.init();\n    }\n\n    private init():void\n    {\n        let createDropEvent:any = (event:DropEvent):DropEvent =>\n        {\n            event.dropData = (<any> event.relatedTarget).IA_DRAG_DATA;\n            return event;\n        };\n\n        let config:any = {\n            enabled:          !this.disabled,\n            ondropactivate:   (event:DropEvent):void =>\n                              {\n                                  this.onDropActivate.emit(\n                                      createDropEvent(event)\n                                  );\n                              },\n            ondropdeactivate: (event:DropEvent):void =>\n                              {\n                                  this.onDropDeactivate.emit(\n                                      createDropEvent(event)\n                                  );\n                              },\n            ondragenter:      (event:DropEvent):void =>\n                              {\n                                  this.onDragEnter.emit(\n                                      createDropEvent(event)\n                                  );\n                              },\n            ondragleave:      (event:DropEvent):void =>\n                              {\n                                  this.onDragLeave.emit(\n                                      createDropEvent(event)\n                                  );\n                              },\n            ondropmove:       (event:DropEvent):void =>\n                              {\n                                  this.onDropMove.emit(\n                                      createDropEvent(event)\n                                  );\n                              },\n            ondrop:           (event:DropEvent):void =>\n                              {\n                                  this.onDrop.emit(\n                                      createDropEvent(event)\n                                  );\n                              }\n\n        };\n\n        if(typeof this.overlap === 'string'\n           && parseFloat(this.overlap) >= 0\n           && parseFloat(this.overlap) <= 1)\n        {\n            config.overlap = parseFloat(this.overlap);\n        }\n        else\n        {\n            config.overlap = this.overlap;\n        }\n\n        if(typeof this.accept === 'string' && this.accept.length > 0)\n        {\n            config.accept = this.accept;\n        }\n        else if(this.accept instanceof Function)\n        {\n            config.checker = (interactEvent:Interact.InteractEvent,\n                              event:MouseEvent,\n                              isDropable:boolean,\n                              dropzone:Interact.Interactable,\n                              dropElement:HTMLElement,\n                              draggable:Interact.Interactable,\n                              dragElement:HTMLElement):boolean|AcceptFn =>\n            {\n                if(isDropable)\n                {\n                    return (this.accept as AcceptFn)({\n                        interactEvent:    interactEvent,\n                        event:            event,\n                        isDropable:       isDropable,\n                        dropzone:         dropzone,\n                        dropzoneElement:  dropElement,\n                        draggable:        draggable,\n                        draggableElement: dragElement,\n                        dragData:         interactEvent.target.IA_DRAG_DATA\n                    });\n                }\n\n                return false;\n            };\n        }\n\n        if(!this.interactable)\n        {\n            this.interactable = Interact(this.el.nativeElement);\n        }\n        this.interactable.dropzone(config);\n    }\n}\n"]}