"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var interact = require("interactjs");
var TerraResizableDirective = /** @class */ (function () {
    function TerraResizableDirective(el) {
        this.el = el;
        this.options = null;
        this.disabled = false;
        this.grid = false;
        this.restrict = null;
        this.inertia = false;
        this.onStart = new core_1.EventEmitter();
        this.onMove = new core_1.EventEmitter();
        this.onEnd = new core_1.EventEmitter();
        this.init();
    }
    TerraResizableDirective.prototype.ngOnChanges = function (changes) {
        var _this = this;
        Object.keys(changes).forEach(function (changedProperty) {
            if (typeof changes[changedProperty].currentValue === 'object') {
                _this.prepareImmutableInput(changedProperty);
            }
        });
        this.init();
    };
    TerraResizableDirective.prototype.prepareImmutableInput = function (input) {
        var _this = this;
        if (this[input] && typeof this[input] === 'object') {
            Object.keys(this[input])
                .filter(function (property) {
                return _this[input].propertyIsEnumerable(property);
            })
                .forEach(function (property) {
                // this[input]["_" + property] = this[input][property];
                Object.defineProperty(_this[input], '_' + property, {
                    configurable: false,
                    enumerable: false,
                    writable: true,
                    value: _this[input][property]
                });
                Object.defineProperty(_this[input], property, {
                    configurable: true,
                    enumerable: true,
                    get: function () {
                        return _this[input]['_' + property];
                    },
                    set: function (value) {
                        _this[input]['_' + property] = value;
                        _this.init();
                    }
                });
            });
        }
    };
    TerraResizableDirective.prototype.init = function () {
        var _this = this;
        var resizableConfig = {
            edges: this.options.edges,
            invert: this.options.invert || 'none',
            squareResize: !!this.options.squareResize,
            preserveAspectRatio: !!this.options.preserveAspectRatio,
            inertia: this.inertia,
            enabled: !this.disabled,
            onstart: function (event) {
                _this.onStart.emit(event);
            },
            onmove: function (event) {
                _this.onMove.emit(event);
            },
            onend: function (event) {
                _this.onEnd.emit(event);
            },
        };
        if (this.grid) {
            resizableConfig.snap = {
                targets: [
                    function (x, y) {
                        return _this.handleSnap(x, y);
                    }
                ],
                endOnly: this.grid && this.grid.endOnly,
                relativePoints: this.grid.relativePoints
            };
        }
        if (this.restrict) {
            resizableConfig.restrict = this.restrict;
        }
        if (!this.interactable) {
            this.interactable = interact(this.el.nativeElement);
        }
        this.interactable.resizable(resizableConfig);
    };
    TerraResizableDirective.prototype.handleSnap = function (x, y) {
        if (this.grid) {
            var offset = {
                x: 0,
                y: 0
            };
            if (this.grid.offset) {
                offset = this.grid.offset;
            }
            return {
                x: Math.round((x - offset.x) / this.grid.x) * this.grid.x,
                y: Math.round((y - offset.y) / this.grid.y) * this.grid.y,
                range: (this.grid.range || Infinity)
            };
        }
        else {
            // Snap is disabled
            return {
                x: x,
                y: y,
                range: 0
            };
        }
    };
    __decorate([
        core_1.Input('terra-resizable'),
        __metadata("design:type", Object)
    ], TerraResizableDirective.prototype, "options", void 0);
    __decorate([
        core_1.Input('terra-resizable-disabled'),
        __metadata("design:type", Boolean)
    ], TerraResizableDirective.prototype, "disabled", void 0);
    __decorate([
        core_1.Input('terra-resizable-grid'),
        __metadata("design:type", Object)
    ], TerraResizableDirective.prototype, "grid", void 0);
    __decorate([
        core_1.Input('terra-resizable-restrict'),
        __metadata("design:type", Object)
    ], TerraResizableDirective.prototype, "restrict", void 0);
    __decorate([
        core_1.Input('terra-resizable-inertia'),
        __metadata("design:type", Object)
    ], TerraResizableDirective.prototype, "inertia", void 0);
    __decorate([
        core_1.Output('terra-resizable-onStart'),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraResizableDirective.prototype, "onStart", void 0);
    __decorate([
        core_1.Output('terra-resizable-onMove'),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraResizableDirective.prototype, "onMove", void 0);
    __decorate([
        core_1.Output('terra-resizable-onEnd'),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraResizableDirective.prototype, "onEnd", void 0);
    TerraResizableDirective = __decorate([
        core_1.Directive({
            selector: '[terraResizable]'
        }),
        __metadata("design:paramtypes", [core_1.ElementRef])
    ], TerraResizableDirective);
    return TerraResizableDirective;
}());
exports.TerraResizableDirective = TerraResizableDirective;

//# sourceMappingURL=resizable.directive.js.map
