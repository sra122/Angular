{"version":3,"sources":["app/components/tables/data-table/terra-data-table.component.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAQuB;AAIvB,sHAAgH;AAEhH,6BAIc;AACd,4EAGyC;AAEzC,kDAM6B;AAI7B,0FAAuF;AAGvF,2EAAwE;AA2BxE;IAkEI;QApCO,4BAAuB,GAAW,KAAK,CAAC;QAGxC,8CAAyC,GAAW,IAAI,CAAC;QAGzD,wBAAmB,GAAqC,IAAI,mBAAY,EAAuB,CAAC;QAGhG,6BAAwB,GAA+C,IAAI,mBAAY,EAAE,CAAC;QAG1F,4CAAuC,GAAsD,IAAI,mBAAY,EAAE,CAAC;QAOhH,qBAAgB,GAAU,2CAAgB,CAAC;QAExC,4BAAuB,GAAW,KAAK,CAAC;QAExC,UAAK,GAAuB,2CAAmB,CAAC,WAAW,EAAE,CAAC;QAC9D,eAAU,GAAU,gBAAgB,CAAC;QAc3C,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAC1B,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;QAC/B,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;QACpC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;QAE1B,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,sBAAW,4CAAO;aAAlB;YAEI,OAAO,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;aAED,UAAmB,KAA0C;YAEzD,yBAAyB;YACzB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;YAE3B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QAC1B,CAAC;;;OARA;IAUD,sBAAY,sDAAiB;aAA7B;YAEI,IAAG,IAAI,CAAC,uBAAuB,EAC/B;gBACI,OAAO,WAAW,CAAC;aACtB;iBAED;gBACI,OAAO,QAAQ,CAAC;aACnB;QACL,CAAC;;;OAAA;IAEM,6CAAW,GAAlB,UAAmB,OAAqB;QAEpC,IAAG,OAAO,CAAC,eAAe,CAAC,EAC3B;YACI,OAAO,CAAC,IAAI,CACR,yHAAyH,CAAC,CAAC;YAC/H,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,YAAY,CAAC;SACnE;IACL,CAAC;IAEM,wDAAsB,GAA7B,UAA8B,SAAiB;QAA/C,iBAWC;QATG,IAAI,CAAC,uBAAuB,GAAG,SAAS,CAAC;QAEzC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAiC;YAEpD,IAAG,CAAC,GAAG,CAAC,QAAQ,EAChB;gBACI,KAAI,CAAC,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;aACvC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,qDAAmB,GAA1B,UAA2B,SAAiB,EAAE,GAAiC;QAE3E,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QACpC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAExC,IAAG,IAAI,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,EACpC;YACI,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;SACxC;aACI,IAAG,IAAI,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,IAAI,CAAC,eAAe,CAAC,MAAM,EAC/F;YACI,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;SACvC;aAED;YACI,IAAI,CAAC,uBAAuB,CAAC,eAAe,GAAG,IAAI,CAAC;SACvD;IACL,CAAC;IAEM,uDAAqB,GAA5B,UAA6B,SAAgB;QAEzC,IAAG,CAAC,wBAAiB,CAAC,SAAS,CAAC,IAAI,SAAS,KAAK,EAAE,EACpD;YACI,OAAO,SAAS,CAAC;SACpB;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAEM,4CAAU,GAAjB,UAAkB,IAAgC,EAAE,UAAwC;QAExF,IAAG,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,QAAQ,EAC3C;YACI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAiC;gBAEpD,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC;YACzB,CAAC,CAAC,CAAC;YAEH,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC3B,UAAU,CAAC,aAAa,EAAE,CAAC;SAC9B;IACL,CAAC;IAEM,iDAAe,GAAtB,UAAuB,IAAQ;QAE3B,mBAAmB,GAAO;YAEtB,OAAO,GAAG;mBACA,GAAG,CAAC,IAAI,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ;mBACxC,GAAG,CAAC,KAAK,IAAI,OAAO,GAAG,CAAC,KAAK,KAAK,QAAQ,CAAC;QACzD,CAAC;QAED,oBAAoB,GAAO;YAEvB,OAAO,GAAG,IAAI,GAAG,CAAC,OAAO,IAAI,OAAO,GAAG,CAAC,OAAO,KAAK,QAAQ,CAAC;QACjE,CAAC;QAED,oBAAoB,GAAO;YAEvB,0BAA0B;YAC1B,IAAG,CAAC,cAAO,CAAC,GAAG,CAAC,EAChB;gBACI,OAAO,KAAK,CAAC;aAChB;YAED,mEAAmE;YACnE,IAAI,mBAAmB,GAAW,IAAI,CAAC;YACvC,GAAG,CAAC,OAAO,CAAC,UAAC,IAAQ;gBAEjB,mBAAmB,GAAG,mBAAmB,IAAI,IAAI,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC;YAC9F,CAAC,CAAC,CAAC;YAEH,OAAO,GAAG,IAAI,mBAAmB,CAAC;QACtC,CAAC;QAED,uBAAuB,GAAO;YAE1B,0BAA0B;YAC1B,IAAG,CAAC,cAAO,CAAC,GAAG,CAAC,EAChB;gBACI,OAAO,KAAK,CAAC;aAChB;YAED,sEAAsE;YACtE,IAAI,mBAAmB,GAAW,IAAI,CAAC;YACvC,GAAG,CAAC,OAAO,CAAC,UAAC,IAAQ;gBAEjB,mBAAmB,GAAG,mBAAmB,IAAI,IAAI,CAAC,aAAa,IAAI,OAAO,IAAI,CAAC,aAAa,KAAK,UAAU,CAAC;YAChH,CAAC,CAAC,CAAC;YAEH,OAAO,GAAG,IAAI,mBAAmB,CAAC;QACtC,CAAC;QAED,IAAG,OAAO,IAAI,KAAK,QAAQ,EAC3B;YACI,IAAG,SAAS,CAAC,IAAI,CAAC,EAClB;gBACI,OAAO,uBAAuB,CAAC;aAClC;iBACI,IAAG,UAAU,CAAC,IAAI,CAAC,EACxB;gBACI,OAAO,6BAA6B,CAAC;aACxC;iBACI,IAAG,UAAU,CAAC,IAAI,CAAC,EACxB;gBACI,OAAO,MAAM,CAAC;aACjB;iBACI,IAAG,aAAa,CAAC,IAAI,CAAC,EAC3B;gBACI,OAAO,SAAS,CAAC;aACpB;SACJ;QACD,OAAO,OAAO,IAAI,CAAC;IACvB,CAAC;IAEM,qEAAmC,GAA1C,UAA2C,KAAW;QAElD,IAAI,CAAC,uCAAuC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC7E,CAAC;IAEO,gDAAc,GAAtB,UAAuB,SAAiB,EAAE,WAAyC;QAE/E,WAAW,CAAC,QAAQ,GAAG,SAAS,CAAC;QAEjC,IAAI,QAAQ,GAAW,KAAK,CAAC;QAE7B,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,GAAiC;YAE3D,IAAG,GAAG,KAAK,WAAW,EACtB;gBACI,QAAQ,GAAG,IAAI,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;QAEH,IAAG,WAAW,CAAC,QAAQ,EACvB;YACI,IAAG,CAAC,QAAQ,EACZ;gBACI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAC1C;SACJ;aAED;YACI,IAAI,KAAK,GAAU,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAE7D,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACzC;IACL,CAAC;IAEM,2CAAS,GAAhB,UAAiB,WAAyC;QAEtD,IAAI,KAAK,GAAU,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAEtD,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAE/B,IAAI,aAAa,GAAU,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;QAErE,yCAAyC;QACzC,IAAG,CAAC,aAAM,CAAC,aAAa,CAAC,EACzB;YACI,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;SACjD;IACL,CAAC;IAED,sBAAW,oDAAe;aAA1B;YAEI,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;;;OAAA;IAEM,0CAAQ,GAAf,UAAgB,SAA6B;QAA7C,iBAaC;QAXG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAEzC,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;QAErC,IAAG,CAAC,wBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,EACpC;YACI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,GAAiC;gBAEpD,KAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAEM,0CAAQ,GAAf,UAAgB,QAAsB;QAAtC,iBA2BC;QAzBG,IAAG,wBAAiB,CAAC,QAAQ,CAAC,EAC9B;YACI,OAAO;SACV;QAED,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,QAAQ,CAAC,SAAS,CACd,UAAC,GAAK;YAEF,KAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;YAC3B,KAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC,EACD,UAAC,KAAS;YAEN,IAAG,KAAK,CAAC,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAC/C;gBACI,OAAO;gBACP,uBAAuB;aAC1B;QACL,CAAC,EACD;YAEI,KAAI,CAAC,cAAc,GAAG,KAAK,CAAC;QAChC,CAAC,CACJ,CAAC;IACN,CAAC;IAES,8CAAY,GAAtB,UAAuB,IAAsC;QAEzD,IAAG,CAAC,wBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,EACrC;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;SACzB;aAED;YACI,OAAO,MAAM,CAAC;SACjB;IACL,CAAC;IAzVD;QADC,gBAAS,CAAC,yBAAyB,CAAC;kCACN,iDAAsB;4EAAC;IAGtD;QADC,YAAK,EAAE;;iEACc;IAGtB;QADC,YAAK,EAAE;;kEACoB;IAG5B;QADC,YAAK,EAAE;;uEAC0B;IAGlC;QADC,YAAK,EAAE;;kEACqB;IAG7B;QADC,YAAK,EAAE;;2EAC8B;IAGtC;QADC,YAAK,EAAE;;6EAC+B;IAGvC;QADC,YAAK,EAAE;;+EACiC;IAGzC;QADC,YAAK,EAAE;kCACoB,KAAK;yEAAuB;IAGxD;QADC,YAAK,EAAE;;4EACuC;IAG/C;QADC,YAAK,EAAE;;8FACwD;IAGhE;QADC,aAAM,EAAE;kCACkB,mBAAY;wEAAgE;IAGvG;QADC,aAAM,EAAE;kCACuB,mBAAY;6EAAqD;IAGjG;QADC,aAAM,EAAE;kCACsC,mBAAY;4FAA4D;IAsBvH;QADC,YAAK,EAAE;;kEACsB;IAhErB,uBAAuB;QAxBnC,gBAAS,CAAC;YACP,QAAQ,EAAI,kBAAkB;YAC9B,QAAQ,EAAI,OAAO,CAAC,mCAAmC,CAAC;YACxD,MAAM,EAAM,CAAC,OAAO,CAAC,mCAAmC,CAAC,CAAC;YAC1D,SAAS,EAAG,CAAC,wEAAgC,CAAC;YAC9C,UAAU,EAAE;gBACR,oBAAO,CAAC,gBAAgB,EAAE;oBACtB,kBAAK,CAAC,QAAQ,EAAE,kBAAK,CAAC;wBAClB,MAAM,EAAW,GAAG;wBACpB,QAAQ,EAAS,QAAQ;wBACzB,eAAe,EAAE,GAAG;qBACvB,CAAC,CAAC;oBACH,kBAAK,CAAC,WAAW,EAAE,kBAAK,CAAC;wBACrB,MAAM,EAAW,GAAG;wBACpB,QAAQ,EAAS,SAAS;wBAC1B,eAAe,EAAE,KAAK;qBACzB,CAAC,CAAC;oBACH,uBAAU,CAAC,sBAAsB,EAAE;wBAC/B,oBAAO,CAAC,GAAG,CAAC;qBAEf,CAAC;iBACL,CAAC;aACL;SACJ,CAAC;;OACW,uBAAuB,CA6VnC;IAAD,8BAAC;CA7VD,AA6VC,IAAA;AA7VY,0DAAuB","file":"terra-data-table.component.js","sourcesContent":["import {\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { TerraDataTableHeaderCellInterface } from './cell/terra-data-table-header-cell.interface';\nimport { TerraDataTableRowInterface } from './row/terra-data-table-row.interface';\nimport { TerraDataTableContextMenuService } from './context-menu/service/terra-data-table-context-menu.service';\nimport { TerraDataTableCellInterface } from './cell/terra-data-table-cell.interface';\nimport {\n    isArray,\n    isNull,\n    isNullOrUndefined\n} from 'util';\nimport {\n    TerraRefTypeEnum,\n    TerraRefTypeInterface\n} from './cell/terra-ref-type.interface';\nimport { TerraDataTableTextInterface } from './cell/terra-data-table-text.interface';\nimport {\n    animate,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\nimport { TerraBaseService } from '../../../service/terra-base.service';\nimport { TerraBaseData } from '../../data/terra-base.data';\nimport { TerraPagerInterface } from '../../pager/data/terra-pager.interface';\nimport { TerraCheckboxComponent } from '../../forms/checkbox/terra-checkbox.component';\nimport { TerraButtonInterface } from '../../buttons/button/data/terra-button.interface';\nimport { TerraSelectBoxValueInterface } from '../../forms/select-box/data/terra-select-box.interface';\nimport { TerraAlertComponent } from '../../alert/terra-alert.component';\nimport { TerraTagInterface } from '../../layouts/tag/data/terra-tag.interface';\n\n@Component({\n    selector:   'terra-data-table',\n    template:   require('./terra-data-table.component.html'),\n    styles:     [require('./terra-data-table.component.scss')],\n    providers:  [TerraDataTableContextMenuService],\n    animations: [\n        trigger('collapsedState', [\n            state('hidden', style({\n                height:          '0',\n                overflow:        'hidden',\n                'margin-bottom': '0'\n            })),\n            state('collapsed', style({\n                height:          '*',\n                overflow:        'initial',\n                'margin-bottom': '6px'\n            })),\n            transition('hidden <=> collapsed', [\n                animate(300)\n\n            ])\n        ])\n    ]\n})\nexport class TerraDataTableComponent<S extends TerraBaseService, D extends TerraBaseData, I extends TerraPagerInterface> implements OnChanges\n{\n    @ViewChild('viewChildHeaderCheckbox')\n    public viewChildHeaderCheckbox:TerraCheckboxComponent;\n\n    @Input()\n    public inputService:S;\n\n    @Input()\n    public inputDataType:string;\n\n    @Input()\n    public inputHasCheckboxes:boolean;\n\n    @Input()\n    public inputHasPager:boolean;\n\n    @Input()\n    public inputHasInitialLoading:boolean;\n\n    @Input()\n    public inputNoResultTextPrimary:string;\n\n    @Input()\n    public inputNoResultTextSecondary:string;\n\n    @Input()\n    public inputNoResultButtons:Array<TerraButtonInterface>;\n\n    @Input()\n    public inputShowGroupFunctions:boolean = false;\n\n    @Input()\n    public inputGroupFunctionExecuteButtonIsDisabled:boolean = true;\n\n    @Output()\n    public outputDoPagingEvent:EventEmitter<TerraPagerInterface> = new EventEmitter<TerraPagerInterface>();\n\n    @Output()\n    public outputRowCheckBoxChanged:EventEmitter<TerraDataTableRowInterface<D>> = new EventEmitter();\n\n    @Output()\n    public outputGroupFunctionExecuteButtonClicked:EventEmitter<Array<TerraDataTableRowInterface<D>>> = new EventEmitter();\n\n    public headerList:Array<TerraDataTableHeaderCellInterface>;\n    public pagingData:TerraPagerInterface;\n    public pagingSize:Array<TerraSelectBoxValueInterface>;\n    public onSuccessFunction:(res:I) => void;\n    public defaultPagingSize:number;\n    public TerraRefTypeEnum:object = TerraRefTypeEnum;\n\n    protected isHeaderCheckboxChecked:boolean = false;\n    protected initialLoadingMessage:string;\n    protected alert:TerraAlertComponent = TerraAlertComponent.getInstance();\n    protected langPrefix:string = 'terraDataTable';\n    protected requestPending:boolean;\n\n    private _rowList:Array<TerraDataTableRowInterface<D>>;\n    private _selectedRowList:Array<TerraDataTableRowInterface<D>>;\n\n    /**\n     * @deprecated\n     */\n    @Input()\n    private hasCheckboxes:boolean;\n\n    constructor()\n    {\n        this.hasCheckboxes = true;\n        this.inputHasCheckboxes = true;\n        this.inputHasInitialLoading = false;\n        this.inputHasPager = true;\n\n        this._selectedRowList = [];\n        this._rowList = [];\n    }\n\n    public get rowList():Array<TerraDataTableRowInterface<D>>\n    {\n        return this._rowList;\n    }\n\n    public set rowList(value:Array<TerraDataTableRowInterface<D>>)\n    {\n        // reset selected RowList\n        this._selectedRowList = [];\n\n        this._rowList = value;\n    }\n\n    private get getCollapsedState():string\n    {\n        if(this.inputShowGroupFunctions)\n        {\n            return 'collapsed';\n        }\n        else\n        {\n            return 'hidden';\n        }\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if(changes['hasCheckboxes'])\n        {\n            console.warn(\n                'hasCheckboxes is deprecated. It will be removed in one of the upcoming releases. Please use inputHasCheckboxes instead.');\n            this.inputHasCheckboxes = changes['hasCheckboxes'].currentValue;\n        }\n    }\n\n    public onHeaderCheckboxChange(isChecked:boolean):void\n    {\n        this.isHeaderCheckboxChecked = isChecked;\n\n        this._rowList.forEach((row:TerraDataTableRowInterface<D>) =>\n        {\n            if(!row.disabled)\n            {\n                this.changeRowState(isChecked, row);\n            }\n        });\n    }\n\n    public onRowCheckboxChange(isChecked:boolean, row:TerraDataTableRowInterface<D>):void\n    {\n        this.changeRowState(isChecked, row);\n        this.outputRowCheckBoxChanged.emit(row);\n\n        if(this.selectedRowList.length === 0)\n        {\n            this.isHeaderCheckboxChecked = false;\n        }\n        else if(this.selectedRowList.length > 0 && this._rowList.length === this.selectedRowList.length)\n        {\n            this.isHeaderCheckboxChecked = true;\n        }\n        else\n        {\n            this.viewChildHeaderCheckbox.isIndeterminate = true;\n        }\n    }\n\n    public checkTooltipPlacement(placement:string):string\n    {\n        if(!isNullOrUndefined(placement) && placement !== '')\n        {\n            return placement;\n        }\n\n        return 'top';\n    }\n\n    public rowClicked(cell:TerraDataTableCellInterface, clickedRow:TerraDataTableRowInterface<D>):void\n    {\n        if(!cell.buttonList && !clickedRow.disabled)\n        {\n            this._rowList.forEach((row:TerraDataTableRowInterface<D>):void =>\n            {\n                row.isActive = false;\n            });\n\n            clickedRow.isActive = true;\n            clickedRow.clickFunction();\n        }\n    }\n\n    public getCellDataType(data:any):string\n    {\n        function isRefType(arg:any):arg is TerraRefTypeInterface\n        {\n            return arg\n                   && arg.type && typeof arg.type === 'string'\n                   && arg.value && typeof arg.value === 'string';\n        }\n\n        function isTextType(arg:any):arg is TerraDataTableTextInterface\n        {\n            return arg && arg.caption && typeof arg.caption === 'string';\n        }\n\n        function isTagArray(arg:any):arg is Array<TerraTagInterface>\n        {\n            // check if it is an array\n            if(!isArray(arg))\n            {\n                return false;\n            }\n\n            // check if every element of the array implements the tag interface\n            let implementsInterface:boolean = true;\n            arg.forEach((elem:any) =>\n            {\n                implementsInterface = implementsInterface && elem.badge && typeof elem.badge === 'string';\n            });\n\n            return arg && implementsInterface;\n        }\n\n        function isButtonArray(arg:any):arg is Array<TerraButtonInterface>\n        {\n            // check if it is an array\n            if(!isArray(arg))\n            {\n                return false;\n            }\n\n            // check if every element of the array implements the button interface\n            let implementsInterface:boolean = true;\n            arg.forEach((elem:any) =>\n            {\n                implementsInterface = implementsInterface && elem.clickFunction && typeof elem.clickFunction === 'function';\n            });\n\n            return arg && implementsInterface;\n        }\n\n        if(typeof data === 'object')\n        {\n            if(isRefType(data))\n            {\n                return 'TerraRefTypeInterface';\n            }\n            else if(isTextType(data))\n            {\n                return 'TerraDataTableTextInterface';\n            }\n            else if(isTagArray(data))\n            {\n                return 'tags';\n            }\n            else if(isButtonArray(data))\n            {\n                return 'buttons';\n            }\n        }\n        return typeof data;\n    }\n\n    public onGroupFunctionExecuteButtonClicked(event:Event):void\n    {\n        this.outputGroupFunctionExecuteButtonClicked.emit(this._selectedRowList);\n    }\n\n    private changeRowState(isChecked:boolean, rowToChange:TerraDataTableRowInterface<D>):void\n    {\n        rowToChange.selected = isChecked;\n\n        let rowFound:boolean = false;\n\n        this.selectedRowList.forEach((row:TerraDataTableRowInterface<D>):void =>\n        {\n            if(row === rowToChange)\n            {\n                rowFound = true;\n            }\n        });\n\n        if(rowToChange.selected)\n        {\n            if(!rowFound)\n            {\n                this.selectedRowList.push(rowToChange);\n            }\n        }\n        else\n        {\n            let index:number = this.selectedRowList.indexOf(rowToChange);\n\n            this.selectedRowList.splice(index, 1);\n        }\n    }\n\n    public deleteRow(rowToDelete:TerraDataTableRowInterface<D>):void\n    {\n        let index:number = this._rowList.indexOf(rowToDelete);\n\n        this._rowList.splice(index, 1);\n\n        let selectedIndex:number = this.selectedRowList.indexOf(rowToDelete);\n\n        // check if row exists in selectedRowList\n        if(!isNull(selectedIndex))\n        {\n            this.selectedRowList.splice(selectedIndex, 1);\n        }\n    }\n\n    public get selectedRowList():Array<TerraDataTableRowInterface<D>>\n    {\n        return this._selectedRowList;\n    }\n\n    public doPaging(pagerData:TerraPagerInterface):void\n    {\n        this.outputDoPagingEvent.emit(pagerData);\n\n        this.isHeaderCheckboxChecked = false;\n\n        if(!isNullOrUndefined(this._rowList))\n        {\n            this._rowList.forEach((row:TerraDataTableRowInterface<D>) =>\n            {\n                this.changeRowState(false, row);\n            });\n        }\n    }\n\n    public doSearch(restCall:Observable<I>):void\n    {\n        if(isNullOrUndefined(restCall))\n        {\n            return;\n        }\n\n        this.requestPending = true;\n        restCall.subscribe(\n            (res:I) =>\n            {\n                this._selectedRowList = [];\n                this.onSuccessFunction(res);\n            },\n            (error:any) =>\n            {\n                if(error.status === 401 || error.status === 500)\n                {\n                    // TODO\n                    // alert(error.status);\n                }\n            },\n            () =>\n            {\n                this.requestPending = false;\n            }\n        );\n    }\n\n    protected getTextAlign(item:TerraDataTableHeaderCellInterface):string\n    {\n        if(!isNullOrUndefined(item.textAlign))\n        {\n            return item.textAlign;\n        }\n        else\n        {\n            return 'left';\n        }\n    }\n}\n"]}