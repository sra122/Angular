"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var terra_data_table_context_menu_service_1 = require("./context-menu/service/terra-data-table-context-menu.service");
var util_1 = require("util");
var terra_ref_type_interface_1 = require("./cell/terra-ref-type.interface");
var animations_1 = require("@angular/animations");
var terra_checkbox_component_1 = require("../../forms/checkbox/terra-checkbox.component");
var terra_alert_component_1 = require("../../alert/terra-alert.component");
var TerraDataTableComponent = /** @class */ (function () {
    function TerraDataTableComponent() {
        this.inputShowGroupFunctions = false;
        this.inputGroupFunctionExecuteButtonIsDisabled = true;
        this.outputDoPagingEvent = new core_1.EventEmitter();
        this.outputRowCheckBoxChanged = new core_1.EventEmitter();
        this.outputGroupFunctionExecuteButtonClicked = new core_1.EventEmitter();
        this.TerraRefTypeEnum = terra_ref_type_interface_1.TerraRefTypeEnum;
        this.isHeaderCheckboxChecked = false;
        this.alert = terra_alert_component_1.TerraAlertComponent.getInstance();
        this.langPrefix = 'terraDataTable';
        this.hasCheckboxes = true;
        this.inputHasCheckboxes = true;
        this.inputHasInitialLoading = false;
        this.inputHasPager = true;
        this._selectedRowList = [];
        this._rowList = [];
    }
    Object.defineProperty(TerraDataTableComponent.prototype, "rowList", {
        get: function () {
            return this._rowList;
        },
        set: function (value) {
            // reset selected RowList
            this._selectedRowList = [];
            this._rowList = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TerraDataTableComponent.prototype, "getCollapsedState", {
        get: function () {
            if (this.inputShowGroupFunctions) {
                return 'collapsed';
            }
            else {
                return 'hidden';
            }
        },
        enumerable: true,
        configurable: true
    });
    TerraDataTableComponent.prototype.ngOnChanges = function (changes) {
        if (changes['hasCheckboxes']) {
            console.warn('hasCheckboxes is deprecated. It will be removed in one of the upcoming releases. Please use inputHasCheckboxes instead.');
            this.inputHasCheckboxes = changes['hasCheckboxes'].currentValue;
        }
    };
    TerraDataTableComponent.prototype.onHeaderCheckboxChange = function (isChecked) {
        var _this = this;
        this.isHeaderCheckboxChecked = isChecked;
        this._rowList.forEach(function (row) {
            if (!row.disabled) {
                _this.changeRowState(isChecked, row);
            }
        });
    };
    TerraDataTableComponent.prototype.onRowCheckboxChange = function (isChecked, row) {
        this.changeRowState(isChecked, row);
        this.outputRowCheckBoxChanged.emit(row);
        if (this.selectedRowList.length === 0) {
            this.isHeaderCheckboxChecked = false;
        }
        else if (this.selectedRowList.length > 0 && this._rowList.length === this.selectedRowList.length) {
            this.isHeaderCheckboxChecked = true;
        }
        else {
            this.viewChildHeaderCheckbox.isIndeterminate = true;
        }
    };
    TerraDataTableComponent.prototype.checkTooltipPlacement = function (placement) {
        if (!util_1.isNullOrUndefined(placement) && placement !== '') {
            return placement;
        }
        return 'top';
    };
    TerraDataTableComponent.prototype.rowClicked = function (cell, clickedRow) {
        if (!cell.buttonList && !clickedRow.disabled) {
            this._rowList.forEach(function (row) {
                row.isActive = false;
            });
            clickedRow.isActive = true;
            clickedRow.clickFunction();
        }
    };
    TerraDataTableComponent.prototype.getCellDataType = function (data) {
        function isRefType(arg) {
            return arg
                && arg.type && typeof arg.type === 'string'
                && arg.value && typeof arg.value === 'string';
        }
        function isTextType(arg) {
            return arg && arg.caption && typeof arg.caption === 'string';
        }
        function isTagArray(arg) {
            // check if it is an array
            if (!util_1.isArray(arg)) {
                return false;
            }
            // check if every element of the array implements the tag interface
            var implementsInterface = true;
            arg.forEach(function (elem) {
                implementsInterface = implementsInterface && elem.badge && typeof elem.badge === 'string';
            });
            return arg && implementsInterface;
        }
        function isButtonArray(arg) {
            // check if it is an array
            if (!util_1.isArray(arg)) {
                return false;
            }
            // check if every element of the array implements the button interface
            var implementsInterface = true;
            arg.forEach(function (elem) {
                implementsInterface = implementsInterface && elem.clickFunction && typeof elem.clickFunction === 'function';
            });
            return arg && implementsInterface;
        }
        if (typeof data === 'object') {
            if (isRefType(data)) {
                return 'TerraRefTypeInterface';
            }
            else if (isTextType(data)) {
                return 'TerraDataTableTextInterface';
            }
            else if (isTagArray(data)) {
                return 'tags';
            }
            else if (isButtonArray(data)) {
                return 'buttons';
            }
        }
        return typeof data;
    };
    TerraDataTableComponent.prototype.onGroupFunctionExecuteButtonClicked = function (event) {
        this.outputGroupFunctionExecuteButtonClicked.emit(this._selectedRowList);
    };
    TerraDataTableComponent.prototype.changeRowState = function (isChecked, rowToChange) {
        rowToChange.selected = isChecked;
        var rowFound = false;
        this.selectedRowList.forEach(function (row) {
            if (row === rowToChange) {
                rowFound = true;
            }
        });
        if (rowToChange.selected) {
            if (!rowFound) {
                this.selectedRowList.push(rowToChange);
            }
        }
        else {
            var index = this.selectedRowList.indexOf(rowToChange);
            this.selectedRowList.splice(index, 1);
        }
    };
    TerraDataTableComponent.prototype.deleteRow = function (rowToDelete) {
        var index = this._rowList.indexOf(rowToDelete);
        this._rowList.splice(index, 1);
        var selectedIndex = this.selectedRowList.indexOf(rowToDelete);
        // check if row exists in selectedRowList
        if (!util_1.isNull(selectedIndex)) {
            this.selectedRowList.splice(selectedIndex, 1);
        }
    };
    Object.defineProperty(TerraDataTableComponent.prototype, "selectedRowList", {
        get: function () {
            return this._selectedRowList;
        },
        enumerable: true,
        configurable: true
    });
    TerraDataTableComponent.prototype.doPaging = function (pagerData) {
        var _this = this;
        this.outputDoPagingEvent.emit(pagerData);
        this.isHeaderCheckboxChecked = false;
        if (!util_1.isNullOrUndefined(this._rowList)) {
            this._rowList.forEach(function (row) {
                _this.changeRowState(false, row);
            });
        }
    };
    TerraDataTableComponent.prototype.doSearch = function (restCall) {
        var _this = this;
        if (util_1.isNullOrUndefined(restCall)) {
            return;
        }
        this.requestPending = true;
        restCall.subscribe(function (res) {
            _this._selectedRowList = [];
            _this.onSuccessFunction(res);
        }, function (error) {
            if (error.status === 401 || error.status === 500) {
                // TODO
                // alert(error.status);
            }
        }, function () {
            _this.requestPending = false;
        });
    };
    TerraDataTableComponent.prototype.getTextAlign = function (item) {
        if (!util_1.isNullOrUndefined(item.textAlign)) {
            return item.textAlign;
        }
        else {
            return 'left';
        }
    };
    __decorate([
        core_1.ViewChild('viewChildHeaderCheckbox'),
        __metadata("design:type", terra_checkbox_component_1.TerraCheckboxComponent)
    ], TerraDataTableComponent.prototype, "viewChildHeaderCheckbox", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Object)
    ], TerraDataTableComponent.prototype, "inputService", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraDataTableComponent.prototype, "inputDataType", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraDataTableComponent.prototype, "inputHasCheckboxes", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraDataTableComponent.prototype, "inputHasPager", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraDataTableComponent.prototype, "inputHasInitialLoading", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraDataTableComponent.prototype, "inputNoResultTextPrimary", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], TerraDataTableComponent.prototype, "inputNoResultTextSecondary", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Array)
    ], TerraDataTableComponent.prototype, "inputNoResultButtons", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraDataTableComponent.prototype, "inputShowGroupFunctions", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraDataTableComponent.prototype, "inputGroupFunctionExecuteButtonIsDisabled", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraDataTableComponent.prototype, "outputDoPagingEvent", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraDataTableComponent.prototype, "outputRowCheckBoxChanged", void 0);
    __decorate([
        core_1.Output(),
        __metadata("design:type", core_1.EventEmitter)
    ], TerraDataTableComponent.prototype, "outputGroupFunctionExecuteButtonClicked", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Boolean)
    ], TerraDataTableComponent.prototype, "hasCheckboxes", void 0);
    TerraDataTableComponent = __decorate([
        core_1.Component({
            selector: 'terra-data-table',
            template: require('./terra-data-table.component.html'),
            styles: [require('./terra-data-table.component.scss')],
            providers: [terra_data_table_context_menu_service_1.TerraDataTableContextMenuService],
            animations: [
                animations_1.trigger('collapsedState', [
                    animations_1.state('hidden', animations_1.style({
                        height: '0',
                        overflow: 'hidden',
                        'margin-bottom': '0'
                    })),
                    animations_1.state('collapsed', animations_1.style({
                        height: '*',
                        overflow: 'initial',
                        'margin-bottom': '6px'
                    })),
                    animations_1.transition('hidden <=> collapsed', [
                        animations_1.animate(300)
                    ])
                ])
            ]
        }),
        __metadata("design:paramtypes", [])
    ], TerraDataTableComponent);
    return TerraDataTableComponent;
}());
exports.TerraDataTableComponent = TerraDataTableComponent;

//# sourceMappingURL=terra-data-table.component.js.map
