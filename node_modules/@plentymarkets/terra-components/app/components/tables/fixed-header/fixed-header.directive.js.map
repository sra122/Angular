{"version":3,"sources":["app/components/tables/fixed-header/fixed-header.directive.ts"],"names":[],"mappings":"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","file":"fixed-header.directive.js","sourcesContent":["import {\n    AfterViewChecked,\n    AfterViewInit,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Inject\n} from '@angular/core';\nimport { TerraSimpleTableComponent } from '../../tables/simple/terra-simple-table.component';\n\nconst FIXED_CLASS:string = 'fixedHeader';\n\n@Directive({\n    selector: 'terra-simple-table[fixedHeader]'\n})\nexport class FixedHeaderDirective implements AfterViewInit, AfterViewChecked\n{\n    private tableElement:HTMLTableElement;\n    private tableHeadElement:HTMLTableSectionElement;\n    private tableBodyElement:HTMLTableSectionElement;\n    private columnWidths:Array<number> = [];\n\n    constructor(private elementRef:ElementRef,\n                @Inject(forwardRef(() => TerraSimpleTableComponent)) private tableComponent:any)\n    {\n    }\n\n    public ngAfterViewInit():void\n    {\n        this.tableElement = this.elementRef.nativeElement.querySelector('table');\n        this.tableHeadElement = this.tableElement.querySelector('thead');\n        this.tableBodyElement = this.tableElement.querySelector('tbody');\n    }\n\n    public ngAfterViewChecked():void\n    {\n        // check if table has at least one row\n        if(this.tableElement && this.tableBodyElement.querySelector('tr:first-child'))\n        {\n            this.updateColumnWidths();\n        }\n    }\n\n    private updateColumnWidths():void\n    {\n\n        let rows:NodeListOf<HTMLElement> = this.tableBodyElement.querySelectorAll('tr');\n        let headerCol:HTMLElement;\n        let bodyCol:HTMLElement;\n\n        // adjust difference between header width and body width\n        let headerWidth:number = this.tableHeadElement.getBoundingClientRect().width;\n        let bodyWidth:number = this.tableBodyElement.getBoundingClientRect().width;\n        this.tableHeadElement.style.paddingRight = (headerWidth - bodyWidth) + 'px';\n\n        // assign column widths\n        this.getColumnWidths()\n            .forEach((width:number, index:number) =>\n            {\n                headerCol = <HTMLElement> this.tableHeadElement.querySelector('tr th:nth-child(' + (index + 1) + ')');\n                if(headerCol)\n                {\n                    headerCol.style.width = width + '%';\n                }\n\n                for(let i:number = 0; i < rows.length; i++)\n                {\n                    bodyCol = <HTMLElement> rows.item(i).querySelector('tr td:nth-child(' + (index + 1) + ')');\n                    if(bodyCol)\n                    {\n                        bodyCol.style.width = width + '%';\n                    }\n                }\n\n            });\n    }\n\n    private getColumnWidths():Array<number>\n    {\n        let firstRow:HTMLElement = <HTMLElement> this.tableBodyElement.querySelector('tr:first-child');\n        if(firstRow)\n        {\n            let rowWidth:number = firstRow.getBoundingClientRect().width;\n            let columns:NodeListOf<HTMLElement> = firstRow.querySelectorAll('td');\n            if(rowWidth > 0 && columns.length !== this.columnWidths.length)\n            {\n                this.columnWidths = [];\n                for(let i:number = 0; i < columns.length; i++)\n                {\n                    this.columnWidths.push(\n                        (columns.item(i).getBoundingClientRect().width / rowWidth) * 100\n                    );\n                }\n            }\n        }\n\n        return this.columnWidths;\n    }\n}\n"]}