{"version":3,"sources":["app/components/tables/simple/terra-simple-table.component.ts"],"names":[],"mappings":"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","file":"terra-simple-table.component.js","sourcesContent":["import {\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnChanges,\n    Output,\n    SimpleChanges,\n    ViewChild\n} from '@angular/core';\nimport { TerraSimpleTableHeaderCellInterface } from './cell/terra-simple-table-header-cell.interface';\nimport { TerraSimpleTableRowInterface } from './row/terra-simple-table-row.interface';\nimport { TerraCheckboxComponent } from '../../forms/checkbox/terra-checkbox.component';\nimport { Key } from 'ts-keycode-enum';\nimport {\n    isNull,\n    isNullOrUndefined\n} from 'util';\n\n@Component({\n    selector: 'terra-simple-table',\n    styles:   [require('./terra-simple-table.component.scss')],\n    template: require('./terra-simple-table.component.html')\n})\nexport class TerraSimpleTableComponent<D> implements OnChanges\n{\n    @Input()\n    public inputHeaderList:Array<TerraSimpleTableHeaderCellInterface>;\n\n    @Input()\n    public inputRowList:Array<TerraSimpleTableRowInterface<D>>;\n\n    @Input()\n    public inputUseHighlighting:boolean = false;\n\n    @Input()\n    public inputIsStriped:boolean = false;\n\n    @Input()\n    public inputHasCheckboxes:boolean = false;\n\n    @Input()\n    public inputEnableHotkeys:boolean = false;\n\n    @Input()\n    public inputHighlightedRow:TerraSimpleTableRowInterface<D>;\n\n    @Output()\n    public outputHeaderCheckBoxChanged:EventEmitter<boolean> = new EventEmitter();\n\n    @Output()\n    public outputRowCheckBoxChanged:EventEmitter<TerraSimpleTableRowInterface<D>> = new EventEmitter();\n\n    @Output()\n    public outputRowClicked:EventEmitter<TerraSimpleTableRowInterface<D>> = new EventEmitter();\n\n    @Output()\n    public outputHighlightedRowChange:EventEmitter<TerraSimpleTableRowInterface<D>> = new EventEmitter();\n\n    @Output()\n    public outputSelectedRowsChange:EventEmitter<Array<TerraSimpleTableRowInterface<D>>> = new EventEmitter();\n\n    @ViewChild('viewChildHeaderCheckbox')\n    public viewChildHeaderCheckbox:TerraCheckboxComponent;\n\n    @ViewChild('scrollContainer', {read: ElementRef})\n    public scrollContainer:ElementRef;\n\n    public onRowListChange:EventEmitter<void> = new EventEmitter();\n\n    public get selectedRowList():Array<TerraSimpleTableRowInterface<D>>\n    {\n        return this.inputRowList.filter((row:TerraSimpleTableRowInterface<D>) => row.selected === true);\n    }\n\n    protected headerCheckbox:{ checked:boolean, isIndeterminate:boolean };\n\n    constructor(private elementRef:ElementRef)\n    {\n        this.headerCheckbox = {\n            checked:         false,\n            isIndeterminate: false\n        };\n\n        this.inputRowList = [];\n    }\n\n    public ngOnChanges(changes:SimpleChanges):void\n    {\n        if(changes.hasOwnProperty('inputRowList'))\n        {\n            this.updateHeaderCheckboxState();\n\n            this.onRowListChange.emit();\n        }\n    }\n\n    /**\n     * @deprecated\n     *\n     * @returns {Array<TerraSimpleTableHeaderCellInterface>}\n     */\n    public get headerList():Array<TerraSimpleTableHeaderCellInterface>\n    {\n        return this.inputHeaderList;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @param value\n     */\n    public set headerList(value:Array<TerraSimpleTableHeaderCellInterface>)\n    {\n        this.inputHeaderList = value;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @returns {Array<TerraSimpleTableRowInterface>}\n     */\n    public get rowList():Array<TerraSimpleTableRowInterface<D>>\n    {\n        return this.inputRowList;\n    }\n\n    public set rowList(value:Array<TerraSimpleTableRowInterface<D>>)\n    {\n        this.inputRowList = value;\n    }\n\n    protected checkTooltipPlacement(placement:string):string\n    {\n        if(isNull(placement) || placement === '')\n        {\n            return 'top';\n        }\n\n        return placement;\n    }\n\n    protected onHeaderCheckboxChange():void\n    {\n        this.outputHeaderCheckBoxChanged.emit(!this.headerCheckbox.checked);\n\n        if(this.headerCheckbox.checked)\n        {\n            this.resetSelectedRows();\n        }\n        else\n        {\n            this.selectAllRows();\n        }\n    }\n\n    protected onRowCheckboxChange(row:TerraSimpleTableRowInterface<D>):void\n    {\n        // update row selection\n        row.selected = !row.selected;\n\n        // notify component user\n        this.outputRowCheckBoxChanged.emit(row);\n\n        // notify user that selection has changed\n        this.triggerOutputSelectedRowsChange();\n\n        // update header checkbox state\n        this.updateHeaderCheckboxState();\n    }\n\n    private triggerOutputSelectedRowsChange():void\n    {\n        this.outputSelectedRowsChange.emit(this.selectedRowList);\n    }\n\n    private checkHeaderCheckbox():void\n    {\n        this.headerCheckbox.checked = true;\n        this.headerCheckbox.isIndeterminate = false;\n    }\n\n    private uncheckHeaderCheckbox():void\n    {\n        this.headerCheckbox.checked = false;\n        this.headerCheckbox.isIndeterminate = false;\n    }\n\n    private setHeaderCheckboxIndeterminate():void\n    {\n        this.headerCheckbox.checked = false;\n        this.headerCheckbox.isIndeterminate = true;\n    }\n\n    private updateHeaderCheckboxState():void\n    {\n        let selectedRowsCount:number = this.selectedRowList.length;\n\n        if(selectedRowsCount === 0) // anything selected?\n        {\n            this.uncheckHeaderCheckbox();\n        }\n        else if(selectedRowsCount > 0 && this.rowList.length === selectedRowsCount) // all selected?\n        {\n            this.checkHeaderCheckbox();\n        }\n        else // some rows selected -> indeterminate\n        {\n            this.setHeaderCheckboxIndeterminate();\n        }\n    }\n\n    private selectAllRows():void\n    {\n        this.checkHeaderCheckbox();\n\n        this.inputRowList.forEach((row:TerraSimpleTableRowInterface<D>) =>\n        {\n            if(!row.disabled)\n            {\n                row.selected = true;\n            }\n        });\n\n        // notify user that selection has changed\n        this.triggerOutputSelectedRowsChange();\n    }\n\n    private resetSelectedRows():void\n    {\n        this.uncheckHeaderCheckbox();\n\n        this.inputRowList.forEach((row:TerraSimpleTableRowInterface<D>) =>\n        {\n            row.selected = false;\n        });\n\n        // notify user that selection has been reset\n        this.triggerOutputSelectedRowsChange();\n    }\n\n    protected onCheckboxClick(event:Event):void\n    {\n        // do not emit 'outputRowClicked' when toggling checkbox\n        event.stopPropagation();\n    }\n\n    protected onRowClick(row:TerraSimpleTableRowInterface<D>):void\n    {\n        if(this.inputUseHighlighting && !row.disabled)\n        {\n            this.inputHighlightedRow = row;\n            this.outputHighlightedRowChange.emit(this.inputHighlightedRow);\n        }\n        this.outputRowClicked.emit(row);\n    }\n\n    protected onKeydown(event:KeyboardEvent):void\n    {\n        if(this.inputEnableHotkeys && this.inputUseHighlighting && this.inputHighlightedRow)\n        {\n            if(event.which === Key.DownArrow || event.which === Key.UpArrow)\n            {\n                this.highlightSiblingRow(event.which === Key.DownArrow);\n            }\n\n            if(event.which === Key.Space && this.inputHasCheckboxes)\n            {\n                if(event.ctrlKey || event.metaKey)\n                {\n                    this.headerCheckbox.checked = !this.headerCheckbox.checked;\n                }\n                else\n                {\n                    this.onRowCheckboxChange(this.inputHighlightedRow);\n                }\n            }\n\n            if(event.which === Key.Enter)\n            {\n                this.outputRowClicked.emit(this.inputHighlightedRow);\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    private highlightSiblingRow(nextSibling:boolean):void\n    {\n        if(this.inputHighlightedRow)\n        {\n            let i:number = nextSibling ? 1 : -1;\n            let highlightIndex:number = this.inputRowList.indexOf(this.inputHighlightedRow) + i;\n\n            while(highlightIndex >= 0 && highlightIndex < this.inputRowList.length)\n            {\n                if(!this.inputRowList[highlightIndex].disabled)\n                {\n                    this.inputHighlightedRow = this.inputRowList[highlightIndex];\n                    this.outputHighlightedRowChange.emit(this.inputHighlightedRow);\n                    break;\n                }\n                highlightIndex += i;\n            }\n\n            if(highlightIndex >= 0 && highlightIndex < this.inputRowList.length)\n            {\n                let activeRow:HTMLElement = this.elementRef.nativeElement.querySelector('table tbody tr:nth-child(' + (highlightIndex + 1) + ')');\n                let viewport:ClientRect = this.scrollContainer.nativeElement.getBoundingClientRect();\n                let activeRowPosition:ClientRect = activeRow.getBoundingClientRect();\n\n                if(viewport.bottom < activeRowPosition.bottom)\n                {\n                    this.scrollContainer.nativeElement.scrollTop += (activeRowPosition.bottom - viewport.bottom);\n                }\n                else if(viewport.top > activeRowPosition.top)\n                {\n                    this.scrollContainer.nativeElement.scrollTop -= (viewport.top - activeRowPosition.top);\n                }\n            }\n        }\n    }\n\n    protected getTextAlign(item:TerraSimpleTableHeaderCellInterface):string\n    {\n        if(!isNullOrUndefined(item.textAlign))\n        {\n            return item.textAlign;\n        }\n        else\n        {\n            return 'left';\n        }\n    }\n}\n"]}