{"version":3,"sources":["app/validators/decimal/terra-decimal-validator.ts"],"names":[],"mappings":";;AAIA,6BAAyC;AAEzC;;GAEG;AACH,IAAM,SAAS,GAAU,GAAG,CAAC;AAC7B,IAAM,gBAAgB,GAAU,CAAC,CAAC;AAClC,IAAM,eAAe,GAAU,CAAC,CAAC;AACjC,IAAM,cAAc,GAAU,CAAC,CAAC;AAEhC,+BAAsC,SAAgB,EAAE,QAAe;IAEnE,OAAO,UAAC,OAAuB;QAE3B,IAAM,KAAK,GAAU,OAAO,CAAC,KAAe,CAAC;QAC7C,IAAG,CAAC,wBAAiB,CAAC,KAAK,CAAC,EAC5B;YACI,IAAM,aAAa,GAAiB,KAAK,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACtE,IAAM,qBAAqB,GAAW,aAAa,CAAC,MAAM,GAAG,gBAAgB,CAAC;YAC9E,IAAM,+BAA+B,GAAW,aAAa,CAAC,eAAe,CAAC,CAAC,MAAM,GAAG,SAAS,GAAG,QAAQ,CAAC;YAC7G,IAAM,8BAA8B,GAAW,wBAAiB,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;gBAC7F,KAAK,CAAC,CAAC;gBACP,aAAa,CAAC,cAAc,CAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;YAEpD,IAAG,qBAAqB,EACxB;gBACI,OAAO,EAAC,cAAc,EAAE,8BAA8B,EAAC,CAAC;aAC3D;YAED,IAAG,+BAA+B,EAClC;gBACI,OAAO,EAAC,cAAc,EAAE,qCAAqC,EAAC,CAAC;aAClE;YAED,IAAG,8BAA8B,EACjC;gBACI,OAAO,EAAC,cAAc,EAAE,oCAAoC,EAAC,CAAC;aACjE;SACJ;QAED,OAAO,IAAI,CAAC;IAChB,CAAC,CAAC;AACN,CAAC;AAhCD,sDAgCC","file":"terra-decimal-validator.js","sourcesContent":["import {\n    AbstractControl,\n    ValidatorFn\n} from '@angular/forms';\nimport { isNullOrUndefined } from 'util';\n\n/**\n * @author mfrank\n */\nconst separator:string = '.';\nconst maxSplittedParts:number = 2;\nconst beforeSeparator:number = 0;\nconst afterSeparator:number = 1;\n\nexport function terraDecimalValidator(maxLength:number, decimals:number):ValidatorFn\n{\n    return (control:AbstractControl):{ [key:string]:any } | null =>\n    {\n        const value:number = control.value as number;\n        if(!isNullOrUndefined(value))\n        {\n            const splittedValue:Array<string> = value.toString().split(separator);\n            const invalidSeparatorCount:boolean = splittedValue.length > maxSplittedParts;\n            const invalidMaxLengthBeforeSeparator:boolean = splittedValue[beforeSeparator].length > maxLength - decimals;\n            const invalidMaxLengthAfterSeparator:boolean = isNullOrUndefined(splittedValue[afterSeparator]) ?\n                false :\n                splittedValue[afterSeparator].length > decimals;\n\n            if(invalidSeparatorCount)\n            {\n                return {'terraDecimal': 'Invalid amount of separators'};\n            }\n\n            if(invalidMaxLengthBeforeSeparator)\n            {\n                return {'terraDecimal': 'Invalid max length before separator'};\n            }\n\n            if(invalidMaxLengthAfterSeparator)\n            {\n                return {'terraDecimal': 'Invalid max length after separator'};\n            }\n        }\n\n        return null;\n    };\n}\n"]}