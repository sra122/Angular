"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dgeni_1 = require("dgeni");
var mockPackage = require('../mocks/mockPackage');
var path = require('canonical-path');
describe('linkInheritedDocs', function () {
    var dgeni;
    var injector;
    var tsProcessor;
    var linkProcessor;
    beforeEach(function () {
        dgeni = new dgeni_1.Dgeni([mockPackage()]);
        injector = dgeni.configureInjector();
        tsProcessor = injector.get('readTypeScriptModules');
        linkProcessor = injector.get('linkInheritedDocs');
        tsProcessor.basePath = path.resolve(__dirname, '../mocks/linkInheritedDocs');
        tsProcessor.sourceFiles = ['index.ts', 'deps.ts'];
    });
    it('should properly link the inherited docs', function () {
        var docsArray = [];
        tsProcessor.$process(docsArray);
        linkProcessor.$process(docsArray);
        var childDoc = docsArray.find(function (doc) { return doc.name === 'Child'; });
        var firstParentDoc = docsArray.find(function (doc) { return doc.name === 'FirstParent'; });
        var lastParentDoc = docsArray.find(function (doc) { return doc.name === 'LastParent'; });
        expect(childDoc.extendsClauses.map(function (clause) { return clause.doc; })).toEqual([firstParentDoc]);
        expect(firstParentDoc.extendsClauses.map(function (clause) { return clause.doc; })).toEqual([lastParentDoc]);
        expect(lastParentDoc.extendsClauses.map(function (clause) { return clause.doc; })).toEqual([]);
        expect(lastParentDoc.descendants).toEqual([firstParentDoc]);
        expect(firstParentDoc.descendants).toEqual([childDoc]);
        expect(childDoc.descendants).toEqual([]);
    });
    it('should properly resolve members in inherited docs', function () {
        var docsArray = [];
        tsProcessor.$process(docsArray);
        linkProcessor.$process(docsArray);
        var childDoc = docsArray.find(function (doc) { return doc.name === 'Child'; });
        var memberNames = getInheritedMembers(childDoc).map(function (member) { return member.name; });
        expect(memberNames.length).toBe(3);
        expect(memberNames).toContain('childProp');
        expect(memberNames).toContain('firstParentProp');
        expect(memberNames).toContain('lastParentProp');
    });
    /** Returns a list of all inherited members of a doc. */
    function getInheritedMembers(doc) {
        var members = doc.members || [];
        doc.extendsClauses.forEach(function (clause) {
            members = members.concat(getInheritedMembers(clause.doc));
        });
        return members;
    }
});
//# sourceMappingURL=linkInheritedDocs.spec.js.map