"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var dgeni_1 = require("dgeni");
var mockPackage = require('../mocks/mockPackage');
var path = require('canonical-path');
describe('mergeParameterInfo', function () {
    var dgeni;
    var injector;
    var tsProcessor;
    var mergeParameterInfoProcessor;
    var parseTagsProcessor;
    var extractTagsProcessor;
    beforeEach(function () {
        dgeni = new dgeni_1.Dgeni([mockPackage()]);
        injector = dgeni.configureInjector();
        tsProcessor = injector.get('readTypeScriptModules');
        parseTagsProcessor = injector.get('parseTagsProcessor');
        extractTagsProcessor = injector.get('extractTagsProcessor');
        mergeParameterInfoProcessor = injector.get('mergeParameterInfo');
        tsProcessor.basePath = path.resolve(__dirname, '../mocks/readTypeScriptModules');
        tsProcessor.sourceFiles = ['methodParameters.ts'];
    });
    it('should merge the param tags into the parameter docs', function () {
        var docsArray = [];
        tsProcessor.$process(docsArray);
        parseTagsProcessor.$process(docsArray);
        extractTagsProcessor.$process(docsArray);
        mergeParameterInfoProcessor.$process(docsArray);
        var param5 = docsArray.find(function (doc) { return doc.name === 'param5' && doc.container.name === 'method2'; });
        expect(param5.id).toEqual('methodParameters/TestClass.method2()~param5');
        expect(param5.description).toEqual('description of param5');
        expect(param5.type).toEqual('string');
        var param6 = docsArray.find(function (doc) { return doc.name === 'param6' && doc.container.name === 'method2'; });
        expect(param6.id).toEqual('methodParameters/TestClass.method2()~param6');
        expect(param6.description).toEqual('description of param6');
        expect(param6.type).toEqual('number');
        var param7 = docsArray.find(function (doc) { return doc.name === 'param7' && doc.container.name === 'method2'; });
        expect(param7.id).toEqual('methodParameters/TestClass.method2()~param7');
        expect(param7.description).toEqual('description of param7');
        expect(param7.type).toEqual('number');
        expect(param7.defaultValue).toEqual('42');
    });
});
//# sourceMappingURL=mergeParameterInfo.spec.js.map