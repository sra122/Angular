"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* tslint:disable:only-arrow-functions */
var dgeni_1 = require("dgeni");
var linkInheritedDocs_1 = require("./processors/linkInheritedDocs");
var mergeParameterInfo_1 = require("./processors/mergeParameterInfo");
var readTypeScriptModules_1 = require("./processors/readTypeScriptModules");
var convertPrivateClassesToInterfaces_1 = require("./services/convertPrivateClassesToInterfaces");
var exportSymbolsToDocsMap_1 = require("./services/exportSymbolsToDocsMap");
var modules_1 = require("./services/modules");
var host_1 = require("./services/ts-host/host");
var TsParser_1 = require("./services/TsParser");
// Define the dgeni package for generating the docs
module.exports = new dgeni_1.Package('typescript', [require('../jsdoc')])
    .factory(modules_1.modules)
    .factory(exportSymbolsToDocsMap_1.exportSymbolsToDocsMap)
    .factory('tsHost', function () { return new host_1.Host(); })
    .factory('tsParser', function (log) { return new TsParser_1.TsParser(log); })
    .factory('convertPrivateClassesToInterfaces', function () { return convertPrivateClassesToInterfaces_1.convertPrivateClassesToInterfaces; })
    .factory('EXPORT_DOC_TYPES', function () {
    return [
        'class',
        'interface',
        'function',
        'var',
        'const',
        'let',
        'enum',
        'type-alias',
        'value-module',
    ];
})
    .processor(readTypeScriptModules_1.readTypeScriptModules)
    .processor(linkInheritedDocs_1.linkInheritedDocs)
    .processor(mergeParameterInfo_1.mergeParameterInfo)
    .config(function (computeIdsProcessor, computePathsProcessor, EXPORT_DOC_TYPES) {
    computeIdsProcessor.idTemplates.push({
        docTypes: ['member'],
        idTemplate: '${containerDoc.id}.${name}',
        getAliases: function (doc) {
            return doc.containerDoc.aliases.map(function (alias) { return alias + '.' + doc.name; });
        },
    });
    computePathsProcessor.pathTemplates.push({
        docTypes: ['member'],
        pathTemplate: '${containerDoc.path}#${name}',
        getOutputPath: function () {
            // These docs are not written to their own file, instead they are part of their class doc
        },
    });
    computePathsProcessor.pathTemplates.push({
        docTypes: ['parameter'],
        pathTemplate: '${container.path}#${name}',
        getOutputPath: function () {
            // These docs are not written to their own file, instead they are part of their callable doc
        },
    });
    var MODULES_DOCS_PATH = 'partials/modules';
    computePathsProcessor.pathTemplates.push({
        docTypes: ['module'],
        outputPathTemplate: MODULES_DOCS_PATH + '/${id}/index.html',
        pathTemplate: '/${id}',
    });
    computePathsProcessor.pathTemplates.push({
        docTypes: EXPORT_DOC_TYPES,
        outputPathTemplate: MODULES_DOCS_PATH + '/${path}/index.html',
        pathTemplate: '${moduleDoc.path}/${name}',
    });
});
//# sourceMappingURL=index.js.map