"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var getDeclarationTypeText_1 = require("../services/TsParser/getDeclarationTypeText");
var OverloadInfo_1 = require("./OverloadInfo");
var ParameterContainer_1 = require("./ParameterContainer");
var ParameterizedExportDoc_1 = require("./ParameterizedExportDoc");
var FunctionExportDoc = /** @class */ (function (_super) {
    __extends(FunctionExportDoc, _super);
    function FunctionExportDoc(host, containerDoc, symbol, aliasSymbol) {
        var _this = _super.call(this, host, containerDoc, symbol, findRealDeclaration(symbol.getDeclarations()), aliasSymbol) || this;
        _this.containerDoc = containerDoc;
        _this.docType = 'function';
        _this.type = getDeclarationTypeText_1.getDeclarationTypeText(_this.declaration);
        _this.overloads = _this.symbol.getDeclarations()
            .filter(function (declaration) { return declaration !== _this.declaration; })
            .map(function (declaration) { return new OverloadInfo_1.OverloadInfo(_this, declaration); });
        _this.parameterDocs = ParameterContainer_1.getParameters(_this);
        _this.parameters = _this.parameterDocs.map(function (p) { return p.paramText; });
        return _this;
    }
    return FunctionExportDoc;
}(ParameterizedExportDoc_1.ParameterizedExportDoc));
exports.FunctionExportDoc = FunctionExportDoc;
function findRealDeclaration(declarations) {
    // For this container doc, we use the declaration that has a body or just the first given
    // declaration
    return declarations.find(function (declaration) { return !!declaration.body; }) || declarations[0];
}
//# sourceMappingURL=FunctionExportDoc.js.map