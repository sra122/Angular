"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var nodeToString_1 = require("../services/TsParser/nodeToString");
var ApiDoc_1 = require("./ApiDoc");
/**
 * This represents a call parameter of an exported function or of a method of a class or interface.
 * You can find them on the `FunctionExportDoc.parameters` or `MethodMemberDoc.parameters` properties.
 * They are generated by the call to `getParameters` service.
 */
var ParameterDoc = /** @class */ (function (_super) {
    __extends(ParameterDoc, _super);
    function ParameterDoc(container, symbol, declaration) {
        var _this = _super.call(this, container.host, container.moduleDoc, symbol, declaration) || this;
        _this.container = container;
        _this.symbol = symbol;
        _this.declaration = declaration;
        _this.docType = 'parameter';
        _this.type = _this.getTypeString(_this.declaration);
        _this.isOptional = !!(_this.declaration.questionToken);
        _this.isRestParam = !!(_this.declaration.dotDotDotToken);
        _this.defaultValue = _this.declaration.initializer && nodeToString_1.nodeToString(_this.declaration.initializer);
        _this.paramText = _this.getParamText();
        _this.description = _this.content;
        _this.id = _this.container.id + "~" + _this.name;
        _this.aliases = (_this.container.aliases || []).map(function (alias) { return alias + "~" + _this.name; });
        return _this;
    }
    ParameterDoc.prototype.getParamText = function () {
        var paramText = '';
        if (this.isRestParam)
            paramText += '...';
        paramText += this.name;
        if (this.isOptional)
            paramText += '?';
        if (this.type)
            paramText += ': ' + this.type;
        if (this.defaultValue)
            paramText += ' = ' + this.defaultValue;
        return paramText.trim();
    };
    return ParameterDoc;
}(ApiDoc_1.BaseApiDoc));
exports.ParameterDoc = ParameterDoc;
//# sourceMappingURL=ParameterDoc.js.map