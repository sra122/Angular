"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var getTypeParametersText_1 = require("../services/TsParser/getTypeParametersText");
var MemberDoc_1 = require("./MemberDoc");
var ParameterContainer_1 = require("./ParameterContainer");
var MethodMemberDoc = /** @class */ (function (_super) {
    __extends(MethodMemberDoc, _super);
    function MethodMemberDoc(host, containerDoc, symbol, declaration, overloads) {
        if (overloads === void 0) { overloads = []; }
        var _this = _super.call(this, host, containerDoc, symbol, declaration) || this;
        _this.overloads = overloads;
        _this.name = _this.computeName();
        _this.parameterDocs = ParameterContainer_1.getParameters(_this);
        _this.parameters = _this.parameterDocs.map(function (p) { return p.paramText; });
        _this.anchor = _this.computeAnchor();
        _this.id = _this.containerDoc.id + "." + _this.anchor;
        _this.aliases = _this.computeAliases();
        _this.typeParameters = getTypeParametersText_1.getTypeParametersText(_this.declaration);
        // fix up parameter ids and aliases, now that we have computed the id for this doc
        _this.parameterDocs.forEach(function (param) {
            param.id = _this.id + "~" + param.name;
            param.aliases = _this.aliases.map(function (alias) { return alias + "~" + param.name; });
        });
        return _this;
    }
    MethodMemberDoc.prototype.computeName = function () {
        return this.symbol.name === '__new' ? 'new ' :
            this.symbol.name === '__constructor' ? 'constructor' :
                this.symbol.name === '__call' ? '' :
                    this.symbol.name;
    };
    MethodMemberDoc.prototype.computeAnchor = function () {
        // if the member is a "call" type then it has no name
        var anchorName = this.name.trim() || 'call';
        var overloadIndex = this.symbol.getDeclarations().indexOf(this.declaration);
        // if there is more than one declaration then we need to distinguish them
        return "" + anchorName + (overloadIndex > 0 ? "_" + overloadIndex : '') + "()";
    };
    MethodMemberDoc.prototype.computeAliases = function () {
        var _this = this;
        var aliases = [this.anchor];
        this.containerDoc.aliases.forEach(function (alias) {
            aliases.push(alias + "." + _this.anchor);
        });
        return aliases;
    };
    return MethodMemberDoc;
}(MemberDoc_1.MemberDoc));
exports.MethodMemberDoc = MethodMemberDoc;
//# sourceMappingURL=MethodMemberDoc.js.map