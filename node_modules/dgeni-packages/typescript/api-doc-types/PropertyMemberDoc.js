"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var AccessorInfoDoc_1 = require("./AccessorInfoDoc");
var MemberDoc_1 = require("./MemberDoc");
var PropertyMemberDoc = /** @class */ (function (_super) {
    __extends(PropertyMemberDoc, _super);
    function PropertyMemberDoc(host, containerDoc, symbol, declaration, getAccessorDeclaration, setAccessorDeclaration) {
        var _this = 
        // For accessors, the declaration parameter will be null, and therefore the getter declaration
        // will be used for most of the things (e.g. determination of the type). If the getter doesn't
        // have a type or description, the setter will be checked manually later in this constructor.
        _super.call(this, host, containerDoc, symbol, (declaration || getAccessorDeclaration || setAccessorDeclaration)) || this;
        _this.name = _this.symbol.name;
        _this.anchor = _this.name;
        _this.id = _this.containerDoc.id + "." + _this.name;
        _this.aliases = [_this.name].concat(_this.containerDoc.aliases.map(function (alias) { return alias + "." + _this.name; }));
        // If this property has accessors then compute the type based on that instead
        _this.getAccessor = getAccessorDeclaration && new AccessorInfoDoc_1.AccessorInfoDoc(host, 'get', _this, getAccessorDeclaration);
        _this.setAccessor = setAccessorDeclaration && new AccessorInfoDoc_1.AccessorInfoDoc(host, 'set', _this, setAccessorDeclaration);
        // As mentioned before, by default the get accessor declaration will be passed to the superclass,
        // to determine information about the property. With that approach, it can happen that a few
        // things are not declared on the getter, but on the setter. In that case, if there is a
        // setter, we add the missing information by looking at the setter info document.
        if (_this.setAccessor) {
            _this.type = _this.type || _this.setAccessor.parameterDocs[0].type || '';
            _this.content = _this.content || _this.setAccessor.content || '';
            _this.decorators = _this.decorators || _this.setAccessor.decorators;
        }
        return _this;
    }
    return PropertyMemberDoc;
}(MemberDoc_1.MemberDoc));
exports.PropertyMemberDoc = PropertyMemberDoc;
//# sourceMappingURL=PropertyMemberDoc.js.map