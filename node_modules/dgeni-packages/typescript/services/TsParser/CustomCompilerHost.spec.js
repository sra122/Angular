"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var typescript_1 = require("typescript");
var CustomCompilerHost_1 = require("./CustomCompilerHost");
var resolve = require('canonical-path').resolve;
describe('CustomCompilerHost', function () {
    var options;
    var host;
    var baseDir;
    var extensions;
    var log;
    beforeEach(function () {
        options = { charset: 'utf8' };
        baseDir = resolve(__dirname, '../../mocks/tsParser');
        extensions = ['.ts', '.js'];
        log = require('dgeni/lib/mocks/log')(false);
        host = new CustomCompilerHost_1.CustomCompilerHost(options, baseDir, extensions, log);
    });
    describe('getSourceFile', function () {
        it('should return a SourceFile object for a given path', function () {
            var sourceFile = host.getSourceFile('testSrc.ts', 0);
            expect(sourceFile.fileName).toEqual('testSrc.ts');
            expect(sourceFile.pos).toEqual(0);
            expect(sourceFile.text).toEqual(jasmine.any(String));
        });
        it('should return a SourceFile object for a given path, with fileName relative to baseDir', function () {
            var sourceFile = host.getSourceFile(resolve(baseDir, 'testSrc.ts'), 0);
            expect(sourceFile.fileName).toEqual('testSrc.ts');
            expect(sourceFile.pos).toEqual(0);
            expect(sourceFile.text).toEqual(jasmine.any(String));
        });
        it('should try each of the configured extensions and update the filename to the correct extension', function () {
            var sourceFile = host.getSourceFile('testSrc.js', 0);
            expect(sourceFile.fileName).toEqual('testSrc.ts');
            sourceFile = host.getSourceFile('../mockPackage.ts', 0);
            expect(sourceFile.fileName).toEqual('../mockPackage.js');
        });
        it('should cope with folders with names that look like source files', function () {
            var sourceFile = host.getSourceFile('zone.js', 0);
            expect(sourceFile.fileName).toEqual('zone.js/index.ts');
        });
        it('should cope with "invalid" relative references to node_modules, which are actually outside the baseDir', function () {
            var sourceFile = host.getSourceFile('node_modules/@types/jasmine/index.d.ts', 0);
            expect(sourceFile.fileName).toEqual('../../../node_modules/@types/jasmine/index.d.ts');
        });
    });
    describe('getDefaultLibFileName', function () {
        it('should return a path to the default library', function () {
            expect(host.getDefaultLibFileName(options)).toContain('typescript/lib/lib.d.ts');
        });
    });
    describe('fileExists', function () {
        it('should delegate to fs.existsSync', function () {
            var mockResult = {};
            spyOn(fs, 'existsSync').and.returnValue(mockResult);
            var result = host.fileExists('a/b/c.ts');
            expect(result).toBe(mockResult);
            expect(fs.existsSync).toHaveBeenCalledWith('a/b/c.ts');
        });
    });
    describe('readFile', function () {
        it('should delegate to fs.readFileSync', function () {
            var mockResult = 'content of file';
            spyOn(fs, 'readFileSync').and.returnValue(mockResult);
            var result = host.readFile('a/b/c.ts');
            expect(result).toBe(mockResult);
            expect(fs.readFileSync).toHaveBeenCalledWith('a/b/c.ts', 'utf-8');
        });
    });
    describe('writeFile', function () {
        it('should do nothing', function () {
            host.writeFile('', '', false, undefined, []);
        });
    });
    describe('getCurrentDirectory', function () {
        it('should return the baseDir', function () {
            expect(host.getCurrentDirectory()).toEqual(baseDir);
        });
    });
    describe('useCaseSensitiveFileNames', function () {
        it('should return true if the OS is case sensitive', function () {
            expect(host.useCaseSensitiveFileNames()).toBe(typescript_1.sys.useCaseSensitiveFileNames);
        });
    });
    describe('getCanonicalFileName', function () {
        it('should lower case the filename', function () {
            var expectedFilePath = host.useCaseSensitiveFileNames() ? 'SomeFile.ts' : 'somefile.ts';
            expect(host.getCanonicalFileName('SomeFile.ts')).toEqual(expectedFilePath);
        });
    });
    describe('getNewLine', function () {
        it('should return the newline character for the OS', function () {
            expect(host.getNewLine()).toEqual(require('os').EOL);
        });
    });
});
//# sourceMappingURL=CustomCompilerHost.spec.js.map