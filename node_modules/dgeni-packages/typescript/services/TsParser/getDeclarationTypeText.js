"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var getTypeText_1 = require("./getTypeText");
var nodeToString_1 = require("./nodeToString");
function getDeclarationTypeText(declaration) {
    // if the declaration has an explicit type then use that
    var type = getType(declaration);
    if (type)
        return getTypeText_1.getTypeText(type);
    // if the declaration is a type parameter then just use its textual value
    if (ts.isTypeParameterDeclaration(declaration)) {
        return nodeToString_1.nodeToString(declaration);
    }
    // if the declaration is being initialized then use the initialization type
    var initializer = getInitializer(declaration);
    if (initializer) {
        if (ts.isNewExpression(initializer)) {
            return nodeToString_1.nodeToString(initializer.expression) + getTypeArgumentText(initializer);
        }
        else {
            return nodeToString_1.nodeToString(initializer);
        }
    }
    return '';
}
exports.getDeclarationTypeText = getDeclarationTypeText;
function getType(declaration) {
    return declaration.type;
}
function getInitializer(declaration) {
    return declaration.initializer;
}
function getTypeArgumentText(initializer) {
    if (!initializer.typeArguments) {
        return '';
    }
    var typeTexts = initializer.typeArguments.map(function (t) { return nodeToString_1.nodeToString(t); });
    return "<" + typeTexts.join(', ') + ">";
}
//# sourceMappingURL=getDeclarationTypeText.js.map