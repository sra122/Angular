"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var FileInfo_1 = require("./FileInfo");
var fs = require('fs');
var path = require('canonical-path');
describe('FileInfo', function () {
    var parser;
    var basePath;
    beforeEach(function () {
        spyOn(fs, 'realpathSync').and.callFake(function (filePath) { return filePath + '.real'; });
        parser = new _1.TsParser(require('dgeni/lib/mocks/log')(false));
        basePath = path.resolve(__dirname, '../../mocks');
    });
    it('should compute the file path properties from the parsed file', function () {
        var parseInfo = parser.parse(['tsParser/testSrc.ts'], basePath);
        var module = parseInfo.moduleSymbols[0];
        var fileInfo1 = new FileInfo_1.FileInfo(module.exportArray[0].declarations[0], basePath);
        expect(fileInfo1.baseName).toBe('testSrc');
        expect(fileInfo1.basePath).toBe(basePath);
        expect(fileInfo1.extension).toBe('ts');
        expect(fileInfo1.filePath).toBe(basePath + '/tsParser/testSrc.ts');
        expect(fileInfo1.location).toEqual(jasmine.objectContaining({ start: { line: 6, character: 30 }, end: { line: 28, character: 1 } }));
        expect(fileInfo1.projectRelativePath).toBe('tsParser/testSrc.ts');
        expect(fileInfo1.realFilePath).toBe(fileInfo1.filePath + '.real');
        expect(fileInfo1.realProjectRelativePath).toBe('tsParser/testSrc.ts.real');
        expect(fileInfo1.relativePath).toBe('tsParser/testSrc.ts');
        var fileInfo2 = new FileInfo_1.FileInfo(module.exportArray[1].declarations[0], basePath);
        expect(fileInfo2.baseName).toBe('testSrc');
        expect(fileInfo2.basePath).toBe(basePath);
        expect(fileInfo2.extension).toBe('ts');
        expect(fileInfo2.filePath).toBe(basePath + '/tsParser/testSrc.ts');
        expect(fileInfo2.location).toEqual(jasmine.objectContaining({ start: { line: 33, character: 10 }, end: { line: 33, character: 42 } }));
        expect(fileInfo2.projectRelativePath).toBe('tsParser/testSrc.ts');
        expect(fileInfo2.realFilePath).toBe(fileInfo2.filePath + '.real');
        expect(fileInfo2.realProjectRelativePath).toBe('tsParser/testSrc.ts.real');
        expect(fileInfo2.relativePath).toBe('tsParser/testSrc.ts');
        var fileInfo3 = new FileInfo_1.FileInfo(module.exportArray[2].declarations[0], basePath);
        expect(fileInfo3.baseName).toBe('importedSrc');
        expect(fileInfo3.basePath).toBe(basePath);
        expect(fileInfo3.extension).toBe('ts');
        expect(fileInfo3.filePath).toBe(basePath + '/tsParser/importedSrc.ts');
        expect(fileInfo3.location).toEqual(jasmine.objectContaining({ start: { line: 2, character: 12 }, end: { line: 2, character: 20 } }));
        expect(fileInfo3.projectRelativePath).toBe('tsParser/importedSrc.ts');
        expect(fileInfo3.realFilePath).toBe(fileInfo3.filePath + '.real');
        expect(fileInfo3.realProjectRelativePath).toBe('tsParser/importedSrc.ts.real');
        expect(fileInfo3.relativePath).toBe('tsParser/importedSrc.ts');
    });
    describe('getRealFilePath()', function () {
        var originalPathSep = path.sep;
        afterEach(function () { return path.sep = originalPathSep; });
        it('should call `fs.realpathSync()`', function () {
            var parseInfo = parser.parse(['tsParser/testSrc.ts'], basePath);
            var module = parseInfo.moduleSymbols[0];
            var fileInfo = new FileInfo_1.FileInfo(module.exportArray[0].declarations[0], basePath);
            expect(fs.realpathSync).toHaveBeenCalledWith(fileInfo.filePath);
        });
        it('should normalize path separators to `/`', function () {
            var parseInfo = parser.parse(['tsParser/testSrc.ts'], basePath);
            var module = parseInfo.moduleSymbols[0];
            var fileInfo;
            path.sep = '\\';
            fs.realpathSync.and.returnValue('C:\\Foo\\bar.ts');
            fileInfo = new FileInfo_1.FileInfo(module.exportArray[0].declarations[0], basePath);
            expect(fileInfo.realFilePath).toBe('C:/Foo/bar.ts');
            path.sep = '/';
            fs.realpathSync.and.returnValue('/Foo/bar.ts');
            fileInfo = new FileInfo_1.FileInfo(module.exportArray[0].declarations[0], basePath);
            expect(fileInfo.realFilePath).toBe('/Foo/bar.ts');
        });
    });
});
//# sourceMappingURL=FileInfo.spec.js.map