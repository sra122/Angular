"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var Location_1 = require("./Location");
var path = require('canonical-path');
describe('Location', function () {
    var parser;
    var basePath;
    beforeEach(function () {
        parser = new _1.TsParser(require('dgeni/lib/mocks/log')(false));
        basePath = path.resolve(__dirname, '../../mocks');
    });
    it('should contain the start and end line and column of exports', function () {
        var parseInfo = parser.parse(['tsParser/Location.test.ts'], basePath);
        var moduleExports = parseInfo.moduleSymbols[0].exportArray;
        var testClassLocation = new Location_1.Location(moduleExports[0].declarations[0]);
        expect(testClassLocation.start).toEqual({ line: 0, character: 0 });
        expect(testClassLocation.end).toEqual({ line: 14, character: 1 });
        var testFunctionLocation = new Location_1.Location(moduleExports[1].declarations[0]);
        expect(testFunctionLocation.start).toEqual({ line: 14, character: 1 });
        expect(testFunctionLocation.end).toEqual({ line: 21, character: 1 });
    });
    it('should contain the start and end line and column of members', function () {
        var parseInfo = parser.parse(['tsParser/Location.test.ts'], basePath);
        var moduleExports = parseInfo.moduleSymbols[0].exportArray;
        var testClass = moduleExports[0];
        var property1Location = new Location_1.Location(testClass.members.get('property1').declarations[0]);
        expect(property1Location.start).toEqual({ line: 3, character: 24 });
        expect(property1Location.end).toEqual({ line: 7, character: 20 });
        var method1Location = new Location_1.Location(testClass.members.get('method1').declarations[0]);
        expect(method1Location.start).toEqual({ line: 7, character: 20 });
        expect(method1Location.end).toEqual({ line: 13, character: 3 });
    });
});
//# sourceMappingURL=Location.spec.js.map