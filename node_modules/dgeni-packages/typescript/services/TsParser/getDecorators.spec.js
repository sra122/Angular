"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require(".");
var getDecorators_1 = require("./getDecorators");
var path = require('canonical-path');
describe('getDecoratorSpec', function () {
    var parser;
    var basePath;
    var testClass;
    var testMethodDeclaration;
    var testParameters;
    beforeEach(function () {
        parser = new _1.TsParser(require('dgeni/lib/mocks/log')(false));
        basePath = path.resolve(__dirname, '../../mocks');
        var parseInfo = parser.parse(['tsParser/getDecorators.test.ts'], basePath);
        var moduleExports = parseInfo.moduleSymbols[0].exportArray;
        testClass = moduleExports[0];
        testMethodDeclaration = testClass.members.get('method').getDeclarations()[0];
        testParameters = testMethodDeclaration.parameters;
    });
    it('should return the decorators of a class declaration', function () {
        var classDecorators = getDecorators_1.getDecorators(testClass.getDeclarations()[0]);
        var classDecorator = classDecorators[0];
        expect(classDecorator.expression).toBeDefined();
        expect(classDecorator.name).toEqual('classDecorator');
        expect(classDecorator.isCallExpression).toBeFalsy();
        var classDecoratorFactory = classDecorators[1];
        expect(classDecoratorFactory.expression).toBeDefined();
        expect(classDecoratorFactory.name).toEqual('classDecoratorFactory');
        expect(classDecoratorFactory.isCallExpression).toBeTruthy();
        expect(classDecoratorFactory.argumentInfo).toEqual(["'foo'", "'bar'", { value: "'xxx'" }]);
        expect(classDecoratorFactory.arguments).toEqual(["'foo'", "'bar'", '{\n    value: \'xxx\'\n}']);
    });
    it('should return the decorators of a property declaration', function () {
        var propertyDecorators = getDecorators_1.getDecorators(testClass.members.get('property').getDeclarations()[0]);
        var propertyDecorator = propertyDecorators[0];
        expect(propertyDecorator.expression).toBeDefined();
        expect(propertyDecorator.name).toEqual('propertyDecorator');
        expect(propertyDecorator.isCallExpression).toBeFalsy();
        var propertyDecoratorFactory = propertyDecorators[1];
        expect(propertyDecoratorFactory.expression).toBeDefined();
        expect(propertyDecoratorFactory.name).toEqual('propertyDecoratorFactory');
        expect(propertyDecoratorFactory.isCallExpression).toBeTruthy();
        expect(propertyDecoratorFactory.argumentInfo).toEqual(["'foo'", "'bar'"]);
        expect(propertyDecoratorFactory.arguments).toEqual(["'foo'", "'bar'"]);
    });
    it('should return the decorators of a method declaration', function () {
        var methodDecorators = getDecorators_1.getDecorators(testMethodDeclaration);
        var methodDecorator = methodDecorators[0];
        expect(methodDecorator.expression).toBeDefined();
        expect(methodDecorator.name).toEqual('methodDecorator');
        var methodDecoratorFactory = methodDecorators[1];
        expect(methodDecoratorFactory.expression).toBeDefined();
        expect(methodDecoratorFactory.name).toEqual('methodDecoratorFactory');
        expect(methodDecoratorFactory.isCallExpression).toBeTruthy();
        expect(methodDecoratorFactory.argumentInfo).toEqual(["'foo'", "'bar'"]);
        expect(methodDecoratorFactory.arguments).toEqual(["'foo'", "'bar'"]);
    });
    it('should return the decorators of a parameter declaration', function () {
        var paramDecorator = getDecorators_1.getDecorators(testParameters[0])[0];
        expect(paramDecorator.expression).toBeDefined();
        expect(paramDecorator.name).toEqual('paramDecorator');
        var paramDecoratorFactory = getDecorators_1.getDecorators(testParameters[1])[0];
        expect(paramDecoratorFactory.expression).toBeDefined();
        expect(paramDecoratorFactory.name).toEqual('paramDecoratorFactory');
        expect(paramDecoratorFactory.isCallExpression).toBeTruthy();
        expect(paramDecoratorFactory.argumentInfo).toEqual(["'foo'", "'bar'"]);
        expect(paramDecoratorFactory.arguments).toEqual(["'foo'", "'bar'"]);
    });
});
//# sourceMappingURL=getDecorators.spec.js.map